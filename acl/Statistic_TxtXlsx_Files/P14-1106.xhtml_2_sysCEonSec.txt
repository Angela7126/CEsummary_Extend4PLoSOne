Current File: P14-1106.xhtml_2 P14-1106.xhtml

Section 0:  Abstract
	SentNum: 5
	CENum: 3
	SentCovered: 4
	Covered_Rate: 80.0000%

Section 1:  1 Introduction
	SentNum: 26
	CENum: 7
	SentCovered: 6
	Covered_Rate: 23.0769%

Section 2:  2 HPB Translation Model: an Overview
	SentNum: 6
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

Section 3:  3 Unified Linguistic Reordering Models
	SentNum: 60
	CENum: 22
	SentCovered: 24
	Covered_Rate: 40.0000%

Section 4:  4 Experiments
	SentNum: 47
	CENum: 5
	SentCovered: 6
	Covered_Rate: 12.7660%

Section 5:  5 Discussion
	SentNum: 35
	CENum: 7
	SentCovered: 9
	Covered_Rate: 25.7143%

Section 6:  6 Related Work
	SentNum: 39
	CENum: 5
	SentCovered: 5
	Covered_Rate: 12.8205%

Section 7:  7 Conclusion and Future Work
	SentNum: 8
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-1106.xhtml_2's CE cases

Section 0:  Abstract has 3 CE cases
	CASE: 1
	Stag: 0 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: This paper explores a simple and effective unified framework for incorporating soft linguistic reordering constraints into a hierarchical phrase-based translation system. 
		Cause: [(0, 10), (0, 20)]
		Effect: [(0, 0), (0, 8)]

	CASE: 2
	Stag: 2 3 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We develop novel features based on both models and use them as soft constraints to guide the translation process. Experiments on Chinese-English translation show that the reordering approach can significantly improve a state-of-the-art hierarchical phrase-based translation system. 
		Cause: [(0, 12), (1, 17)]
		Effect: [(0, 0), (0, 10)]

	CASE: 3
	Stag: 4 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: However, the gain achieved by the semantic reordering model is limited in the presence of the syntactic reordering model, and we therefore provide a detailed analysis of the behavior differences between the two. 
		Cause: [(0, 1), (0, 22)]
		Effect: [(0, 24), (0, 34)]

Section 1:  1 Introduction has 7 CE cases
	CASE: 1
	Stag: 6 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: The popular distortion or lexicalized reordering models in phrase-based SMT make good local predictions by focusing on reordering on word level, while the synchronous context free grammars in hierarchical phrase-based (HPB) translation models are capable of handling non-local reordering on the translation phrase level. 
		Cause: [(0, 15), (0, 20)]
		Effect: [(0, 21), (0, 46)]

	CASE: 2
	Stag: 7 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: However, reordering, especially without any help of external knowledge, remains a great challenge because an accurate reordering is usually beyond these word level or translation phrase level reordering models u'\u2019' ability. 
		Cause: [(0, 17), (0, 28)]
		Effect: [(0, 0), (0, 15)]

	CASE: 3
	Stag: 8 9 
		Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
		sentTXT: In addition, often these translation models fail to respect linguistically-motivated syntax and semantics. As a result, they tend to produce translations containing both syntactic and semantic reordering confusions. 
		Cause: [(0, 0), (0, 13)]
		Effect: [(1, 4), (1, 15)]

	CASE: 4
	Stag: 17 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Due to the fact that a constituent, especially a long one, usually maps into multiple discontinuous blocks in the target language, there is more than one way to describe the monotonicity or swapping patterns; we therefore design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word. 
		Cause: [(0, 1), (0, 38)]
		Effect: [(0, 40), (0, 61)]

	CASE: 5
	Stag: 17 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: Due to the fact that a constituent, especially a long one, usually maps into multiple discontinuous blocks in the target language, there is more than one way to describe the monotonicity or swapping patterns; we therefore design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word. 
		Cause: [(0, 18), (0, 21)]
		Effect: [(0, 0), (0, 15)]

	CASE: 6
	Stag: 17 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: Due to the fact that a constituent, especially a long one, usually maps into multiple discontinuous blocks in the target language, there is more than one way to describe the monotonicity or swapping patterns; we therefore design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word. 
		Cause: [(0, 8), (0, 15)]
		Effect: [(0, 0), (0, 5)]

	CASE: 7
	Stag: 19 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: PAS) reordering in SMT, it is still an open question whether semantic structure reordering strongly overlaps with syntactic structure reordering, since the semantic structure is closely tied to syntax. 
		Cause: [(0, 24), (0, 31)]
		Effect: [(0, 0), (0, 21)]

Section 2:  2 HPB Translation Model: an Overview has 0 CE cases
Section 3:  3 Unified Linguistic Reordering Models has 22 CE cases
	CASE: 1
	Stag: 38 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: The syntactic reordering model takes a CFG rule (e.g.,, VP u'\u2192' VP u'\u2062' PP u'\u2062' PP ) and models the reordering of the constituents on the left hand side by examining their translation or visit order according to the target language. 
		Cause: [(0, 53), (0, 55)]
		Effect: [(0, 0), (0, 50)]

	CASE: 2
	Stag: 41 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Note that we refer all core arguments, adjuncts, and predicates as semantic roles; thus we say the PAS in Figure 1 has 4 roles. 
		Cause: [(0, 0), (0, 14)]
		Effect: [(0, 17), (0, 26)]

	CASE: 3
	Stag: 42 
		Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
		sentTXT: According to the annotation principles in (Chinese) PropBank [ 28 , 42 ] , all the roles in a PAS map to a corresponding constituent in the parse tree, and these constituents (e.g.,, NPs and VBD in Figure 1 ) do not overlap with each other. 
		Cause: [(0, 2), (0, 9)]
		Effect: [(0, 13), (0, 50)]

	CASE: 4
	Stag: 44 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Treating the two forms of reorderings in a unified way, the semantic reordering model is obtainable by regarding a PAS as a CFG rule and considering a semantic role as a constituent. 
		Cause: [(0, 0), (0, 9)]
		Effect: [(0, 11), (0, 32)]

	CASE: 5
	Stag: 44 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Treating the two forms of reorderings in a unified way, the semantic reordering model is obtainable by regarding a PAS as a CFG rule and considering a semantic role as a constituent. 
		Cause: [(0, 7), (0, 21)]
		Effect: [(0, 0), (0, 5)]

	CASE: 6
	Stag: 45 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: Because the translation of a source constituent might result in multiple discontinuous blocks, there can be several ways to describe or group the reordering patterns. 
		Cause: [(0, 1), (0, 12)]
		Effect: [(0, 14), (0, 25)]

	CASE: 7
	Stag: 45 46 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Because the translation of a source constituent might result in multiple discontinuous blocks, there can be several ways to describe or group the reordering patterns. Therefore, we design two general constituent reordering sub-models. 
		Cause: [(0, 0), (0, 25)]
		Effect: [(1, 2), (1, 8)]

	CASE: 8
	Stag: 47 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: One is based on the leftmost aligned word (leftmost reordering model) and the other is based on the rightmost aligned word (rightmost reordering model), as follows. 
		Cause: [(0, 19), (0, 27)]
		Effect: [(0, 29), (0, 30)]

	CASE: 9
	Stag: 54 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: if the first constituent u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 1 is unaligned, we add a NULL word at the beginning of the target side and link u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 1 to the NULL word;. 
		Cause: [(0, 1), (0, 26)]
		Effect: [(0, 28), (0, 67)]

	CASE: 10
	Stag: 55 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: if a constituent u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i ( i 1 ) is unaligned, we add a link to the target word which is aligned to u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i - 1 , e.g.,, u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 4 will be linked to e 3 ; and. 
		Cause: [(0, 1), (0, 29)]
		Effect: [(0, 31), (0, 98)]

	CASE: 11
	Stag: 56 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: if k constituents u'\ud835' u'\udc4b' u'\ud835' u'\udc43' m 1 u'\u2062' u'\u2026' u'\u2062' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' m k ( m 1 u'\u2026' m k ) are linked to the same target word, then v m i = v m i + 1 - 1 , e.g.,, since u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 3 and u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 4 are both linked to e 3 , then v 3 = v 4 - 1. 
		Cause: [(0, 98), (0, 146)]
		Effect: [(0, 148), (0, 155)]

	CASE: 12
	Stag: 65 
		Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
		sentTXT: where u'\u03a8' u'\u2062' ( u'\ud835' u'\udc50' u'\ud835' u'\udc53' u'\ud835' u'\udc54' ) indicates the surrounding context of the CFG. 
		Cause: [(0, 1), (0, 42)]
		Effect: [(0, 44), (0, 49)]

	CASE: 13
	Stag: 66 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: By assuming that any two reordering types in u'\ud835' u'\udc3f' u'\ud835' u'\udc45' u'\ud835' u'\udc47' = { l u'\u2062' r u'\u2062' t 1 , u'\u2026' , l u'\u2062' r u'\u2062' t n - 1 } are independent of each other, we reformulate Eq. 
		Cause: [(0, 1), (0, 82)]
		Effect: [(0, 83), (0, 86)]

	CASE: 14
	Stag: 68 69 
		Pattern: 2 [['accordingly']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Similarly, the sequence of rightmost reordering types RRT can be decided for a CFG rule u'\ud835' u'\udc4b' u'\ud835' u'\udc43' u'\u2192' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' 1 u'\u2062' u'\u2026' u'\u2062' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' n. Accordingly, for a PAS pas u'\ud835' u'\udc43' u'\ud835' u'\udc34' u'\ud835' u'\udc46' u'\u2192' u'\ud835' u'\udc45' 1 u'\u2062' u'\u2026' u'\u2062' u'\ud835' u'\udc45' n , we can obtain its sequences of leftmost and rightmost reordering types by using the same way described above. 
		Cause: [(0, 0), (0, 97)]
		Effect: [(1, 2), (1, 96)]

	CASE: 15
	Stag: 73 74 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: For u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i and u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i + 1 in cfg , the features are aimed to examine which of them should be translated first. Therefore, most features share two common components the syntactic categories of u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i and u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i + 1. 
		Cause: [(0, 0), (0, 61)]
		Effect: [(1, 2), (1, 56)]

	CASE: 16
	Stag: 81 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Unlike the conventional phrase and lexical translation features, whose values are phrase pair-determined and thus can be calculated offline, the value of the reordering features can only be obtained during decoding time, and requires word alignment information as well. 
		Cause: [(0, 0), (0, 13)]
		Effect: [(0, 16), (0, 41)]

	CASE: 17
	Stag: 82 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: Before we present the algorithm integrating the reordering models, we define the following functions by assuming XP i and XP i + 1 are the constituent pair of interest in CFG rule cfg , H is the translation hypothesis and a is its word alignment. 
		Cause: [(0, 16), (0, 18)]
		Effect: [(0, 19), (0, 45)]

	CASE: 18
	Stag: 84 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: u'\u2131' 2 u'\u2062' ( H , u'\u2006' u'\ud835' u'\udc50' u'\ud835' u'\udc53' u'\ud835' u'\udc54' , u'\u2006' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i , u'\u2006' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i + 1 ) returns true if the reordering of the pair u'\u27e8' XP i , XP i + 1 u'\u27e9' in rule cfg has not been calculated yet; otherwise returns false. 
		Cause: [(0, 109), (0, 137)]
		Effect: [(0, 0), (0, 107)]

	CASE: 19
	Stag: 85 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: u'\u2131' 3 u'\u2062' ( H , u'\u2006' a , u'\u2006' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i , u'\u2006' u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i + 1 ) returns the leftmost and rightmost reordering types for the constituent pair u'\u27e8' XP i , XP i + 1 u'\u27e9' , given alignment a , according to Section 3. 
		Cause: [(0, 112), (0, 113)]
		Effect: [(0, 0), (0, 108)]

	CASE: 20
	Stag: 89 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: Given a hypothesis H with its alignment a , it traverses all CFG rules in the parse tree and sees if two adjacent constituents are conditioned to trigger the reordering models (lines 2-4. 
		Cause: [(0, 21), (0, 33)]
		Effect: [(0, 0), (0, 19)]

	CASE: 21
	Stag: 92 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: Note that Function u'\u2131' 1 returns true if hypothesis H fully covers, or fully contains, constituent X u'\u2062' P i , regardless of the reordering type of X u'\u2062' P i. 
		Cause: [(0, 12), (0, 15)]
		Effect: [(0, 17), (0, 42)]

	CASE: 22
	Stag: 95 96 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: To get the two semantic reordering model feature values, we simply use Algorithm 1 and its associated functions from u'\u2131' 1 to u'\u2131' 5 replacing a CFG rule cfg with a PAS pas , and a constituent u'\ud835' u'\udc4b' u'\ud835' u'\udc43' i with a semantic role u'\ud835' u'\udc45' i. Algorithm 1 therefore permits a unified treatment of syntactic and PAS-based reordering, even though it is expressed in terms of syntactic reordering here for ease of presentation. 
		Cause: [(0, 1), (1, 1)]
		Effect: [(1, 3), (1, 27)]

Section 4:  4 Experiments has 5 CE cases
	CASE: 1
	Stag: 111 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since the syntactic parses of the tuning and test data contain 29 types of constituent labels and 35 types of POS tags, we have 29 types of XP + features and 64 types of XP = features. 
		Cause: [(0, 1), (0, 21)]
		Effect: [(0, 23), (0, 37)]

	CASE: 2
	Stag: 117 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We first run syntactic parsing and semantic role labeling on the Chinese sentences, then train the models by using MaxEnt toolkit with L1 regularizer [ 34 ]. 
		Cause: [(0, 19), (0, 25)]
		Effect: [(0, 0), (0, 17)]

	CASE: 3
	Stag: 122 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: In order to understand how well the MR08 system respects their reordering preference, we use the gold alignment dataset LDC2006E86, in which the source sentences are from the Chinese Treebank, and thus both the gold parse trees and gold predicate-argument structures are available. 
		Cause: [(0, 0), (0, 31)]
		Effect: [(0, 35), (0, 45)]

	CASE: 4
	Stag: 124 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: For example, the first row shows that based on the gold alignment, for u'\u27e8' PP,VP u'\u27e9' , 16% are in monotone and 76% are in swap reordering. 
		Cause: [(0, 10), (0, 12)]
		Effect: [(0, 14), (0, 39)]

	CASE: 5
	Stag: 125 126 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: However, our MR08 system outputs 46% of them in monotone and and 50% in swap reordering. Hence, the reordering accuracy for u'\u27e8' PP,VP u'\u27e9' is 54%. 
		Cause: [(0, 0), (0, 18)]
		Effect: [(1, 2), (1, 21)]

Section 5:  5 Discussion has 7 CE cases
	CASE: 1
	Stag: 144 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The trend of the results, summarized as performance gain over the baseline and MR08 systems averaged over all test sets, is presented in Table 6. 
		Cause: [(0, 8), (0, 26)]
		Effect: [(0, 0), (0, 6)]

	CASE: 2
	Stag: 150 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: This is not surprising since the semantic reordering features are exclusively attached to predicates, and the span set of the semantic roles is a strict subset of the span set of the syntactic constituents; only 22% of syntactic constituents are semantic roles. 
		Cause: [(0, 5), (0, 13)]
		Effect: [(0, 15), (0, 44)]

	CASE: 3
	Stag: 152 153 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Of all the semantic role pairs, 44% are in the same CFG rules, indicating that this part of semantic reordering has overlap with syntactic reordering. Therefore, the PAS model has fewer opportunities to influence reordering. 
		Cause: [(0, 0), (0, 27)]
		Effect: [(1, 2), (1, 10)]

	CASE: 4
	Stag: 159 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: Once we have the (semi-)gold alignment, we compute the gold reordering types between two adjacent syntactic constituents or semantic roles. 
		Cause: [(0, 1), (0, 9)]
		Effect: [(0, 11), (0, 24)]

	CASE: 5
	Stag: 161 162 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Table 7 shows the accuracy averaged over the four gold reordering sets (the four reference translations. It shows that 1) as expected, our classifiers do worse on the harder semantic reordering prediction than syntactic reordering prediction; 2) thanks to the high accuracy obtained by the maxent classifiers, integrating either the syntactic or the semantic reordering constraints results in better reordering performance from both syntactic and semantic perspectives; 3) in terms of the mutual impact, the syntactic reordering models help improving semantic reordering more than the semantic reordering models help improving syntactic reordering; and 4) the rightmost models have a learnability advantage over the leftmost models, achieving higher accuracy across the board. 
		Cause: [(1, 6), (1, 105)]
		Effect: [(0, 0), (1, 4)]

	CASE: 6
	Stag: 171 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We report the averaged performance by using the gold reordering type extracted from the four reference translations. 
		Cause: [(0, 6), (0, 16)]
		Effect: [(0, 0), (0, 4)]

	CASE: 7
	Stag: 174 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: 33.4 on average) and there is still some room for improvement by building a better maximum entropy classifiers (e.g.,, 34.9 vs. 
		Cause: [(0, 13), (0, 16)]
		Effect: [(0, 17), (0, 24)]

Section 6:  6 Related Work has 5 CE cases
	CASE: 1
	Stag: 180 
		Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
		sentTXT: Some previous work pre-ordered words in the source sentences, so that the word order of source and target sentences is similar. 
		Cause: [(0, 0), (0, 9)]
		Effect: [(0, 12), (0, 21)]

	CASE: 2
	Stag: 184 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: [ 44 ] obtained word order by using a reranking approach to reposition nodes in syntactic parse trees. 
		Cause: [(0, 7), (0, 17)]
		Effect: [(0, 0), (0, 5)]

	CASE: 3
	Stag: 195 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: 4 4 Note that they obtained the translation order of source word pairs by predicting the reordering of adjacent constituents, which was quite close to our work. 
		Cause: [(0, 14), (0, 27)]
		Effect: [(0, 0), (0, 12)]

	CASE: 4
	Stag: 196 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: Our work, which shares this approach, differs from their work primarily in that our syntactic reordering models are based on the constituent level, rather than the word level. 
		Cause: [(0, 22), (0, 30)]
		Effect: [(0, 0), (0, 19)]

	CASE: 5
	Stag: 214 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Although there are overlaps between translation phrases and syntactic constituents, it is reasonable to think that the two reordering approaches can work together well and even complement each other, as the linguistic patterns they capture differ substantially. 
		Cause: [(0, 32), (0, 38)]
		Effect: [(0, 0), (0, 29)]

Section 7:  7 Conclusion and Future Work has 0 CE cases
#-------------------------------------------------

