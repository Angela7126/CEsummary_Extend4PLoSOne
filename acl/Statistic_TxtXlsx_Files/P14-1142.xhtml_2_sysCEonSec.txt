Current File: P14-1142.xhtml_2 P14-1142.xhtml

Section 0:  Abstract
	SentNum: 4
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

Section 1:  1 Introduction
	SentNum: 25
	CENum: 10
	SentCovered: 10
	Covered_Rate: 40.0000%

Section 2:  2 Related Works
	SentNum: 18
	CENum: 4
	SentCovered: 5
	Covered_Rate: 27.7778%

Section 3:  3 Pinyin Input Method Model
	SentNum: 107
	CENum: 32
	SentCovered: 32
	Covered_Rate: 29.9065%

Section 4:  4 Experiments
	SentNum: 61
	CENum: 22
	SentCovered: 25
	Covered_Rate: 40.9836%

Section 5:  5 Conclusion
	SentNum: 4
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-1142.xhtml_2's CE cases

Section 0:  Abstract has 0 CE cases
Section 1:  1 Introduction has 10 CE cases
	CASE: 1
	Stag: 5 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: However, every Chinese word inputted into computer or cellphone cannot be typed through one-to-one mapping of key-to-letter inputting directly, but has to go through an IME as there are thousands of Chinese characters for inputting while only 26 letter keys are available in the keyboard. 
		Cause: [(0, 30), (0, 47)]
		Effect: [(0, 0), (0, 28)]

	CASE: 2
	Stag: 5 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: However, every Chinese word inputted into computer or cellphone cannot be typed through one-to-one mapping of key-to-letter inputting directly, but has to go through an IME as there are thousands of Chinese characters for inputting while only 26 letter keys are available in the keyboard. 
		Cause: [(0, 7), (0, 17)]
		Effect: [(0, 0), (0, 5)]

	CASE: 3
	Stag: 9 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Pinyin is originally designed as the phonetic symbol of a Chinese character (based on the standard modern Chinese, mandarin) , using Latin letters as its syllable notation. 
		Cause: [(0, 5), (0, 20)]
		Effect: [(0, 0), (0, 3)]

	CASE: 4
	Stag: 11 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: Most characters usually have unique pinyin representations, while a few Chinese characters may be pronounced in several different ways, so they may have multiple pinyin representations. 
		Cause: [(0, 0), (0, 19)]
		Effect: [(0, 22), (0, 27)]

	CASE: 5
	Stag: 12 
		Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
		sentTXT: The advantage of pinyin IME is that it only adopts the pronunciation perspective of Chinese characters so that it is simple and easy to learn. 
		Cause: [(0, 0), (0, 15)]
		Effect: [(0, 18), (0, 24)]

	CASE: 6
	Stag: 16 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since Chinese characters are entered via IME, those user-made typos do not immediately lead to spelling errors. 
		Cause: [(0, 1), (0, 6)]
		Effect: [(0, 8), (0, 17)]

	CASE: 7
	Stag: 18 19 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Normally, the user may immediately notice the inputting error and then make corrections, which usually means doing a bunch of extra operations like cursor movement, deletion and re-typing. Thus there are two separated sub-tasks for Chinese spell checking. 
		Cause: [(0, 0), (0, 30)]
		Effect: [(1, 1), (1, 9)]

	CASE: 8
	Stag: 23 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: The user may fail to input the completely right pinyin simply because he/she is a dialect speaker and does not know the exact pronunciation for the expected character. 
		Cause: [(0, 12), (0, 27)]
		Effect: [(0, 0), (0, 9)]

	CASE: 9
	Stag: 24 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: This may be a very common situation since there are about seven quite different dialects in Chinese, among which being spoken languages, six are far different from the standard modern Chinese, mandarin. 
		Cause: [(0, 8), (0, 16)]
		Effect: [(0, 18), (0, 33)]

	CASE: 10
	Stag: 25 
		Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
		sentTXT: With the boom of smart-phones, pinyin typos worsen due to the limited size of soft keyboard, and the lack of physical feedback on the touch screen. 
		Cause: [(0, 11), (0, 27)]
		Effect: [(0, 0), (0, 8)]

Section 2:  2 Related Works has 4 CE cases
	CASE: 1
	Stag: 30 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The idea of u'\u201c' statistical input method u'\u201d' was proposed by modeling PTC conversion as a hidden Markov model (HMM), and using Viterbi [ 26 ] algorithm to decode the sequence. 
		Cause: [(0, 23), (0, 41)]
		Effect: [(0, 0), (0, 21)]

	CASE: 2
	Stag: 31 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: They solved the typo correction problem by decomposing the conditional probability P ( H. 
		Cause: [(0, 7), (0, 13)]
		Effect: [(0, 0), (0, 5)]

	CASE: 3
	Stag: 34 35 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: However, real user input data can be very noisy and not very convenient to obtain. As we will propose a joint model in this paper, such an individual typing model is not necessarily built in our approach. 
		Cause: [(1, 1), (1, 22)]
		Effect: [(0, 0), (0, 15)]

	CASE: 4
	Stag: 39 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: We release this assumption since our model solves segmentation, typo correction and PTC conversion jointly. 
		Cause: [(0, 5), (0, 15)]
		Effect: [(0, 0), (0, 3)]

Section 3:  3 Pinyin Input Method Model has 32 CE cases
	CASE: 1
	Stag: 55 
		Pattern: 0 [['that', 'is', 'why']]---- [['&C', '(,/./;/--)', '(&AND)', '(&adv)'], ['&R']]
		sentTXT: Without word delimiters, linguists have argued on what a Chinese word really is for a long time and that is why there is always a primary word segmentation treatment in most Chinese language processing tasks [ 40 , 13 , 41 , 39 , 42 , 43 ]. 
		Cause: [(0, 0), (0, 17)]
		Effect: [(0, 22), (0, 48)]

	CASE: 2
	Stag: 56 
		Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
		sentTXT: A Chinese word may contain from 1 to over 10 characters due to different word segmentation conventions. 
		Cause: [(0, 13), (0, 16)]
		Effect: [(0, 0), (0, 10)]

	CASE: 3
	Stag: 59 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: Non-Chinese users may feel confused or even surprised if they know that when typing pinyin through an IME, Chinese IME users will never enter delimiters such as u'\u201c' Space u'\u201d' key to segment either pinyin syllables or pinyin words, but just input the entire un-segmented pinyin sequence. 
		Cause: [(0, 9), (0, 17)]
		Effect: [(0, 19), (0, 56)]

	CASE: 4
	Stag: 60 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: For example, if one wants to input u'\u201c' \song u'\u4f60' u'\u597d' u'\u4e16' u'\u754c'  (Hello world) u'\u201d' , he will just type u'\u201c' nihaoshijie u'\u201d' instead of segmented pinyin sequence u'\u201c' ni hao shi jie u'\u201d'. 
		Cause: [(0, 4), (0, 42)]
		Effect: [(0, 45), (0, 78)]

	CASE: 5
	Stag: 62 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly, it is convenient to perform pinyin syllable segmentation by using rules. 
		Cause: [(0, 1), (0, 14)]
		Effect: [(0, 16), (0, 26)]

	CASE: 6
	Stag: 62 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly, it is convenient to perform pinyin syllable segmentation by using rules. 
		Cause: [(0, 9), (0, 10)]
		Effect: [(0, 0), (0, 7)]

	CASE: 7
	Stag: 62 63 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly, it is convenient to perform pinyin syllable segmentation by using rules. But as the pinyin input is not segmented, it is nearly impossible to adopt previous spell checking methods for English to pinyin typo checking, although techniques for English spell checking have been well developed. 
		Cause: [(1, 2), (1, 35)]
		Effect: [(0, 2), (1, 0)]

	CASE: 8
	Stag: 64 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: A bit confusing but interesting, pinyin typo correction and segmentation come as two sides of one problem when a pinyin sequence is mistyped, it is unlikely to be correctly segmented; when it is segmented in an awkward way, it is likely to be mistyped. 
		Cause: [(0, 13), (0, 32)]
		Effect: [(0, 0), (0, 11)]

	CASE: 9
	Stag: 65 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: Inspired by [ 36 ] and [ 14 ] , we adopt the graph model for Chinese spell checking for pinyin segmentation and typo correction, which is based on the shortest path word segmentation algorithm [ 1 ]. 
		Cause: [(0, 30), (0, 38)]
		Effect: [(0, 0), (0, 27)]

	CASE: 10
	Stag: 67 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: The shortest path segmentation algorithm is based on the idea that a reasonable segmentation should minimize the number of segmented units. 
		Cause: [(0, 8), (0, 20)]
		Effect: [(0, 0), (0, 4)]

	CASE: 11
	Stag: 71 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: Possible legal syllables fetched from dictionary u'\ud835' u'\udd3b' p according to the input pinyin sequence. 
		Cause: [(0, 19), (0, 22)]
		Effect: [(0, 0), (0, 16)]

	CASE: 12
	Stag: 79 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: This is the single source shortest path (SSSP) problem on DAG which has an efficient algorithm by preprocessing the DAG with topology sort, then traversing vertices and edges in topological order. 
		Cause: [(0, 19), (0, 24)]
		Effect: [(0, 25), (0, 33)]

	CASE: 13
	Stag: 82 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: For example, one intends to input u'\u201c' \song u'\u4f60' u'\u597d' u'\u4e16' u'\u754c'  (Hello world) u'\u201d' by typing u'\u201c' nihaoshijie u'\u201d' , but mistyped as u'\u201c' m ihaoshiji w u'\u201d'. 
		Cause: [(0, 60), (0, 71)]
		Effect: [(0, 0), (0, 58)]

	CASE: 14
	Stag: 90 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If the adjacent syllables can be merged into a legal syllable, the merged syllable is also added into u'\ud835' u'\udd4d'. 
		Cause: [(0, 1), (0, 10)]
		Effect: [(0, 12), (0, 28)]

	CASE: 15
	Stag: 92 93 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Syllables with Levenshtein distance under a certain threshold are considered as similar. The vertex weight is the Levenshtein distance multiply by a normalization parameter. 
		Cause: [(0, 11), (1, 10)]
		Effect: [(0, 0), (0, 9)]

	CASE: 16
	Stag: 98 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Merely using the above model, the typo correction result is not satisfying yet, no matter how much effort is paid. 
		Cause: [(0, 0), (0, 4)]
		Effect: [(0, 6), (0, 21)]

	CASE: 17
	Stag: 98 99 
		Pattern: 1 [['reason'], [['that', 'because']]]---- [['&R', '(,/./;/--)', '&ONE', '(&ADJ)'], ['(for &THIS (&NP))', '&BE'], ['&C']]
		sentTXT: Merely using the above model, the typo correction result is not satisfying yet, no matter how much effort is paid. The major reason is that the basic semantic unit of Chinese language is actually word (tough vaguely defined) which is usually composed of several characters. 
		Cause: [(1, 5), (1, 26)]
		Effect: [(0, 0), (0, 21)]

	CASE: 18
	Stag: 99 100 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: The major reason is that the basic semantic unit of Chinese language is actually word (tough vaguely defined) which is usually composed of several characters. Thus the conditional probability between characters does not make much sense. 
		Cause: [(0, 0), (0, 26)]
		Effect: [(1, 1), (1, 10)]

	CASE: 19
	Stag: 102 103 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: However, using pinyin words instead of syllables is not a wise choice because pinyin word segmentation is not so easy a task as syllable segmentation. To make typo correction better, we consider to integrate it with PTC conversion using a joint model. 
		Cause: [(0, 0), (0, 18)]
		Effect: [(0, 20), (1, 16)]

	CASE: 20
	Stag: 131 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: The graph G = ( u'\ud835' u'\udd4d' , u'\ud835' u'\udd3c' ) is constructed based on graph G c for typo correction in Section 3.2. 
		Cause: [(0, 35), (0, 39)]
		Effect: [(0, 3), (0, 33)]

	CASE: 21
	Stag: 131 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: The graph G = ( u'\ud835' u'\udd4d' , u'\ud835' u'\udd3c' ) is constructed based on graph G c for typo correction in Section 3.2. 
		Cause: [(0, 28), (0, 30)]
		Effect: [(0, 0), (0, 25)]

	CASE: 22
	Stag: 135 136 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Corresponding Chinese words are fetched from a PTC dictionary u'\ud835' u'\udd3b' c , which is a dictionary maps pinyin words to Chinese words, and added as vertices. The vertex weight consists of two parts. 
		Cause: [(0, 35), (1, 4)]
		Effect: [(0, 1), (0, 33)]

	CASE: 23
	Stag: 138 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If the corresponding pinyin syllables in G c have an edge between them, the vertices in G also have an edge. 
		Cause: [(0, 1), (0, 12)]
		Effect: [(0, 14), (0, 21)]

	CASE: 24
	Stag: 140 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Although the model is formulated on first order HMM, i.e.,, the LM used for transition probability is a bigram one, it is easy to extend the model to take advantage of higher order n -gram LM, by tracking longer history while traversing the graph. 
		Cause: [(0, 43), (0, 49)]
		Effect: [(0, 0), (0, 41)]

	CASE: 25
	Stag: 144 
		Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
		sentTXT: According to our empirical statistics, when setting threshold T = 2 , for a sentence of M characters, the joint graph will have u'\ud835' u'\udd4d'. 
		Cause: [(0, 2), (0, 4)]
		Effect: [(0, 6), (0, 34)]

	CASE: 26
	Stag: 147 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: To reduce the scale of graph G , we filter graph G c by searching its K -shortest paths first to get G c u'\u2032' and construct G on top of G c u'\u2032'. 
		Cause: [(0, 14), (0, 16)]
		Effect: [(0, 17), (0, 41)]

	CASE: 27
	Stag: 149 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: The scale of graph may be thus drastically reduced. 
		Cause: [(0, 0), (0, 5)]
		Effect: [(0, 7), (0, 8)]

	CASE: 28
	Stag: 150 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: An efficient heap data structure is required in K -shortest paths algorithm [ 7 ] for backtracking the best paths to current vertex while traversing. 
		Cause: [(0, 17), (0, 23)]
		Effect: [(0, 0), (0, 15)]

	CASE: 29
	Stag: 151 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The heap is implemented as a priority queue of size K sorted according to path length that should support efficient push and pop operations. 
		Cause: [(0, 5), (0, 22)]
		Effect: [(0, 0), (0, 3)]

	CASE: 30
	Stag: 151 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: The heap is implemented as a priority queue of size K sorted according to path length that should support efficient push and pop operations. 
		Cause: [(0, 9), (0, 10)]
		Effect: [(0, 0), (0, 6)]

	CASE: 31
	Stag: 152 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: Fibonacci heap [ 9 ] is adopted for the heap implementation since it has a push complexity of O u'\u2062' ( 1 ) which is better than the O u'\u2062' ( K ) for other heap structures. 
		Cause: [(0, 12), (0, 44)]
		Effect: [(0, 0), (0, 10)]

	CASE: 32
	Stag: 153 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: Another benefit provided by K -shortest paths is that it can be used for generating N -best candidates of PTC conversion, which may be helpful for further performance improvement. 
		Cause: [(0, 15), (0, 31)]
		Effect: [(0, 0), (0, 13)]

Section 4:  4 Experiments has 22 CE cases
	CASE: 1
	Stag: 159 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: The pinyin part is segmented according to the Chinese part. 
		Cause: [(0, 7), (0, 9)]
		Effect: [(0, 0), (0, 4)]

	CASE: 2
	Stag: 160 161 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: This vocabulary u'\ud835' u'\udcb1' also serves as the PTC dictionary. The original vocabulary is not labeled with pinyin, thus we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME, to label the vocabulary u'\ud835' u'\udcb1' with pinyin. 
		Cause: [(0, 15), (1, 28)]
		Effect: [(0, 0), (0, 13)]

	CASE: 3
	Stag: 161 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: The original vocabulary is not labeled with pinyin, thus we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME, to label the vocabulary u'\ud835' u'\udcb1' with pinyin. 
		Cause: [(0, 0), (0, 7)]
		Effect: [(0, 10), (0, 44)]

	CASE: 4
	Stag: 162 163 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The emission probabilities are estimated using the lexical translation module of MOSES [ 17 ] as u'\u201c' translation probability u'\u201d' from pinyin to Chinese. We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME, thus we are unable to use existing evaluation systems [ 15 ] for full Chinese IME functions. 
		Cause: [(0, 16), (1, 43)]
		Effect: [(0, 0), (0, 14)]

	CASE: 5
	Stag: 163 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME, thus we are unable to use existing evaluation systems [ 15 ] for full Chinese IME functions. 
		Cause: [(0, 0), (0, 26)]
		Effect: [(0, 29), (0, 44)]

	CASE: 6
	Stag: 167 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: We will also report the conversion error rate (ConvER) proposed by [ 44 ] , which is the ratio of the number of mistyped pinyin word that is not converted to the right Chinese word over the total number of mistyped pinyin words 3 3 Other evaluation metrics are also proposed by [ 44 ] which is only suitable for their system since our system uses a joint model. 
		Cause: [(0, 65), (0, 70)]
		Effect: [(0, 0), (0, 63)]

	CASE: 7
	Stag: 171 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: According to our empirical observation, emission probabilities are mostly 1 since most Chinese words have unique pronunciation. 
		Cause: [(0, 12), (0, 17)]
		Effect: [(0, 0), (0, 10)]

	CASE: 8
	Stag: 171 
		Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
		sentTXT: According to our empirical observation, emission probabilities are mostly 1 since most Chinese words have unique pronunciation. 
		Cause: [(0, 2), (0, 4)]
		Effect: [(0, 6), (0, 10)]

	CASE: 9
	Stag: 171 172 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: According to our empirical observation, emission probabilities are mostly 1 since most Chinese words have unique pronunciation. So in this step we set u'\u0393' = 0. 
		Cause: [(0, 0), (0, 17)]
		Effect: [(1, 1), (1, 11)]

	CASE: 10
	Stag: 177 
		Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
		sentTXT: According to the results, we then choose the trigram LM using Kneser-Ney smoothing with interpolation. 
		Cause: [(0, 2), (0, 3)]
		Effect: [(0, 5), (0, 15)]

	CASE: 11
	Stag: 180 181 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: We can observe that MIU-Acc slightly decreases while N goes up, but Ch-Acc largely increases. We therefore choose N = 10 as trade-off. 
		Cause: [(0, 1), (1, 0)]
		Effect: [(1, 2), (1, 7)]

	CASE: 12
	Stag: 188 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: The typo rate is set according to previous Human-Computer Interaction (HCI) studies. 
		Cause: [(0, 7), (0, 13)]
		Effect: [(0, 0), (0, 4)]

	CASE: 13
	Stag: 189 
		Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
		sentTXT: Due to few works have been done on modeling Chinese text entry, we have to refer to those corresponding results on English [ 32 , 22 , 6 ] , which show that the average typo rate is about 2%. 
		Cause: [(0, 2), (0, 11)]
		Effect: [(0, 13), (0, 41)]

	CASE: 14
	Stag: 191 192 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The collected data consists of 775 mistyped pinyin words caused by one edit operation, and 85 caused by two edit operations. As we observe on \msc Train that the average pinyin word length is 5.24, then typo rate in the experiment of [ 44 ] can be roughly estimated as. 
		Cause: [(1, 1), (1, 30)]
		Effect: [(0, 0), (0, 21)]

	CASE: 15
	Stag: 193 194 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: which is similar to the conclusion on English. Thus we generate corpora from \msc Dev with typo rate of 0% ( 0-P ), 2% ( 2-P ), and 5% ( 5-P ) to evaluate the system. 
		Cause: [(0, 0), (0, 7)]
		Effect: [(1, 1), (1, 33)]

	CASE: 16
	Stag: 196 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since pinyin syllable is much shorter than pinyin word, this ratio can be higher for pinyin syllables. 
		Cause: [(0, 1), (0, 8)]
		Effect: [(0, 10), (0, 17)]

	CASE: 17
	Stag: 197 198 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: From our statistics on \msc Train , with 2% randomly generated typos, P r ( u'\u2112' ( S u'\u2032' , S ) 2 ) = 99.86 %. Thus we set the threshold T for u'\u2112' to 2. 
		Cause: [(0, 0), (0, 37)]
		Effect: [(1, 1), (1, 12)]

	CASE: 18
	Stag: 203 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: We choose K = 20 since there is no significant improvement when K 20. 
		Cause: [(0, 6), (0, 13)]
		Effect: [(0, 0), (0, 4)]

	CASE: 19
	Stag: 208 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since sunpinyin does not have typo correction module and performs much poorer than our baseline system, we do not include it in the comparison. 
		Cause: [(0, 1), (0, 15)]
		Effect: [(0, 17), (0, 24)]

	CASE: 20
	Stag: 209 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: Though no direct proofs can be found to indicate if Google Input Tool has an independent typo correction component, its outputs show that such a component is unlikely available. 
		Cause: [(0, 10), (0, 18)]
		Effect: [(0, 20), (0, 29)]

	CASE: 21
	Stag: 210 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since Google Input Tool has to be accessed through a web interface and the network connection cannot be guaranteed we only take a subset of 10K sentences of \msc Test to perform the experiments, and the results are shown in Table 3. 
		Cause: [(0, 1), (0, 35)]
		Effect: [(0, 37), (0, 44)]

	CASE: 22
	Stag: 211 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: The scores reported in [ 44 ] are not listed in Table 4 since the data set is different. 
		Cause: [(0, 14), (0, 18)]
		Effect: [(0, 0), (0, 12)]

Section 5:  5 Conclusion has 0 CE cases
#-------------------------------------------------

