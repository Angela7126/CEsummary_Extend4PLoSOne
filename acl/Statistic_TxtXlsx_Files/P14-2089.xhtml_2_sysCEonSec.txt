Current File: P14-2089.xhtml_2 P14-2089.xhtml

Section 0:  Abstract
	SentNum: 3
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

Section 1:  1 Introduction
	SentNum: 13
	CENum: 3
	SentCovered: 3
	Covered_Rate: 23.0769%

Section 2:  2 Learning Embeddings
	SentNum: 54
	CENum: 17
	SentCovered: 21
	Covered_Rate: 38.8889%

Section 3:  3 Evaluation
	SentNum: 21
	CENum: 6
	SentCovered: 6
	Covered_Rate: 28.5714%

Section 4:  4 Experiments
	SentNum: 53
	CENum: 14
	SentCovered: 14
	Covered_Rate: 26.4151%

Section 5:  5 Conclusion
	SentNum: 7
	CENum: 3
	SentCovered: 3
	Covered_Rate: 42.8571%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-2089.xhtml_2's CE cases

Section 0:  Abstract has 0 CE cases
Section 1:  1 Introduction has 3 CE cases
	CASE: 1
	Stag: 10 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: We propose a new training objective for learning word embeddings that incorporates prior knowledge. 
		Cause: [(0, 7), (0, 13)]
		Effect: [(0, 0), (0, 5)]

	CASE: 2
	Stag: 11 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Our model builds on word2vec [] , a neural network based language model that learns word embeddings by maximizing the probability of raw text. 
		Cause: [(0, 19), (0, 24)]
		Effect: [(0, 0), (0, 17)]

	CASE: 3
	Stag: 13 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: The latter was also used in [] for training a network for predicting synset relation. 
		Cause: [(0, 9), (0, 15)]
		Effect: [(0, 0), (0, 7)]

Section 2:  2 Learning Embeddings has 17 CE cases
	CASE: 1
	Stag: 16 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: We present a general model for learning word embeddings that incorporates prior knowledge available for a domain. 
		Cause: [(0, 6), (0, 16)]
		Effect: [(0, 0), (0, 4)]

	CASE: 2
	Stag: 18 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We begin by reviewing the word2vec objective and then present augmentations of the objective for prior knowledge, including different training strategies. 
		Cause: [(0, 3), (0, 16)]
		Effect: [(0, 0), (0, 1)]

	CASE: 3
	Stag: 19 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: Word2vec [] is an algorithm for learning embeddings using a neural language model. 
		Cause: [(0, 7), (0, 13)]
		Effect: [(0, 0), (0, 5)]

	CASE: 4
	Stag: 21 
		Pattern: 5 [['so'], ['as', 'to']]---- [['&C', '(,)'], ['(&adj/&adv@C@)'], ['&R']]
		sentTXT: Training learns these representations for each word w t (the t th word in a corpus of size T ) so as to maximize the log likelihood of each token given its context words within a window sized c. 
		Cause: [(0, 0), (0, 20)]
		Effect: [(0, 24), (0, 39)]

	CASE: 5
	Stag: 25 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: The latter worked better in our experiments so we focus on it in our presentation cbow defines p ( w t w t - c t + c ) as. 
		Cause: [(0, 0), (0, 6)]
		Effect: [(0, 8), (0, 29)]

	CASE: 6
	Stag: 28 29 
		Pattern: 0 [[['imply', 'implies', 'implied', 'indicate', 'indicates', 'indicated']]]---- [['&C', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['(that)', '&R@Complete@']]
		sentTXT: Suppose we have a resource that indicates relations between words. In the case of semantics, we could have a resource that encodes semantic similarity between words. 
		Cause: [(0, 0), (0, 4)]
		Effect: [(0, 7), (1, 15)]

	CASE: 7
	Stag: 30 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: Based on this resource, we learn embeddings that predict one word from another related word. 
		Cause: [(0, 2), (0, 3)]
		Effect: [(0, 5), (0, 15)]

	CASE: 8
	Stag: 30 31 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Based on this resource, we learn embeddings that predict one word from another related word. We define u'\ud835' u'\udc11' as a set of relations between two words w and w u'\u2032' u'\ud835' u'\udc11' can contain typed relations (e.g.,, w is related to w u'\u2032' through a specific type of semantic relation), and relations can have associated scores indicating their strength. 
		Cause: [(1, 13), (1, 66)]
		Effect: [(0, 0), (1, 11)]

	CASE: 9
	Stag: 37 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: For our semantic relations e w u'\u2032' and e w are symmetrical, so we use a single embedding. 
		Cause: [(0, 0), (0, 15)]
		Effect: [(0, 18), (0, 22)]

	CASE: 10
	Stag: 40 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: The cbow and RCM objectives use separate data for learning. 
		Cause: [(0, 9), (0, 9)]
		Effect: [(0, 0), (0, 7)]

	CASE: 11
	Stag: 41 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: While RCM learns embeddings suited to specific tasks based on knowledge resources, cbow learns embeddings for words not included in the resource but appear in a corpus. 
		Cause: [(0, 10), (0, 11)]
		Effect: [(0, 13), (0, 27)]

	CASE: 12
	Stag: 43 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: Based on our initial experiments, RCM uses the output embeddings of cbow. 
		Cause: [(0, 2), (0, 4)]
		Effect: [(0, 6), (0, 12)]

	CASE: 13
	Stag: 54 55 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: For each objective (cbow or RCM), we sample 15 words as negative samples for each training instance according to their frequencies in raw texts (i.e., training data of cbow. Suppose w has frequency u u'\u2062' ( w ) , then the probability of sampling w is p u'\u2062' ( w ) u'\u221d' u u'\u2062' ( w ) 3 / 4. 
		Cause: [(0, 14), (1, 17)]
		Effect: [(0, 0), (0, 12)]

	CASE: 14
	Stag: 56 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: We use distributed training, where shared embeddings are updated by each thread based on training data within the thread, i.e.,, asynchronous stochastic gradient ascent. 
		Cause: [(0, 15), (0, 19)]
		Effect: [(0, 21), (0, 27)]

	CASE: 15
	Stag: 59 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: We found this an effective method for balancing the two objectives. 
		Cause: [(0, 7), (0, 10)]
		Effect: [(0, 0), (0, 5)]

	CASE: 16
	Stag: 64 65 
		Pattern: 0 [[['enable', 'enables', 'enabled']]]---- [['&C', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['&NP@R@', '&TODO@R@']]
		sentTXT: The resulting trained model is then used to initialize the RCM model. This enables the RCM model to benefit from the unlabeled data, but refine the embeddings constrained by the given relations. 
		Cause: [(0, 0), (0, 11)]
		Effect: [(1, 2), (1, 20)]

	CASE: 17
	Stag: 67 68 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: While the joint model balances between fitting the text and learning relations, modeling the text at the expense of the relations may negatively impact the final embeddings for tasks that use the embeddings outside of the context of word2vec. Therefore, we use the embeddings from a trained joint model to pre-train an RCM model. 
		Cause: [(0, 0), (0, 39)]
		Effect: [(1, 2), (1, 15)]

Section 3:  3 Evaluation has 6 CE cases
	CASE: 1
	Stag: 73 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: We consider two resources for training the RCM term the Paraphrase Database (PPDB) [] and WordNet []. 
		Cause: [(0, 5), (0, 20)]
		Effect: [(0, 0), (0, 3)]

	CASE: 2
	Stag: 75 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since we use both resources for evaluation, we divide each into train, dev and test. 
		Cause: [(0, 1), (0, 6)]
		Effect: [(0, 8), (0, 16)]

	CASE: 3
	Stag: 78 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: Next, we removed duplicate pairs if A,B occurred in PPDB, we removed relations of B,A. 
		Cause: [(0, 7), (0, 20)]
		Effect: [(0, 0), (0, 5)]

	CASE: 4
	Stag: 80 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: Division into these sets is based on an automatically derived accuracy metric. 
		Cause: [(0, 7), (0, 11)]
		Effect: [(0, 0), (0, 3)]

	CASE: 5
	Stag: 83 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: Training was based on one of the other sets minus relations from S. 
		Cause: [(0, 4), (0, 12)]
		Effect: [(0, 0), (0, 0)]

	CASE: 6
	Stag: 89 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: However we did not use the training data because it is too small to affect the results. 
		Cause: [(0, 9), (0, 16)]
		Effect: [(0, 0), (0, 7)]

Section 4:  4 Experiments has 14 CE cases
	CASE: 1
	Stag: 97 98 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: We initially created WordNet training data, but found it too small to affect results. Therefore, we include only RCM results trained on PPDB, but show evaluations on both PPDB and WordNet. 
		Cause: [(0, 0), (0, 14)]
		Effect: [(1, 2), (1, 18)]

	CASE: 2
	Stag: 99 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: We trained 200-dimensional embeddings and used output embeddings for measuring similarity. 
		Cause: [(0, 9), (0, 10)]
		Effect: [(0, 0), (0, 7)]

	CASE: 3
	Stag: 103 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Measuring perplexity means computing the exact probability of each word, which requires summation over all words in the vocabulary in the denominator of the softmax. 
		Cause: [(0, 0), (0, 1)]
		Effect: [(0, 2), (0, 11)]

	CASE: 4
	Stag: 103 104 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Measuring perplexity means computing the exact probability of each word, which requires summation over all words in the vocabulary in the denominator of the softmax. Therefore, we also trained the language models with hierarchical classification [] strategy (HS. 
		Cause: [(0, 0), (0, 25)]
		Effect: [(1, 2), (1, 15)]

	CASE: 5
	Stag: 106 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: While word2vec and joint are trained as language models, RCM is not. 
		Cause: [(0, 7), (0, 12)]
		Effect: [(0, 1), (0, 5)]

	CASE: 6
	Stag: 107 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: In fact, RCM does not even observe all the words that appear in the training set, so it makes little sense to use the RCM embeddings directly for language modeling. 
		Cause: [(0, 0), (0, 16)]
		Effect: [(0, 19), (0, 31)]

	CASE: 7
	Stag: 107 108 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: In fact, RCM does not even observe all the words that appear in the training set, so it makes little sense to use the RCM embeddings directly for language modeling. Therefore, in order to make fair comparison, for every set of trained embeddings, we fix them as input embedding for word2vec, then learn the remaining input embeddings (words not in the relations) and all the output embeddings using cbow. 
		Cause: [(0, 0), (0, 31)]
		Effect: [(1, 2), (1, 44)]

	CASE: 8
	Stag: 109 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since this involves running cbow on NYT data for 2 iterations (one iteration for word2vec-training/pre-training/joint-modeling and the other for tuning the language model), we use Joint-r (random initialization) for a fair comparison. 
		Cause: [(0, 1), (0, 24)]
		Effect: [(0, 26), (0, 36)]

	CASE: 9
	Stag: 115 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Even when our goal is to strictly model the raw text corpus, we obtain improvements by injecting semantic information into the objective. 
		Cause: [(0, 17), (0, 22)]
		Effect: [(0, 0), (0, 15)]

	CASE: 10
	Stag: 130 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: We assign a score using the dot product between the output embeddings of each word in the pair, then order all 868 pairs according to this score. 
		Cause: [(0, 26), (0, 27)]
		Effect: [(0, 0), (0, 23)]

	CASE: 11
	Stag: 131 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Using the human judgements, we compute the swapped pairs rate the ratio between the number of swapped pairs and the number of all pairs. 
		Cause: [(0, 0), (0, 3)]
		Effect: [(0, 5), (0, 24)]

	CASE: 12
	Stag: 139 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: While we see improvements from XL to XXL (5 times as many relations), we get worse results on XXXL, likely because this set contains the lowest quality relations in PPDB. 
		Cause: [(0, 25), (0, 33)]
		Effect: [(0, 0), (0, 23)]

	CASE: 13
	Stag: 139 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: While we see improvements from XL to XXL (5 times as many relations), we get worse results on XXXL, likely because this set contains the lowest quality relations in PPDB. 
		Cause: [(0, 12), (0, 22)]
		Effect: [(0, 1), (0, 10)]

	CASE: 14
	Stag: 141 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: The baseline word2vec and the joint model have nearly the same averaged running times (2,577s and 2,644s respectively), since they have same number of threads for the CBOW objective and the joint model uses additional threads for the RCM objective. 
		Cause: [(0, 24), (0, 44)]
		Effect: [(0, 17), (0, 21)]

Section 5:  5 Conclusion has 3 CE cases
	CASE: 1
	Stag: 145 
		Pattern: 0 [[['lead', 'leads', 'led'], 'to']]---- [['&V-ing/&NP@C@', '(&CAN/have/has/had)'], ['&NP@R@', '(&Clause@R@)']]
		sentTXT: We demonstrated that the Relation Constrained Model can lead to better semantic embeddings by incorporating resources like PPDB, leading to better language modeling, semantic similarity metrics, and predicting human semantic judgements. 
		Cause: [(0, 3), (0, 6)]
		Effect: [(0, 10), (0, 33)]

	CASE: 2
	Stag: 146 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: Our implementation is based on the word2vec package and we made it available for general use 2 2 https://github.com/Gorov/JointRCM. 
		Cause: [(0, 5), (0, 18)]
		Effect: [(0, 0), (0, 1)]

	CASE: 3
	Stag: 149 
		Pattern: 2 [[[',', '.', ';', 'and']], ['accordingly']]---- [['&C'], ['&R']]
		sentTXT: Additionally, we see opportunities for jointly learning embeddings across many tasks with many resources, and plan to extend our model accordingly. 
		Cause: [(0, 0), (0, 15)]
		Effect: [(0, 17), (0, 21)]

#-------------------------------------------------

