Current File: P14-1131.xhtml_2 P14-1131.xhtml

Section 0:  Abstract
	SentNum: 4
	CENum: 1
	SentCovered: 1
	Covered_Rate: 25.0000%

Section 1:  1 Introduction
	SentNum: 20
	CENum: 8
	SentCovered: 9
	Covered_Rate: 45.0000%

Section 2:  2 Related Work
	SentNum: 55
	CENum: 13
	SentCovered: 14
	Covered_Rate: 25.4545%

Section 3:  3 CoSimRank
	SentNum: 50
	CENum: 14
	SentCovered: 19
	Covered_Rate: 38.0000%

Section 4:  4 Comparison to SimRank
	SentNum: 38
	CENum: 10
	SentCovered: 12
	Covered_Rate: 31.5789%

Section 5:  5 Extensions
	SentNum: 41
	CENum: 4
	SentCovered: 6
	Covered_Rate: 14.6341%

Section 6:  6 Experiments
	SentNum: 100
	CENum: 29
	SentCovered: 30
	Covered_Rate: 30.0000%

Section 7:  7 Summary
	SentNum: 4
	CENum: 1
	SentCovered: 2
	Covered_Rate: 50.0000%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-1131.xhtml_2's CE cases

Section 0:  Abstract has 1 CE cases
	CASE: 1
	Stag: 0 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: We present CoSimRank , a graph-theoretic similarity measure that is efficient because it can compute a single node similarity without having to compute the similarities of the entire graph. 
		Cause: [(0, 12), (0, 28)]
		Effect: [(0, 0), (0, 10)]

Section 1:  1 Introduction has 8 CE cases
	CASE: 1
	Stag: 5 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: These algorithms are often based on PageRank [ 2 ] and other centrality measures (e.g.,, [ 7 ]. 
		Cause: [(0, 6), (0, 20)]
		Effect: [(0, 0), (0, 1)]

	CASE: 2
	Stag: 7 8 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: SimRank is based on the simple intuition that nodes in a graph should be considered as similar to the extent that their neighbors are similar. Unfortunately, SimRank has time complexity u'\ud835' u'\udcaa' u'\u2062' ( n 3 ) (where n is the number of nodes in the graph) and therefore does not scale to the large graphs that are typical of NLP. 
		Cause: [(0, 16), (1, 49)]
		Effect: [(0, 0), (0, 14)]

	CASE: 3
	Stag: 8 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Unfortunately, SimRank has time complexity u'\ud835' u'\udcaa' u'\u2062' ( n 3 ) (where n is the number of nodes in the graph) and therefore does not scale to the large graphs that are typical of NLP. 
		Cause: [(0, 0), (0, 36)]
		Effect: [(0, 39), (0, 50)]

	CASE: 4
	Stag: 10 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Our key observation is that to compute the similarity of two nodes, we need not consider all other nodes in the graph as SimRank does; instead, CoSimRank starts random walks from the two nodes and computes their similarity at each time step. 
		Cause: [(0, 24), (0, 26)]
		Effect: [(0, 0), (0, 22)]

	CASE: 5
	Stag: 11 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: This offers large savings in computation time if we only need the similarities of a small subset of all n 2 node similarities. 
		Cause: [(0, 8), (0, 22)]
		Effect: [(0, 0), (0, 6)]

	CASE: 6
	Stag: 13 14 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: CoSimRank can be used to compute many variations of basic node similarity u'\u2013' including similarity for graphs with weighted and typed edges and similarity for sets of nodes. Thus, CoSimRank has the added advantage of being a flexible tool for different types of applications. 
		Cause: [(0, 0), (0, 31)]
		Effect: [(1, 1), (1, 16)]

	CASE: 7
	Stag: 15 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: The extension of CoSimRank to similarity across graphs is important for the application of bilingual lexicon extraction given a set of correspondences between nodes in two graphs A and B (corresponding to two different languages), a pair of nodes ( a u'\u2208' A , b u'\u2208' B ) is a good candidate for a translation pair if their node similarity is high. 
		Cause: [(0, 68), (0, 72)]
		Effect: [(0, 0), (0, 66)]

	CASE: 8
	Stag: 21 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: By providing some useful extensions, we demonstrate the great flexibility of CoSimRank (Section 5. 
		Cause: [(0, 1), (0, 4)]
		Effect: [(0, 5), (0, 15)]

Section 2:  2 Related Work has 13 CE cases
	CASE: 1
	Stag: 24 25 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Our work is unsupervised. We therefore do not review graph-based methods that make extensive use of supervised learning (e.g.,, de Melo and Weikum ( 2012 ). 
		Cause: [(0, 1), (1, 0)]
		Effect: [(1, 2), (1, 24)]

	CASE: 2
	Stag: 25 26 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: We therefore do not review graph-based methods that make extensive use of supervised learning (e.g.,, de Melo and Weikum ( 2012 ). Since the original version of SimRank [ 15 ] has complexity u'\ud835' u'\udcaa' u'\u2062' ( n 4 ) , many extensions have been proposed to speed up its calculation. 
		Cause: [(1, 1), (1, 30)]
		Effect: [(0, 0), (0, 24)]

	CASE: 3
	Stag: 38 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: The algorithm we propose below is an order of magnitude faster in such applications because it is based on a local formulation of the similarity measure. 
		Cause: [(0, 15), (0, 25)]
		Effect: [(0, 0), (0, 13)]

	CASE: 4
	Stag: 38 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: The algorithm we propose below is an order of magnitude faster in such applications because it is based on a local formulation of the similarity measure. 
		Cause: [(0, 4), (0, 10)]
		Effect: [(0, 0), (0, 0)]

	CASE: 5
	Stag: 42 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: 2006 ) introduce a similarity measure that is also based on the idea that nodes are similar when their neighbors are, but that is designed for bipartite graphs. 
		Cause: [(0, 11), (0, 20)]
		Effect: [(0, 22), (0, 28)]

	CASE: 6
	Stag: 45 46 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We will refer to this measure as PPR+cos. Hughes and Ramage ( 2007 ) find that PPR+cos has high correlation with human similarity judgments on WordNet-based graphs. 
		Cause: [(0, 7), (1, 19)]
		Effect: [(0, 0), (0, 5)]

	CASE: 7
	Stag: 49 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: Like CoSimRank, PPR+cos is efficient when computing single node pair similarities; we therefore use it as one of our baselines below. 
		Cause: [(0, 1), (0, 15)]
		Effect: [(0, 17), (0, 24)]

	CASE: 8
	Stag: 57 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: PPR+cos performed best except for a new similarity measure based on commute time. 
		Cause: [(0, 13), (0, 14)]
		Effect: [(0, 0), (0, 10)]

	CASE: 9
	Stag: 58 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: We do not compare against this new measure as it uses the graph Laplacian and so cannot be computed for a single node pair. 
		Cause: [(0, 0), (0, 13)]
		Effect: [(0, 16), (0, 24)]

	CASE: 10
	Stag: 58 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We do not compare against this new measure as it uses the graph Laplacian and so cannot be computed for a single node pair. 
		Cause: [(0, 9), (0, 13)]
		Effect: [(0, 0), (0, 7)]

	CASE: 11
	Stag: 58 59 
		Pattern: 1 [['reason'], [['that', 'because']]]---- [['&R', '(,/./;/--)', '&ONE', '(&ADJ)'], ['(for &THIS (&NP))', '&BE'], ['&C']]
		sentTXT: We do not compare against this new measure as it uses the graph Laplacian and so cannot be computed for a single node pair. One reason CoSimRank is efficient is that we need only compute a few iterations of the random walk. 
		Cause: [(1, 7), (1, 17)]
		Effect: [(0, 0), (0, 24)]

	CASE: 12
	Stag: 68 69 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We use their Multi-Edge Extraction (MEE) algorithm as one of our baselines below. A similar graph of dependency structures was built by Minkov and Cohen ( 2008. 
		Cause: [(0, 10), (1, 12)]
		Effect: [(0, 0), (0, 8)]

	CASE: 13
	Stag: 78 
		Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
		sentTXT: The novelty is that we compute similarity for vectors that are induced using a new algorithm, so that the similarity measurement is much more efficient when an application only needs a fraction of all u'\ud835' u'\udcaa' u'\u2062' ( n 2 ) pairwise similarities. 
		Cause: [(0, 0), (0, 16)]
		Effect: [(0, 19), (0, 55)]

Section 3:  3 CoSimRank has 14 CE cases
	CASE: 1
	Stag: 79 80 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We first first give an intuitive introduction of CoSimRank as a Personalized PageRank (PPR) derivative. Later on, we will give a matrix formulation to compare CoSimRank with SimRank. 
		Cause: [(0, 10), (1, 12)]
		Effect: [(0, 0), (0, 8)]

	CASE: 2
	Stag: 81 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: Haveliwala ( 2002 ) introduced Personalized PageRank u'\u2013' or topic-sensitive PageRank u'\u2013' based on the idea that the uniform damping vector p ( 0 ) can be replaced by a personalized vector, which depends on node i. 
		Cause: [(0, 22), (0, 39)]
		Effect: [(0, 41), (0, 45)]

	CASE: 3
	Stag: 91 92 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Note that the personalization vector p ( 0 ) was eliminated, but is still present as the starting vector of the iteration. Let p u'\u2062' ( i ) be the PPR vector of node i. 
		Cause: [(0, 17), (1, 16)]
		Effect: [(0, 2), (0, 15)]

	CASE: 4
	Stag: 93 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: The cosine of two vectors u and v is computed by dividing the inner product u'\u27e8' u , v u'\u27e9' by the lengths of the vectors. 
		Cause: [(0, 11), (0, 33)]
		Effect: [(0, 0), (0, 9)]

	CASE: 5
	Stag: 94 95 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The cosine of two PPR vectors can be used as a similarity measure for the corresponding nodes [ 12 , 1 ]. This measure s u'\u2062' ( i , j ) looks at the probability that a random walker is on a certain edge after an unlimited number of steps. 
		Cause: [(0, 10), (1, 30)]
		Effect: [(0, 0), (0, 8)]

	CASE: 6
	Stag: 96 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: This is potentially problematic as the example in Figure 1 shows. 
		Cause: [(0, 5), (0, 10)]
		Effect: [(0, 0), (0, 3)]

	CASE: 7
	Stag: 98 99 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: However, the PPR vector of law will also have a non-zero weight for tailor. So law and dress are similar because of the node tailor. 
		Cause: [(0, 0), (0, 14)]
		Effect: [(1, 1), (1, 10)]

	CASE: 8
	Stag: 101 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We can prevent this type of spurious similarity by taking into account the path the random surfer took to get to a particular node. 
		Cause: [(0, 9), (0, 23)]
		Effect: [(0, 0), (0, 7)]

	CASE: 9
	Stag: 102 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We formalize this by defining CoSimRank s u'\u2062' ( i , j ) as follows. 
		Cause: [(0, 4), (0, 18)]
		Effect: [(0, 0), (0, 2)]

	CASE: 10
	Stag: 107 
		Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
		sentTXT: We add a damping factor c , so that early meetings are more valuable than later meetings. 
		Cause: [(0, 0), (0, 6)]
		Effect: [(0, 9), (0, 16)]

	CASE: 11
	Stag: 111 
		Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
		sentTXT: Since our vectors are probability vectors, we have. 
		Cause: [(0, 1), (0, 5)]
		Effect: [(0, 7), (0, 8)]

	CASE: 12
	Stag: 118 119 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We will see in Section 5 that this formulation is the basis for a very efficient version of CoSimRank. As the PPR vectors have only positive values, we can easily see in Eq. 
		Cause: [(1, 1), (1, 14)]
		Effect: [(0, 0), (0, 18)]

	CASE: 13
	Stag: 125 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: We also know from elementary functional analysis that the 1-norm is the biggest of all p-norms and so one has u'\u2225' p ( k ) u'\u2225' u'\u2264' 1. 
		Cause: [(0, 0), (0, 15)]
		Effect: [(0, 18), (0, 39)]

	CASE: 14
	Stag: 128 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If an upper bound of 1 is desired for s u'\u2062' ( i , j ) (instead of 1 / ( 1 - c ) ), then we can use s u'\u2032'. 
		Cause: [(0, 1), (0, 16)]
		Effect: [(0, 18), (0, 37)]

Section 4:  4 Comparison to SimRank has 10 CE cases
	CASE: 1
	Stag: 142 143 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Whereas SimRank sets each of these entries back to one at each iteration, CoSimRank adds one. Thus, when computing the two similarity measures iteratively, the diagonal element ( i , i ) will be set to 1 by both methods for those initial iterations for which this entry is 0 for c u'\u2062' A u'\u2062' S ( k - 1 ) u'\u2062' A T (i.e.,, before applying either max or add. 
		Cause: [(0, 0), (0, 16)]
		Effect: [(1, 1), (1, 71)]

	CASE: 2
	Stag: 148 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: 8 ) have time complexity u'\ud835' u'\udcaa' u'\u2062' ( n 3 ) or u'\u2013' if we want to take the higher efficiency of computation for sparse graphs into account u'\u2013' u'\ud835' u'\udcaa' u'\u2062' ( d u'\u2062' n 2 ) where n is the number of nodes and d the average degree. 
		Cause: [(0, 31), (0, 86)]
		Effect: [(0, 0), (0, 29)]

	CASE: 3
	Stag: 155 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If d k , then the time complexity of CoSimRank is u'\ud835' u'\udcaa' u'\u2062' ( k 2 u'\u2062' n. 
		Cause: [(0, 1), (0, 2)]
		Effect: [(0, 5), (0, 34)]

	CASE: 4
	Stag: 156 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If we only compute a single similarity, then the complexity is u'\ud835' u'\udcaa' u'\u2062' ( d u'\u2062' n. 
		Cause: [(0, 1), (0, 6)]
		Effect: [(0, 9), (0, 34)]

	CASE: 5
	Stag: 158 159 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: It is not obvious how to design a lower-complexity version of SimRank for this case. Thus, we have reduced SimRank u'\u2019' s cubic time complexity to a quadratic time complexity for CoSimRank or u'\u2013' assuming that the average degree d does not depend on n u'\u2013' SimRank u'\u2019' s quadratic time complexity to linear time complexity for the case of computing few similarities. 
		Cause: [(0, 0), (0, 14)]
		Effect: [(1, 1), (1, 64)]

	CASE: 6
	Stag: 160 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: Space complexity for computing k 2 similarities is u'\ud835' u'\udcaa' u'\u2062' ( k u'\u2062' n ) since we need only store k vectors, not the complete similarity matrix. 
		Cause: [(0, 33), (0, 44)]
		Effect: [(0, 1), (0, 31)]

	CASE: 7
	Stag: 162 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: If the matrix formulation cannot be used because the u'\ud835' u'\udcaa' u'\u2062' ( n 2 ) similarity matrix is too big for available memory, then we can compute all similarities in batches u'\u2013' and if desired in parallel u'\u2013' whose size is chosen such that the vectors of each batch still fit in memory. 
		Cause: [(0, 9), (0, 35)]
		Effect: [(0, 38), (0, 74)]

	CASE: 8
	Stag: 163 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: In summary, CoSimRank and SimRank have similar space and time complexities for computing all n 2 similarities. 
		Cause: [(0, 13), (0, 17)]
		Effect: [(0, 0), (0, 11)]

	CASE: 9
	Stag: 164 165 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: For the more typical case that we only want to compute a fraction of all similarities, we have recast the global SimRank formulation as a local CoSimRank formulation. As a result, time and space complexities are much improved. 
		Cause: [(0, 25), (1, 9)]
		Effect: [(0, 0), (0, 23)]

	CASE: 10
	Stag: 164 165 
		Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
		sentTXT: For the more typical case that we only want to compute a fraction of all similarities, we have recast the global SimRank formulation as a local CoSimRank formulation. As a result, time and space complexities are much improved. 
		Cause: [(0, 0), (0, 28)]
		Effect: [(1, 4), (1, 10)]

Section 5:  5 Extensions has 4 CE cases
	CASE: 1
	Stag: 167 168 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: We will show now that the basic CoSimRank algorithm can be extended in a number of ways and is thus a flexible tool for different NLP applications. The use of weighted edges was first proposed in the PageRank patent. 
		Cause: [(0, 0), (0, 18)]
		Effect: [(0, 20), (1, 10)]

	CASE: 2
	Stag: 169 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: It is straightforward and easy to implement by replacing the row normalized adjacency matrix A with an arbitrary stochastic matrix P. 
		Cause: [(0, 8), (0, 20)]
		Effect: [(0, 0), (0, 6)]

	CASE: 3
	Stag: 190 191 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We can interpret S ( 0 ) as a change of basis. A similar approach for word embeddings was published by Mikolov et al. 
		Cause: [(0, 8), (1, 10)]
		Effect: [(0, 0), (0, 6)]

	CASE: 4
	Stag: 201 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We are not including this method in our experiments, but we will give the equation here, as traditional document similarity measures (e.g.,, cosine similarity) perform poorly on this task although there also are known alternatives with good results [ 30 ]. 
		Cause: [(0, 19), (0, 46)]
		Effect: [(0, 4), (0, 16)]

Section 6:  6 Experiments has 29 CE cases
	CASE: 1
	Stag: 212 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Our motivation for this application is that two words that are synonyms of each other should have similar lexical neighbors and that two words that are translations of each other should have neighbors that correspond to each other; thus, in each case the nodes should be similar in the graph-theoretic sense and CoSimRank should be able to identify this similarity. 
		Cause: [(0, 0), (0, 37)]
		Effect: [(0, 40), (0, 61)]

	CASE: 2
	Stag: 218 219 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph. Consequently, we compare against the two main methods for this task in NLP. 
		Cause: [(0, 4), (1, 12)]
		Effect: [(0, 0), (0, 2)]

	CASE: 3
	Stag: 218 219 
		Pattern: 9 [['consequently']]---- [['&C', '(,/;/./--)'], ['(,)', '&R']]
		sentTXT: We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph. Consequently, we compare against the two main methods for this task in NLP. 
		Cause: [(0, 0), (0, 15)]
		Effect: [(1, 2), (1, 13)]

	CASE: 4
	Stag: 223 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: Apart from SimRank, extensions of PageRank are the main methods for computing the similarity of nodes in graphs in NLP (e.g.,, Hughes and Ramage ( 2007 ) , Agirre et al. 
		Cause: [(0, 12), (0, 34)]
		Effect: [(0, 0), (0, 10)]

	CASE: 5
	Stag: 229 230 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We use TS68 , a test set of 68 synonym pairs published by Minkov and Cohen ( 2012 ) for evaluation. This gold standard lists a single word as the correct synonym even if there are several equally acceptable near-synonyms (see Table 3 for examples. 
		Cause: [(1, 8), (1, 22)]
		Effect: [(0, 0), (1, 6)]

	CASE: 6
	Stag: 233 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: If all three of them agreed on one word as being a synonym in at least one meaning, we added this as a correct answer to the test set. 
		Cause: [(0, 10), (0, 29)]
		Effect: [(0, 1), (0, 8)]

	CASE: 7
	Stag: 233 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: If all three of them agreed on one word as being a synonym in at least one meaning, we added this as a correct answer to the test set. 
		Cause: [(0, 0), (0, 7)]
		Effect: [(0, 9), (0, 19)]

	CASE: 8
	Stag: 242 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: CoSimRank is better than PPR+cos on both evaluations, but as this test set is very small, the results are not significant. 
		Cause: [(0, 13), (0, 24)]
		Effect: [(0, 0), (0, 11)]

	CASE: 9
	Stag: 246 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: MRR is equivalent to MAP as reported by Minkov and Cohen ( 2012 ) when there is only one correct answer.) Their best number (0.59) is better than our one-synonym result; however, they performed manual postprocessing of results u'\u2013' e.g.,, discarding words that are morphologically or semantically related to other words in the list u'\u2013' so our fully automatic results cannot be directly compared. 
		Cause: [(0, 0), (0, 70)]
		Effect: [(0, 72), (0, 80)]

	CASE: 10
	Stag: 246 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: MRR is equivalent to MAP as reported by Minkov and Cohen ( 2012 ) when there is only one correct answer.) Their best number (0.59) is better than our one-synonym result; however, they performed manual postprocessing of results u'\u2013' e.g.,, discarding words that are morphologically or semantically related to other words in the list u'\u2013' so our fully automatic results cannot be directly compared. 
		Cause: [(0, 6), (0, 22)]
		Effect: [(0, 0), (0, 4)]

	CASE: 11
	Stag: 248 249 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: For lexicon extraction, we use the same parameters as in the synonym extraction task for all four similarity measures. We use a seed dictionary of 12,630 word pairs to establish node-node correspondences between the two graphs. 
		Cause: [(0, 10), (1, 15)]
		Effect: [(0, 0), (0, 8)]

	CASE: 12
	Stag: 250 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: We remove a search keyword from the seed dictionary before calculating similarities for it, something that the architecture of CoSimRank makes easy because we can use a different seed dictionary S ( 0 ) for every keyword. 
		Cause: [(0, 24), (0, 37)]
		Effect: [(0, 0), (0, 22)]

	CASE: 13
	Stag: 259 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: This is also true for CoSimRank, but it seems that CoSimRank is more stable because we compare more than one vector. 
		Cause: [(0, 16), (0, 21)]
		Effect: [(0, 0), (0, 14)]

	CASE: 14
	Stag: 262 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: We tried a number of different ways of modifying it for weighted graphs i) running the random walks with the weighted adjacency matrix as Markov matrix, (ii) storing the weight (product of each edge weight) of a random walk and using it as a factor if two walks meet and (iii) a combination of both. 
		Cause: [(0, 52), (0, 55)]
		Effect: [(0, 0), (0, 50)]

	CASE: 15
	Stag: 264 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: As a result, the computational time was approximately 30 minutes per test word, so this method is even slower than SimRank for our application. 
		Cause: [(0, 0), (0, 13)]
		Effect: [(0, 16), (0, 25)]

	CASE: 16
	Stag: 269 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The actual wall clock time was significantly lower as we used up to 64 CPUs. 
		Cause: [(0, 9), (0, 14)]
		Effect: [(0, 0), (0, 7)]

	CASE: 17
	Stag: 271 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: SimRank is at a disadvantage because it computes all similarities in the graph regardless of the size of the test set; it is particularly inefficient on synonym extraction because the English graph contains a large number of edges (see Table 1. 
		Cause: [(0, 6), (0, 42)]
		Effect: [(0, 0), (0, 4)]

	CASE: 18
	Stag: 271 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: SimRank is at a disadvantage because it computes all similarities in the graph regardless of the size of the test set; it is particularly inefficient on synonym extraction because the English graph contains a large number of edges (see Table 1. 
		Cause: [(0, 24), (0, 36)]
		Effect: [(0, 0), (0, 22)]

	CASE: 19
	Stag: 277 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: This effect is only visible on the larger test set (lexicon extraction) because the general computation overhead is about the same on a smaller test set. 
		Cause: [(0, 15), (0, 27)]
		Effect: [(0, 0), (0, 13)]

	CASE: 20
	Stag: 278 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: Here we address inducing a bilingual lexicon from a seed set based on grammatical relations found by a parser. 
		Cause: [(0, 13), (0, 18)]
		Effect: [(0, 0), (0, 10)]

	CASE: 21
	Stag: 286 
		Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
		sentTXT: Most of the 226 missing word pairs are adverbs, prepositions and plural forms that are not covered by our graphs due to the construction algorithm we use lemmatization, restriction to adjectives, nouns and verbs etc. 
		Cause: [(0, 23), (0, 37)]
		Effect: [(0, 0), (0, 20)]

	CASE: 22
	Stag: 288 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: 4 4 We achieved better results for CoSimRank by optimizing the damping factor, but in this paper, we only present results for a fixed damping factor of 0.8. 
		Cause: [(0, 9), (0, 12)]
		Effect: [(0, 13), (0, 29)]

	CASE: 23
	Stag: 290 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: The results on TS774 can be considered conservative since only one translation is accepted as being correct. 
		Cause: [(0, 9), (0, 16)]
		Effect: [(0, 0), (0, 7)]

	CASE: 24
	Stag: 293 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Additionally, TS774 was created by translating English words into German (using Google translate. 
		Cause: [(0, 6), (0, 14)]
		Effect: [(0, 0), (0, 4)]

	CASE: 25
	Stag: 294 295 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: We are now testing the reverse direction. So we are doomed to fail if the original English word is a less common translation of an ambiguous German word. 
		Cause: [(0, 0), (0, 6)]
		Effect: [(1, 1), (1, 20)]

	CASE: 26
	Stag: 296 297 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: For example, the English word gulf was translated by Google to Golf , but the most common sense of Golf is the sport. Hence our algorithm will incorrectly translate it back to golf. 
		Cause: [(0, 0), (0, 23)]
		Effect: [(1, 1), (1, 8)]

	CASE: 27
	Stag: 297 298 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Hence our algorithm will incorrectly translate it back to golf. As we can see in Table 7 , we also face the problems discussed by Laws et al. 
		Cause: [(1, 1), (1, 17)]
		Effect: [(0, 2), (0, 9)]

	CASE: 28
	Stag: 299 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: 2010 the algorithm sometimes picks cohyponyms (which can still be seen as reasonable) and antonyms (which are clear errors. 
		Cause: [(0, 13), (0, 18)]
		Effect: [(0, 0), (0, 11)]

	CASE: 29
	Stag: 301 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Looking at Table 1 , we see that there is only one edge type connecting adjectives. 
		Cause: [(0, 0), (0, 3)]
		Effect: [(0, 5), (0, 15)]

Section 7:  7 Summary has 1 CE cases
	CASE: 1
	Stag: 310 311 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: We also presented extensions of CoSimRank for a number of applications, thus demonstrating the flexibility of CoSimRank as a similarity measure. We showed that CoSimRank is superior to SimRank in time and space complexity; and we demonstrated that CoSimRank performs better than PPR+cos on two similarity computation tasks. 
		Cause: [(0, 0), (0, 10)]
		Effect: [(0, 13), (1, 28)]

#-------------------------------------------------

