Current File: P14-2010.xhtml_2 P14-2010.xhtml

Section 0:  Abstract
	SentNum: 4
	CENum: 1
	SentCovered: 1
	Covered_Rate: 25.0000%

Section 1:  1 Introduction
	SentNum: 25
	CENum: 9
	SentCovered: 12
	Covered_Rate: 48.0000%

Section 2:  2 Related Work
	SentNum: 17
	CENum: 4
	SentCovered: 5
	Covered_Rate: 29.4118%

Section 3:  3 Background
	SentNum: 28
	CENum: 2
	SentCovered: 2
	Covered_Rate: 7.1429%

Section 4:  4 Topic Sprinkling in LDA
	SentNum: 17
	CENum: 6
	SentCovered: 7
	Covered_Rate: 41.1765%

Section 5:  5 Experimental Evaluation
	SentNum: 48
	CENum: 9
	SentCovered: 12
	Covered_Rate: 25.0000%

Section 6:  6 Conclusions and Future Work
	SentNum: 9
	CENum: 1
	SentCovered: 1
	Covered_Rate: 11.1111%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-2010.xhtml_2's CE cases

Section 0:  Abstract has 1 CE cases
	CASE: 1
	Stag: 2 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: We then use this weak supervision to u'\u201c' sprinkle u'\u201d' artificial words to the training documents to identify topics in accordance with the underlying class structure of the corpus based on the higher order word associations. 
		Cause: [(0, 39), (0, 43)]
		Effect: [(0, 0), (0, 36)]

Section 1:  1 Introduction has 9 CE cases
	CASE: 1
	Stag: 7 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: In this paper, we propose a text classification algorithm based on Latent Dirichlet Allocation (LDA) [] which does not need labeled documents. 
		Cause: [(0, 12), (0, 25)]
		Effect: [(0, 0), (0, 9)]

	CASE: 2
	Stag: 10 11 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: [] used LDA topics as features in text classification, but they use labeled documents while learning a classifier sLDA [] , DiscLDA [] and MedLDA [] are few extensions of LDA which model both class labels and words in the documents. These models can be used for text classification, but they need expensive labeled documents. 
		Cause: [(0, 6), (1, 13)]
		Effect: [(0, 0), (0, 4)]

	CASE: 3
	Stag: 13 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: In this approach, a topic model on a given set of unlabeled training documents is constructed using LDA, then an annotator assigns a class label to some topics based on their most probable words. 
		Cause: [(0, 32), (0, 35)]
		Effect: [(0, 0), (0, 29)]

	CASE: 4
	Stag: 16 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We extend ClassifyLDA algorithm by u'\u201c' sprinkling u'\u201d' topics to unlabeled documents. 
		Cause: [(0, 5), (0, 19)]
		Effect: [(0, 0), (0, 3)]

	CASE: 5
	Stag: 18 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The basic idea involves encoding of class labels as artificial words which are u'\u201c' sprinkled u'\u201d' (appended) to training documents. 
		Cause: [(0, 9), (0, 29)]
		Effect: [(0, 0), (0, 7)]

	CASE: 6
	Stag: 18 19 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The basic idea involves encoding of class labels as artificial words which are u'\u201c' sprinkled u'\u201d' (appended) to training documents. As LSI uses higher order word associations [] , sprinkling of artificial words gives better and class-enriched latent semantic structure. 
		Cause: [(1, 1), (1, 20)]
		Effect: [(0, 0), (0, 29)]

	CASE: 7
	Stag: 20 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: However, Sprinkled LSI is a supervised technique and hence it requires expensive labeled documents. 
		Cause: [(0, 1), (0, 7)]
		Effect: [(0, 10), (0, 14)]

	CASE: 8
	Stag: 21 22 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The paper revolves around the idea of labeling topics (which are far fewer in number compared to documents) as in ClassifyLDA, and using these labeled topic for sprinkling. As in ClassifyLDA, we ask an annotator to assign class labels to a set of topics inferred on the unlabeled training documents. 
		Cause: [(1, 1), (1, 22)]
		Effect: [(0, 0), (0, 30)]

	CASE: 9
	Stag: 26 27 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We then infer a set of topics on the sprinkled training documents. As LDA uses higher order word associations [] while discovering topics, we hypothesize that sprinkling will improve text classification performance of ClassifyLDA. 
		Cause: [(1, 1), (1, 23)]
		Effect: [(0, 0), (0, 11)]

Section 2:  2 Related Work has 4 CE cases
	CASE: 1
	Stag: 36 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: An important limitation of these algorithms is coming up with a small set of words that should be presented to the annotators for labeling. 
		Cause: [(0, 23), (0, 23)]
		Effect: [(0, 0), (0, 21)]

	CASE: 2
	Stag: 38 
		Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
		sentTXT: The third type of semi-supervised text classification algorithms is based on active learning. 
		Cause: [(0, 11), (0, 12)]
		Effect: [(0, 0), (0, 7)]

	CASE: 3
	Stag: 43 44 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: These topics are very few, when compared to the number of documents. As the most probable words of topics are representative of the dataset, there is no need for the annotator to search for the right set of features for each class. 
		Cause: [(1, 1), (1, 30)]
		Effect: [(0, 0), (0, 12)]

	CASE: 4
	Stag: 44 45 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: As the most probable words of topics are representative of the dataset, there is no need for the annotator to search for the right set of features for each class. As LDA topics are semantically more meaningful than individual words and can be acquired easily, our approach overcomes limitations of the semi-supervised methods discussed above. 
		Cause: [(1, 1), (1, 25)]
		Effect: [(0, 0), (0, 30)]

Section 3:  3 Background has 2 CE cases
	CASE: 1
	Stag: 70 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If a document d belongs to the class c1 then a set of artificial words which represent the class c1 are appended into the document d, otherwise a set of artificial words which represent the class c2 are appended. 
		Cause: [(0, 1), (0, 8)]
		Effect: [(0, 10), (0, 38)]

	CASE: 2
	Stag: 71 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Singular Value Decomposition (SVD) is then performed on the sprinkled training documents and a lower rank approximation is constructed by ignoring dimensions corresponding to lower singular values. 
		Cause: [(0, 22), (0, 28)]
		Effect: [(0, 0), (0, 20)]

Section 4:  4 Topic Sprinkling in LDA has 6 CE cases
	CASE: 1
	Stag: 75 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: We then ask a human annotator to assign one or more class labels to the topics based on their most probable words. 
		Cause: [(0, 18), (0, 21)]
		Effect: [(0, 0), (0, 15)]

	CASE: 2
	Stag: 77 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If the topic assigned to the word w at the position n in document d is t, then we replace it by the class label assigned to the topic t. 
		Cause: [(0, 1), (0, 16)]
		Effect: [(0, 18), (0, 29)]

	CASE: 3
	Stag: 78 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If more than one class labels are assigned to the topic t, then we randomly select one of the class labels assigned to the topic t. 
		Cause: [(0, 1), (0, 11)]
		Effect: [(0, 14), (0, 26)]

	CASE: 4
	Stag: 79 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If the annotator is unable to label a topic then we randomly select a class label from the set of all class labels. 
		Cause: [(0, 1), (0, 8)]
		Effect: [(0, 10), (0, 22)]

	CASE: 5
	Stag: 87 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If a word in a document is a sprinkled word then while sampling a class label for it, we sample the class label associated with the sprinkled word, otherwise we sample a class label for the word using Gibbs update in Equation 1. 
		Cause: [(0, 1), (0, 17)]
		Effect: [(0, 19), (0, 44)]

	CASE: 6
	Stag: 88 89 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We name this model as Topic Sprinkled LDA (TS-LDA. While classifying a test document, its probability distribution over class labels is inferred using TS-LDA model and it is classified to its most probable class label. 
		Cause: [(0, 5), (1, 25)]
		Effect: [(0, 0), (0, 3)]

Section 5:  5 Experimental Evaluation has 9 CE cases
	CASE: 1
	Stag: 92 93 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We evaluate and compare our text classification algorithm by computing Macro averaged F1. As the inference of LDA is approximate, we repeat all the experiments for each dataset ten times and report average MacroF1. 
		Cause: [(1, 1), (1, 21)]
		Effect: [(0, 0), (0, 12)]

	CASE: 2
	Stag: 110 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We randomly split SRAA dataset such that 80% is used as training data and remaining is used as test data. 
		Cause: [(0, 12), (0, 19)]
		Effect: [(0, 0), (0, 10)]

	CASE: 3
	Stag: 114 115 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The task is to classify the webpages as student, course, faculty or project. We randomly split this dataset such that 80% is used as training and 20% is used as test data. 
		Cause: [(0, 8), (1, 19)]
		Effect: [(0, 0), (0, 6)]

	CASE: 4
	Stag: 115 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: We randomly split this dataset such that 80% is used as training and 20% is used as test data. 
		Cause: [(0, 12), (0, 20)]
		Effect: [(0, 0), (0, 10)]

	CASE: 5
	Stag: 116 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We preprocess these datasets by removing HTML tags and stop-words. 
		Cause: [(0, 5), (0, 9)]
		Effect: [(0, 0), (0, 3)]

	CASE: 6
	Stag: 127 128 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: We should note here that in TS-LDA, the annotator only labels a few topics and not a single document. Hence, our approach exerts a low cognitive load on the annotator, at the same time achieves text classification performance close to LDA-SVM which needs labeled documents. 
		Cause: [(0, 0), (0, 19)]
		Effect: [(1, 2), (1, 27)]

	CASE: 7
	Stag: 134 135 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: We can observe here that these two topics are more coherent than the topics in Table 3. Hence, we can say here that, in addition to text classification, sprinkling improves coherence of topics. 
		Cause: [(0, 0), (0, 16)]
		Effect: [(1, 2), (1, 18)]

	CASE: 8
	Stag: 137 
		Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
		sentTXT: If the annotator assigns a wrong class label to a topic representing multiple classes (e.g., first topic in Table 3), then it may affect the performance of the resulting classifier. 
		Cause: [(0, 1), (0, 22)]
		Effect: [(0, 25), (0, 33)]

	CASE: 9
	Stag: 138 
		Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: However, in our approach the annotator can assign multiple class labels to a topic, hence our approach is more flexible for the annotator to encode her domain knowledge efficiently. 
		Cause: [(0, 0), (0, 14)]
		Effect: [(0, 17), (0, 28)]

Section 6:  6 Conclusions and Future Work has 1 CE cases
	CASE: 1
	Stag: 139 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: In this paper we propose a novel algorithm that classifies documents based on class labels over few topics. 
		Cause: [(0, 13), (0, 17)]
		Effect: [(0, 0), (0, 10)]

#-------------------------------------------------

