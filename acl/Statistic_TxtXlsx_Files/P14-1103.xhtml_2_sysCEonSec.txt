Current File: P14-1103.xhtml_2 P14-1103.xhtml

Section 0:  Abstract
	SentNum: 5
	CENum: 2
	SentCovered: 2
	Covered_Rate: 40.0000%

Section 1:  1 Introduction
	SentNum: 13
	CENum: 4
	SentCovered: 5
	Covered_Rate: 38.4615%

Section 2:  2 Phonology and Optimality Theory
	SentNum: 68
	CENum: 16
	SentCovered: 20
	Covered_Rate: 29.4118%

Section 3:  3 The IBPOT Model
	SentNum: 47
	CENum: 9
	SentCovered: 10
	Covered_Rate: 21.2766%

Section 4:  4 Experiment
	SentNum: 88
	CENum: 28
	SentCovered: 32
	Covered_Rate: 36.3636%

Section 5:  5 Discussion and Future Work
	SentNum: 29
	CENum: 5
	SentCovered: 7
	Covered_Rate: 24.1379%

Section 6:  6 Conclusion
	SentNum: 2
	CENum: 0
	SentCovered: 0
	Covered_Rate: 0.0000%

#-------------------------------------------------

####################### CE links on each Section #########################

P14-1103.xhtml_2's CE cases

Section 0:  Abstract has 2 CE cases
	CASE: 1
	Stag: 1 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: Specifically, we propose a non-parametric Bayesian model for learning phonological markedness constraints directly from the distribution of input-output mappings in an Optimality Theory (OT) setting. 
		Cause: [(0, 9), (0, 27)]
		Effect: [(0, 0), (0, 7)]

	CASE: 2
	Stag: 2 
		Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
		sentTXT: The model uses an Indian Buffet Process prior to learn the feature values used in the log-linear method, and is the first algorithm for learning phonological constraints without presupposing constraint structure. 
		Cause: [(0, 25), (0, 31)]
		Effect: [(0, 0), (0, 23)]

Section 1:  1 Introduction has 4 CE cases
	CASE: 1
	Stag: 5 6 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: Many aspects of human cognition involve the interaction of constraints that push a decision-maker toward different options, whether in something so trivial as choosing a movie or so important as a fight-or-flight response. These constraint-driven decisions can be modeled with a log-linear system. 
		Cause: [(0, 0), (0, 20)]
		Effect: [(0, 22), (1, 8)]

	CASE: 2
	Stag: 9 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: We consider this question by examining the dominant framework in modern phonology, Optimality Theory [, OT] , implemented in a log-linear framework, MaxEnt OT [] , with output forms u'\u2019' probabilities based on a weighted sum of constraint violations. 
		Cause: [(0, 42), (0, 47)]
		Effect: [(0, 0), (0, 39)]

	CASE: 3
	Stag: 11 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We propose a new approach to learn constraints with limited innate phonological knowledge by identifying sets of constraint violations that explain the observed distributional data, instead of selecting constraints from an innate set of constraint definitions. 
		Cause: [(0, 14), (0, 36)]
		Effect: [(0, 0), (0, 12)]

	CASE: 4
	Stag: 12 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: Because the constraints are identified as sets of violations, this also permits constraints specific to a given language to be learned. 
		Cause: [(0, 1), (0, 8)]
		Effect: [(0, 10), (0, 21)]

Section 2:  2 Phonology and Optimality Theory has 16 CE cases
	CASE: 1
	Stag: 23 24 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Previous OT work has focused on identifying the appropriate formulation of Eval and the values and acquisition of H , while taking Gen and Con as given. Here, we expand the learning task by proposing an acquisition method for Con. 
		Cause: [(0, 26), (1, 13)]
		Effect: [(0, 0), (0, 24)]

	CASE: 2
	Stag: 24 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Here, we expand the learning task by proposing an acquisition method for Con. 
		Cause: [(0, 8), (0, 13)]
		Effect: [(0, 0), (0, 6)]

	CASE: 3
	Stag: 28 
		Pattern: 0 [[['lead', 'leads', 'led'], 'to']]---- [['&V-ing/&NP@C@', '(&CAN/have/has/had)'], ['&NP@R@', '(&Clause@R@)']]
		sentTXT: Although all OT systems share the same core structure, different choices of Eval lead to different behaviors. 
		Cause: [(0, 10), (0, 13)]
		Effect: [(0, 16), (0, 17)]

	CASE: 4
	Stag: 33 34 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Weights are always negative in OT; a constraint violation can never make a candidate more likely to win.) For a given input-candidate pair ( x , y ) , f i u'\u2062' ( y , x ) is the number of violations of constraint C i by the pair. As a maximum entropy model, the probability of y given x is proportional to the exponential of the weighted sum of violations, u'\u2211' i w i u'\u2062' f i u'\u2062' ( y , x. 
		Cause: [(1, 1), (1, 46)]
		Effect: [(0, 23), (0, 55)]

	CASE: 5
	Stag: 35 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: If u'\ud835' u'\udcb4' u'\u2062' ( x ) is the set of all output candidates for the input x , then the probability of y as the winning output is. 
		Cause: [(0, 37), (0, 40)]
		Effect: [(0, 9), (0, 35)]

	CASE: 6
	Stag: 40 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If constraints u'\u2019' weights are close together, multiple violations of lower-weighted constraints can reduce a candidate u'\u2019' s probability below that of a competitor with a single high-weight violation. 
		Cause: [(0, 1), (0, 10)]
		Effect: [(0, 12), (0, 37)]

	CASE: 7
	Stag: 41 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: As the distance between weights in MEOT increases, the probability of a suboptimal candidate being chosen approaches zero; thus the traditional formulation is a limit case of MEOT. 
		Cause: [(0, 0), (0, 18)]
		Effect: [(0, 21), (0, 29)]

	CASE: 8
	Stag: 55 
		Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
		sentTXT: A white cell indicates no violation. 
		Cause: [(0, 0), (0, 2)]
		Effect: [(0, 4), (0, 5)]

	CASE: 9
	Stag: 56 
		Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
		sentTXT: Grey stripes are overlaid on cells whose value will have a negligible impact on the distribution due to the values of higher-ranked constraint. 
		Cause: [(0, 18), (0, 22)]
		Effect: [(0, 0), (0, 15)]

	CASE: 10
	Stag: 61 62 
		Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
		sentTXT: In the \textipa ete tableau at top left, output \textipa ete has no violations, and therefore a score of zero. Outputs \textipa Ete and \textipa etE violate both Harmony (weight 16) and Parse [atr] (weight 8), so their scores are 24. 
		Cause: [(0, 0), (0, 16)]
		Effect: [(0, 20), (1, 28)]

	CASE: 11
	Stag: 62 
		Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
		sentTXT: Outputs \textipa Ete and \textipa etE violate both Harmony (weight 16) and Parse [atr] (weight 8), so their scores are 24. 
		Cause: [(0, 0), (0, 23)]
		Effect: [(0, 26), (0, 29)]

	CASE: 12
	Stag: 63 64 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Output \textipa EtE violates Parse [atr], and has score 8. Thus the log-probability of output \textipa EtE is 1/8 that of \textipa ete, and the log-probability of disharmonious \textipa Ete and \textipa etE are each 1/24 that of \textipa ete. 
		Cause: [(0, 0), (0, 13)]
		Effect: [(1, 1), (1, 35)]

	CASE: 13
	Stag: 64 65 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Thus the log-probability of output \textipa EtE is 1/8 that of \textipa ete, and the log-probability of disharmonious \textipa Ete and \textipa etE are each 1/24 that of \textipa ete. As the ratio between scores increases, the log-probability ratios can become arbitrarily close to zero, approximating the deterministic situation of traditional OT. 
		Cause: [(1, 1), (1, 23)]
		Effect: [(0, 1), (0, 35)]

	CASE: 14
	Stag: 74 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: This version allows language-particular constraints, but it comes with a computational cost, as the learner must be able to generate and evaluate possible constraints while learning the language u'\u2019' s phonology. 
		Cause: [(0, 15), (0, 36)]
		Effect: [(0, 6), (0, 12)]

	CASE: 15
	Stag: 76 77 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Depending on the specific formulation of the constraints, the constraint identification problem may even be NP-hard []. Our approach of casting the learning problem as one of identifying violation profiles is an attempt to determine the amount that can be learned about the active constraints in a paradigm without hypothesizing intensional constraint definitions. 
		Cause: [(1, 8), (1, 35)]
		Effect: [(0, 1), (1, 6)]

	CASE: 16
	Stag: 84 85 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Even well-known constraint types, such as generalized alignment, can have disputed structures []. As such, it is unclear where a universal set of markedness constraints would come from. 
		Cause: [(1, 1), (1, 15)]
		Effect: [(0, 1), (0, 15)]

Section 3:  3 The IBPOT Model has 9 CE cases
	CASE: 1
	Stag: 86 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: The IBPOT model defines a generative process for mappings between input and output forms based on three latent variables the constraint violation matrices F (faithfulness) and M (markedness), and the weight vector w. 
		Cause: [(0, 16), (0, 37)]
		Effect: [(0, 0), (0, 13)]

	CASE: 2
	Stag: 89 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Note that M is shared across inputs, as M j u'\u2062' l has the same value for all input-output pairs with output y j. 
		Cause: [(0, 9), (0, 28)]
		Effect: [(0, 2), (0, 6)]

	CASE: 3
	Stag: 95 96 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: 2.4 , we assume that F is known as part of the output of Gen []. The goal of the IBPOT model is to learn the markedness matrix M and weights w for both the markedness and faithfulness constraints. 
		Cause: [(0, 9), (1, 21)]
		Effect: [(0, 0), (0, 7)]

	CASE: 4
	Stag: 96 97 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The goal of the IBPOT model is to learn the markedness matrix M and weights w for both the markedness and faithfulness constraints. As for M , we need a non-parametric prior, as there is no inherent limit to the number of markedness constraints a language will use. 
		Cause: [(1, 1), (1, 25)]
		Effect: [(0, 0), (0, 22)]

	CASE: 5
	Stag: 112 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: We begin by resampling M j u'\u2062' l for all represented constraints M u'\u22c5' l , conditioned on the rest of the violations ( M - ( j u'\u2062' l ) , F ) and the weights w. 
		Cause: [(0, 3), (0, 11)]
		Effect: [(0, 12), (0, 44)]

	CASE: 6
	Stag: 120 
		Pattern: 0 [[['concern', 'concerns', 'concerned', 'require', 'requires', 'required', 'request', 'requests', 'requested']]]---- [['&R', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['(about)', '&V-ing/&NP@C@']]
		sentTXT: Ideally, this would draw new constraints from the infinite feature matrix; however, this requires marginalizing the likelihood over possible weights, and we lack an appropriate conjugate prior for doing so. 
		Cause: [(0, 17), (0, 22)]
		Effect: [(0, 1), (0, 13)]

	CASE: 7
	Stag: 122 
		Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
		sentTXT: We consider in each sample at most K * new constraints, with weights based on the auxiliary vector w *. 
		Cause: [(0, 16), (0, 20)]
		Effect: [(0, 0), (0, 13)]

	CASE: 8
	Stag: 123 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: This approximation retains the unbounded feature set of the IBP, as repeated sampling can add more and more constraints without limit. 
		Cause: [(0, 12), (0, 21)]
		Effect: [(0, 0), (0, 9)]

	CASE: 9
	Stag: 125 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If the number of constraints removed is less than K * , w * is filled out with draws from the prior distribution over weights. 
		Cause: [(0, 1), (0, 10)]
		Effect: [(0, 12), (0, 24)]

Section 4:  4 Experiment has 28 CE cases
	CASE: 1
	Stag: 133 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We test the model by learning the markedness constraints driving Wolof vowel harmony []. 
		Cause: [(0, 5), (0, 14)]
		Effect: [(0, 0), (0, 3)]

	CASE: 2
	Stag: 134 
		Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
		sentTXT: Vowel harmony in general refers to a phonological phenomenon wherein the vowels of a word share certain features in the output form even if they do not share them in the input. 
		Cause: [(0, 24), (0, 31)]
		Effect: [(0, 0), (0, 22)]

	CASE: 3
	Stag: 149 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: Under this ranking, Wolof harmony is achieved by changing a disharmonious ATR to an RTR, unless this creates an \textipa I vowel. 
		Cause: [(0, 9), (0, 15)]
		Effect: [(0, 16), (0, 24)]

	CASE: 4
	Stag: 151 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: As in previous MEOT work, all Wolof candidates are faithful with respect to vowel height, either because height changes are not considered by Gen , or because of a high-ranked faithfulness constraint blocking height changes. 
		Cause: [(0, 19), (0, 25)]
		Effect: [(0, 27), (0, 36)]

	CASE: 5
	Stag: 153 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: If unfaithful vowel heights were allowed by Gen , these unfaithful candidates would incur a violation approximately as strong as * \textipa I , as neither unfaithful-height candidates nor \textipa I candidates are attested in the Wolof data. 
		Cause: [(0, 1), (0, 7)]
		Effect: [(0, 9), (0, 39)]

	CASE: 6
	Stag: 154 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: The Wolof constraints provide an interesting testing ground for the model, because it is a small set of constraints to be learned, but contains the Harmony constraint, which can be violated by non-adjacent segments. 
		Cause: [(0, 13), (0, 22)]
		Effect: [(0, 24), (0, 36)]

	CASE: 7
	Stag: 155 156 
		Pattern: 1 [['because', 'of']]---- [['&C', '(,/;/./--)', '(&ADV)'], ['(&THIS)', '&NP', '&R']]
		sentTXT: Non-adjacent constraints are difficult for string-based approaches because of the exponential number of possible relationships across non-adjacent segments. However, the Wolof results show that by learning violations directly, IBPOT does not encounter problems with non-adjacent constraints. 
		Cause: [(0, 0), (0, 6)]
		Effect: [(1, 0), (1, 19)]

	CASE: 8
	Stag: 156 
		Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
		sentTXT: However, the Wolof results show that by learning violations directly, IBPOT does not encounter problems with non-adjacent constraints. 
		Cause: [(0, 8), (0, 10)]
		Effect: [(0, 11), (0, 19)]

	CASE: 9
	Stag: 159 160 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The outputs appear for multiple inputs, as shown in Figure 1. The candidate outputs are the four combinations of tongue-roots for the given vowel heights; the inputs and candidates are known to the learner. 
		Cause: [(0, 8), (1, 14)]
		Effect: [(0, 0), (0, 5)]

	CASE: 10
	Stag: 161 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: We generate simulated data by observing 1000 instances of the winning output for each input. 
		Cause: [(0, 5), (0, 14)]
		Effect: [(0, 0), (0, 3)]

	CASE: 11
	Stag: 161 162 
		Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
		sentTXT: We generate simulated data by observing 1000 instances of the winning output for each input. 6 6 Since data, matrix, and weight likelihoods all shape the learned constraints, there must be enough data for the model to avoid settling for a simple matrix that poorly explains the data. 
		Cause: [(1, 3), (1, 34)]
		Effect: [(0, 1), (1, 1)]

	CASE: 12
	Stag: 167 
		Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
		sentTXT: This is necessary in the current model definition because the IBP produces a prior over binary matrices. 
		Cause: [(0, 9), (0, 16)]
		Effect: [(0, 0), (0, 7)]

	CASE: 13
	Stag: 177 
		Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
		sentTXT: This is done so that the IBPOT weights and phonological standard weights are learned by the same process and can be compared. 
		Cause: [(0, 0), (0, 2)]
		Effect: [(0, 5), (0, 21)]

	CASE: 14
	Stag: 178 179 
		Pattern: 4 [['result'], ['is']]---- [['&C', '(,/./;/--)', '&ONE', '(&adj)'], ['(of &THIS (&NP))'], ['&NP@R@', '(&Clause@R@)']]
		sentTXT: We use the same parameters for this baseline as for the IBPOT tests. The results in this section are based on nine runs each of IBPOT and MEOT; ten MEOT runs were performed but one failed to converge and was removed from analysis. 
		Cause: [(0, 0), (0, 12)]
		Effect: [(1, 4), (1, 30)]

	CASE: 15
	Stag: 187 
		Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
		sentTXT: All eight differences are significant according to t -tests over the nine runs. 
		Cause: [(0, 7), (0, 7)]
		Effect: [(0, 0), (0, 4)]

	CASE: 16
	Stag: 189 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The most important differences are those in the data probabilities, as the matrix and weight probabilities are reflective primarily of the choice of prior. 
		Cause: [(0, 12), (0, 24)]
		Effect: [(0, 0), (0, 9)]

	CASE: 17
	Stag: 196 
		Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
		sentTXT: Turning to the form of these constraints, Figure 2 shows violation profiles from the last iteration of a representative IBPOT run. 
		Cause: [(0, 0), (0, 6)]
		Effect: [(0, 8), (0, 21)]

	CASE: 18
	Stag: 198 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: Because vowel heights must be faithful between input and output, the Wolof data is divided into nine separate paradigms , each containing the four candidates (ATR/RTR × ATR/RTR) for the vowel heights in the input. 
		Cause: [(0, 1), (0, 9)]
		Effect: [(0, 11), (0, 36)]

	CASE: 19
	Stag: 199 200 
		Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
		sentTXT: The violations on a given output form only affect probabilities within its paradigm. As a result, learned constraints are consistent within paradigms, but across paradigms, the same constraint may serve different purposes. 
		Cause: [(0, 0), (0, 12)]
		Effect: [(1, 4), (1, 21)]

	CASE: 20
	Stag: 201 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: For instance, the strongest learned markedness constraint, shown as M1 in Figure 2 , has the same violations as the top-ranked constraint that actively distinguishes between candidates in each paradigm. 
		Cause: [(0, 11), (0, 31)]
		Effect: [(0, 1), (0, 9)]

	CASE: 21
	Stag: 204 205 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Instead, it learns that M1 has the same violations as Harmony , which is the highest-weighted constraint that distinguishes between candidates in these paradigms. Thus in the high-vowel paradigms, M1 serves as * \textipa I , while in the low/mid-vowel paradigms, it serves as Harmony. 
		Cause: [(0, 11), (1, 22)]
		Effect: [(0, 0), (0, 9)]

	CASE: 22
	Stag: 204 205 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: Instead, it learns that M1 has the same violations as Harmony , which is the highest-weighted constraint that distinguishes between candidates in these paradigms. Thus in the high-vowel paradigms, M1 serves as * \textipa I , while in the low/mid-vowel paradigms, it serves as Harmony. 
		Cause: [(0, 0), (0, 24)]
		Effect: [(1, 1), (1, 23)]

	CASE: 23
	Stag: 206 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The lower-weighted M2 is defined noisily, as the higher-ranked M1 makes some values of M2 inconsequential. 
		Cause: [(0, 8), (0, 16)]
		Effect: [(0, 0), (0, 5)]

	CASE: 24
	Stag: 208 
		Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
		sentTXT: Because M1 has a much higher weight than M2 , a violation of M2 has a negligible effect on a candidate u'\u2019' s probability. 
		Cause: [(0, 1), (0, 8)]
		Effect: [(0, 10), (0, 27)]

	CASE: 25
	Stag: 210 
		Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
		sentTXT: 2 , if the losing candidate violates M1 , its probability changes from 10 - 12 when the preferred candidate does not violate M2 to 10 - 8 when it does. 
		Cause: [(0, 3), (0, 7)]
		Effect: [(0, 9), (0, 30)]

	CASE: 26
	Stag: 215 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: On the non-high paradigms, the meaning of M2 is unclear, as Harmony is handled by M1 and * \textipa I is unviolated. 
		Cause: [(0, 13), (0, 18)]
		Effect: [(0, 0), (0, 10)]

	CASE: 27
	Stag: 216 217 
		Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
		sentTXT: In all four paradigms, the model learns that the RTR-RTR candidate violates M2 and the ATR-ATR candidate does not; this appears to be the model u'\u2019' s attempt to reinforce a pattern in the lowest-ranked faithfulness constraint ( Parse [atr]), which the ATR-ATR candidate never violates. Thus, while the IBPOT constraints are not identical to the phonologically standard ones, they reflect a version of the standard constraints that is consistent with the IBPOT framework. 
		Cause: [(0, 0), (0, 55)]
		Effect: [(1, 1), (1, 29)]

	CASE: 28
	Stag: 218 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: 9 9 In fact, it appears this constraint organization is favored by IBPOT as it allows for lower weights, hence the large difference in w log-probability in Table 1. 
		Cause: [(0, 15), (0, 30)]
		Effect: [(0, 0), (0, 13)]

Section 5:  5 Discussion and Future Work has 5 CE cases
	CASE: 1
	Stag: 223 224 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: The model u'\u2019' s ability to infer constraint violation profiles without theoretical constraint structure provides an alternative solution to the problems of the traditionally innate and universal OT constraint set. As it jointly learns constraints and weights, the IBPOT model calls to mind Hayes and Wilson u'\u2019' s [] joint phonotactic learner. 
		Cause: [(1, 1), (1, 21)]
		Effect: [(0, 0), (0, 33)]

	CASE: 2
	Stag: 226 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: This limits their learner in practice by the rapid explosion in the number of constraints as the maximum constraint definition size grows. 
		Cause: [(0, 16), (0, 21)]
		Effect: [(0, 0), (0, 14)]

	CASE: 3
	Stag: 232 
		Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
		sentTXT: IBPOT, as proposed here, learns constraints based on binary violation profiles, defined extensionally. 
		Cause: [(0, 10), (0, 12)]
		Effect: [(0, 14), (0, 15)]

	CASE: 4
	Stag: 242 
		Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
		sentTXT: Non-binarity can be handled by using the binary matrix M to indicate whether a candidate violates a constraint, with a second distribution determining the number of violations. 
		Cause: [(0, 5), (0, 27)]
		Effect: [(0, 0), (0, 3)]

	CASE: 5
	Stag: 243 244 
		Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
		sentTXT: Alternately, a binary matrix can directly capture non-binary constraints; converted existing non-binary constraints into a binary OT system by representing non-binary constraints as a set of equally-weighted overlapping constraints, each accounting for one violation. The non-binary harmony constraint, for instance, becomes a set {*(at least one disharmony), *(at least two disharmonies), etc.}. 
		Cause: [(0, 25), (1, 29)]
		Effect: [(0, 0), (0, 23)]

Section 6:  6 Conclusion has 0 CE cases
#-------------------------------------------------

