************************************************************
P14-1117.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 6 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: The compression task has received increasing attention in recent years , in part due to the availability of datasets such as the Ziff-Davis corpus -LSB- 24 -RSB- and the Edinburgh compression corpora -LSB- 5 -RSB- , from which the following example is drawn
	Cause: the availability of datasets such as the Ziff-Davis corpus -LSB- 24 -RSB- and the Edinburgh compression corpora -LSB- 5 -RSB-
	Effect: from which the following example is drawn

CASE: 1
Stag: 10 11 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In 1967 Chapman , who had cultivated a conventional image , stunned a party by coming out as a homosexual Following an assumption often used in compression systems , the compressed output in this corpus is constructed by dropping tokens from the input sentence without any paraphrasing or reordering
	Cause: a homosexual Following an assumption often used in compression systems , the compressed output in this corpus is constructed by dropping tokens from the input sentence without any paraphrasing or
	Effect: 1967 Chapman , who had cultivated a conventional image , stunned a party by coming out

CASE: 2
Stag: 11 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Following an assumption often used in compression systems , the compressed output in this corpus is constructed by dropping tokens from the input sentence without any paraphrasing or reordering
	Cause: dropping tokens from the input sentence without any paraphrasing or reordering
	Effect: an assumption often used in compression systems , the compressed output in this corpus is constructed

CASE: 3
Stag: 17 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In this work , we develop approximate inference strategies to the joint approach of Thadani and McKeown -LRB- 2013 -RRB- which trade the optimality guarantees of exact ILP for faster inference by separately solving the n-gram and dependency subproblems and using Lagrange multipliers to enforce consistency between their solutions
	Cause: separately solving the n-gram and dependency subproblems and using Lagrange multipliers to enforce consistency between their solutions
	Effect: In this work , we develop approximate inference strategies to the joint approach of Thadani and McKeown -LRB- 2013 -RRB- which trade the optimality guarantees of exact ILP for faster inference

CASE: 4
Stag: 19 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: Maximum spanning tree algorithms , commonly used in non-projective dependency parsing -LSB- 35 -RSB- , are not easily adaptable to this task since the maximum-weight subtree is not necessarily a part of the maximum spanning tree
	Cause: the maximum-weight subtree is not necessarily a part of the maximum spanning tree
	Effect: Maximum spanning tree algorithms , commonly used in non-projective dependency parsing -LSB- 35 -RSB- , are not easily adaptable to this task

CASE: 5
Stag: 19 20 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Maximum spanning tree algorithms , commonly used in non-projective dependency parsing -LSB- 35 -RSB- , are not easily adaptable to this task since the maximum-weight subtree is not necessarily a part of the maximum spanning tree We therefore consider methods to recover approximate solutions for the subproblem of finding the maximum weighted subtree in a graph , common among which is the use of a linear programming relaxation
	Cause: spanning tree algorithms , commonly used in non-projective dependency parsing -LSB- 35 -RSB- , are not easily adaptable to this task since the maximum-weight subtree is not necessarily a part of the maximum spanning tree We
	Effect: consider methods to recover approximate solutions for the subproblem of finding the maximum weighted subtree in a graph , common among which is the use of a linear programming relaxation

CASE: 6
Stag: 22 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In addition , we can recover approximate solutions to this problem by using the Chu-Liu Edmonds algorithm for recovering maximum spanning trees -LSB- 4 , 14 -RSB- over the relatively sparse subgraph defined by a solution to the relaxed LP
	Cause: using the Chu-Liu Edmonds algorithm for recovering maximum spanning trees -LSB- 4 , 14 -RSB- over the relatively sparse subgraph defined by a solution to the relaxed LP
	Effect: In addition , we can recover approximate solutions to this problem

CASE: 7
Stag: 26 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: Multiple approaches to generate good approximate solutions for joint multi-structure compression , based on Lagrangian relaxation to enforce equality between the sequential and syntactic inference subproblems
	Cause: Lagrangian relaxation to enforce equality between the sequential and syntactic inference subproblems
	Effect: Multiple approaches to generate good approximate solutions for joint multi-structure compression

CASE: 8
Stag: 28 29 
	Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
	sentTXT: Even though compression is typically formulated as a token deletion task , it is evident that dropping tokens independently from an input sentence will likely not result in fluent and meaningful compressive text Tokens in well-formed sentences participate in a number of syntactic and semantic relationships with other tokens , so one might expect that accounting for heterogenous structural relationships between tokens will improve the coherence of the output sentence
	Cause: Even though compression is typically formulated
	Effect: in fluent and meaningful compressive text Tokens in well-formed sentences participate in a number of syntactic and semantic relationships with other tokens , so one might expect that accounting for heterogenous structural relationships between tokens will improve the coherence of the output

CASE: 9
Stag: 29 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Tokens in well-formed sentences participate in a number of syntactic and semantic relationships with other tokens , so one might expect that accounting for heterogenous structural relationships between tokens will improve the coherence of the output sentence
	Cause: Tokens in well-formed sentences participate in a number of syntactic and semantic relationships with other tokens
	Effect: one might expect that accounting for heterogenous structural relationships between tokens will improve the coherence of the output sentence

CASE: 10
Stag: 30 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: Furthermore , much recent work has focused on the challenge of joint sentence extraction and compression , also known as compressive summarization -LSB- 34 , 2 , 1 , 30 , 41 -RSB- , in which questions of efficiency are paramount due to the larger problems involved ; however , these approaches largely restrict compression to pruning parse trees , thereby imposing a dependency on parser performance
	Cause: the larger problems involved
	Effect: ; however , these approaches largely restrict compression to pruning

CASE: 11
Stag: 34 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Following this , 2.3 discusses a dynamic program to find maximum weight bigram subsequences from the input sentence , while 2.4 covers LP relaxation-based approaches for approximating solutions to the problem of finding a maximum-weight subtree in a graph of potential output dependencies
	Cause: approximating solutions to the problem
	Effect: Following this , 2.3 discusses a dynamic program to find maximum weight bigram subsequences from the input sentence , while 2.4 covers LP relaxation-based approaches

CASE: 12
Stag: 40 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In addition , we define bigram indicator variables y i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- to represent whether a particular order-preserving bigram 2 2 Although Thadani and McKeown -LRB- 2013 -RRB- is not restricted to bigrams or order-preserving n-grams , we limit our discussion to this scenario as it also fits the assumptions of McDonald -LRB- 2006 -RRB- and the datasets of Clarke and Lapata -LRB- 2006 u ' \ u27e8 ' t i , t j u ' \ u27e9 ' from S is present as a contiguous bigram in C as well as dependency indicator variables z i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- corresponding to whether the dependency arc t i u ' \ u2192 ' t j is present in the dependency parse of C
	Cause: it also fits the assumptions of McDonald -LRB- 2006 -RRB- and the datasets of Clarke and Lapata -LRB- 2006 u ' \ u27e8 ' t i , t j u ' \ u27e9 ' from S is present as a contiguous bigram in C as well as dependency indicator variables z i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- corresponding to whether the dependency arc t i u ' \ u2192 ' t j is present in the dependency parse of C
	Effect: In addition , we define bigram indicator variables y i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- to represent whether a particular order-preserving bigram 2 2 Although Thadani and McKeown -LRB- 2013 -RRB- is not restricted to bigrams or order-preserving n-grams , we limit our discussion to this scenario

CASE: 13
Stag: 40 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: it also fits the assumptions of McDonald -LRB- 2006 -RRB- and the datasets of Clarke and Lapata -LRB- 2006 u ' \ u27e8 ' t i , t j u ' \ u27e9 ' from S is present as a contiguous bigram in C as well as dependency indicator variables z i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- corresponding to whether the dependency arc t i u ' \ u2192 ' t j is present in the dependency parse of C
	Cause: a contiguous bigram in C as well as dependency indicator variables z i u ' \ u2062 ' j u ' \ u2208 ' -LCB- 0 , 1 -RCB- corresponding to whether the dependency arc t i u ' \ u2192 ' t j is present in the dependency parse of
	Effect: it also fits the assumptions of McDonald -LRB- 2006 -RRB- and the datasets of Clarke and Lapata -LRB- 2006 u ' \ u27e8 ' t i , t j u ' \ u27e9 ' from S is present

CASE: 14
Stag: 46 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: In order to recover meaningful compressions by optimizing -LRB- 2 -RRB- , the inference step must ensure
	Cause: optimizing -LRB- 2 -RRB-
	Effect: , the inference step must ensure

CASE: 15
Stag: 55 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Dual decomposition -LSB- 26 -RSB- and Lagrangian relaxation in general are often used for solving joint inference problems which are decomposable into individual subproblems linked by equality constraints -LSB- 27 , 44 , 43 , 13 , 32 , 11 , 1 -RSB-
	Cause: solving joint inference problems which are decomposable into individual subproblems linked by equality constraints -LSB- 27 , 44 , 43 , 13 , 32 , 11 , 1 -RSB-
	Effect: Dual decomposition -LSB- 26 -RSB- and Lagrangian relaxation in general are often used

CASE: 16
Stag: 59 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: The multi-structure inference problem described in the previous section seems in many ways to be a natural fit to such an approach since output scores factor over different types of structure that comprise the output compression
	Cause: output scores factor over different types of structure that comprise the output
	Effect: The multi-structure inference problem described in the previous section seems in many ways to be a natural fit to such an approach

CASE: 17
Stag: 60 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Even if ILP-based approaches perform reasonably at the scale of single-sentence compression problems , the exponential worst-case complexity of general-purpose ILPs will inevitably pose challenges when scaling up to -LRB- a -RRB- handle larger inputs , -LRB- b -RRB- use higher-order structural fragments , or -LRB- c -RRB- incorporate additional models
	Cause: ILP-based approaches perform reasonably at the scale of single-sentence compression problems
	Effect: the exponential worst-case complexity of general-purpose ILPs will inevitably pose challenges when scaling up to -LRB- a -RRB- handle larger inputs , -LRB- b -RRB- use higher-order structural fragments , or -LRB- c -RRB- incorporate additional models

CASE: 18
Stag: 63 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We can now rewrite the objective in -LRB- 2 -RRB- while enforcing the constraint that the words contained in the sequence u ' \ ud835 ' u ' \ udc32 ' are the same as the words contained in the tree u ' \ ud835 ' u ' \ udc33 ' , i.e. , , u ' \ ud835 ' u ' \ udf36 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' -RRB- = u ' \ ud835 ' u ' \ udf37 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' -RRB- , by introducing a vector of Lagrange multipliers u ' \ ud835 ' u ' \ udf40 ' u ' \ u2208 ' u ' \ u211d ' n
	Cause: introducing a vector of Lagrange multipliers u ' \ ud835 ' u ' \ udf40 ' u ' \ u2208 ' u ' \ u211d '
	Effect: We can now rewrite the objective in -LRB- 2 -RRB- while enforcing the constraint that the words contained in the sequence u ' \ ud835 ' u ' \ udc32 ' are the same as the words contained in the tree u ' \ ud835 ' u ' \ udc33 ' , i.e. , , u ' \ ud835 ' u ' \ udf36 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' -RRB- = u ' \ ud835 ' u ' \ udf37 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' -RRB- ,

CASE: 19
Stag: 66 67 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Finding the u ' \ ud835 ' u ' \ udc32 ' and u ' \ ud835 ' u ' \ udc33 ' that maximize this Lagrangian above yields a dual objective , and the dual problem corresponding to the primal objective specified in -LRB- 2 -RRB- is therefore the minimization of this objective over the Lagrange multipliers u ' \ ud835 ' u ' \ udf40 ' This can now be solved with the iterative subgradient algorithm illustrated in Algorithm 2.2
	Cause: Finding the u ' \ ud835 ' u ' \ udc32 ' and u ' \ ud835 ' u ' \ udc33 ' that maximize this Lagrangian above yields a dual objective , and the dual problem corresponding to the primal objective specified in -LRB- 2 -RRB- is
	Effect: the minimization of this objective over the Lagrange multipliers u ' \ ud835 ' u ' \ udf40 ' This can now be solved with the iterative subgradient algorithm illustrated in Algorithm

CASE: 20
Stag: 68 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: In each iteration i , the algorithm solves for u ' \ ud835 ' u ' \ udc32 ' -LRB- i -RRB- and u ' \ ud835 ' u ' \ udc33 ' -LRB- i -RRB- under u ' \ ud835 ' u ' \ udf40 ' -LRB- i -RRB- , then generates u ' \ ud835 ' u ' \ udf40 ' -LRB- i + 1 -RRB- to penalize inconsistencies between u ' \ ud835 ' u ' \ udf36 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' -LRB- i -RRB- -RRB- and u ' \ ud835 ' u ' \ udf37 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' -LRB- i -RRB-
	Cause: u ' \ ud835 ' u ' \ udc32 ' -LRB- i -RRB- and u ' \ ud835 ' u ' \ udc33 ' -LRB- i -RRB- under u ' \ ud835 ' u ' \ udf40 ' -LRB- i -RRB- , then generates u ' \ ud835 ' u ' \ udf40 ' -LRB- i + 1 -RRB- to penalize inconsistencies between u ' \ ud835 ' u ' \ udf36 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' -LRB- i -RRB- -RRB- and u ' \ ud835 ' u ' \ udf37 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' -LRB- i -RRB-
	Effect: In each iteration i , the algorithm solves

CASE: 21
Stag: 70 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Otherwise , if the algorithm starts oscillating between a few primal solutions , the underlying LP must have a non-integral solution in which case approximation heuristics can be employed
	Cause: the algorithm starts oscillating between a few primal solutions
	Effect: the underlying LP must have a non-integral solution in which case approximation heuristics can be employed

CASE: 22
Stag: 79 80 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: where R is the required number of output tokens and the scoring function is defined as so as to solve f u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' , u ' \ ud835 ' u ' \ udf40 ' , u ' \ u03a8 ' , u ' \ ud835 ' u ' \ udf3d ' -RRB- from -LRB- 4
	Cause: where R is the required number of output tokens and the scoring function is defined as
	Effect: as to solve f u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' , u ' \ ud835 ' u ' \ udf40 ' , u ' \ u03a8 ' , u ' \ ud835 ' u ' \ udf3d ' -RRB- from -LRB- 4

CASE: 23
Stag: 80 81 
	Pattern: 0 [[['concern', 'concerns', 'concerned', 'require', 'requires', 'required', 'request', 'requests', 'requested']]]---- [['&R', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['(about)', '&V-ing/&NP@C@']]
	sentTXT: so as to solve f u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' , u ' \ ud835 ' u ' \ udf40 ' , u ' \ u03a8 ' , u ' \ ud835 ' u ' \ udf3d ' -RRB- from -LRB- 4 This approach requires O u ' \ u2062 ' -LRB- n 2 u ' \ u2062 ' R -RRB- time in order to identify the highest scoring sequence u ' \ ud835 ' u ' \ udc32 ' and corresponding token configuration u ' \ ud835 ' u ' \ udf36 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' -RRB-
	Cause: O u ' \ u2062 ' -LRB- n 2 u ' \ u2062 ' R -RRB- time in order
	Effect: so as to solve f u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc32 ' , u ' \ ud835 ' u ' \ udf40 ' , u ' \ u03a8 ' , u ' \ ud835 ' u ' \ udf3d ' -RRB- from -LRB- 4

CASE: 24
Stag: 94 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In order to produce a solution to this subproblem , we use an LP relaxation of the relevant portion of the ILP from Thadani and McKeown -LRB- 2013 -RRB- by omitting integer constraints over the token and dependency variables in u ' \ ud835 ' u ' \ udc31 ' and u ' \ ud835 ' u ' \ udc33 ' respectively
	Cause: omitting integer constraints over the token and dependency variables in u ' \ ud835 ' u ' \ udc31 ' and u ' \ ud835 ' u ' \ udc33 ' respectively
	Effect: In order to produce a solution to this subproblem , we use an LP relaxation of the relevant portion of the ILP from Thadani and McKeown -LRB- 2013 -RRB-

CASE: 25
Stag: 100 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: First , tokens in the solution must only be active if they have a single active incoming dependency edge
	Cause: they have a single active incoming dependency edge
	Effect: First , tokens in the solution must only be active

CASE: 26
Stag: 105 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: In addition , they serve to establish connectivity for the dependency structure u ' \ ud835 ' u ' \ udc33 ' since commodity can only originate in one location u ' \ u2014 ' at the pseudo-token root which has no incoming commodity variables
	Cause: commodity can only originate in one location u ' \ u2014 ' at the pseudo-token root which has no incoming commodity variables
	Effect: In addition , they serve to establish connectivity for the dependency structure u ' \ ud835 ' u ' \ udc33 '

CASE: 27
Stag: 125 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In the LP relaxation , x i and z i u ' \ u2062 ' j are redefined as real-valued variables in -LSB- 0 , 1 -RSB- , potentially resulting in fractional values for dependency and token indicators
	Cause: real-valued variables in -LSB- 0 , 1 -RSB- , potentially resulting in fractional values for dependency and token indicators
	Effect: the LP relaxation , x i and z i u ' \ u2062 ' j are redefined

CASE: 28
Stag: 125 126 
	Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
	sentTXT: In the LP relaxation , x i and z i u ' \ u2062 ' j are redefined as real-valued variables in -LSB- 0 , 1 -RSB- , potentially resulting in fractional values for dependency and token indicators As a result , the commodity flow network is able to establish connectivity but can not enforce a tree structure , for instance , directed acyclic structures are possible and token indicators x i may be partially be assigned to the solution structure
	Cause: and z i u ' \ u2062 ' j are redefined as real-valued variables in -LSB- 0 , 1 -RSB- , potentially resulting in fractional values for dependency and token indicators
	Effect: the commodity flow network is able to establish connectivity but can not enforce a tree structure , for instance , directed acyclic structures are possible and token indicators x i may be partially be assigned to the solution structure

CASE: 29
Stag: 130 
	Pattern: 7 [['due', 'to']]---- [['&V-ing/&NP@R@', '&BE'], ['&NP@C@', '(&Clause@C@)']]
	sentTXT: The viability of this approximation strategy is due to the following
	Cause: the following
	Effect: The viability of this approximation strategy

CASE: 30
Stag: 132 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: The bigram subproblem is guaranteed to return a well-formed integral solution which obeys the imposed compression rate , so we are assured of a source of valid u ' \ u2014 ' if non-optimal u ' \ u2014 ' solutions in line 13 of Algorithm 2.2
	Cause: The bigram subproblem is guaranteed to return a well-formed integral solution which obeys the imposed compression rate
	Effect: we are assured of a source of valid u ' \ u2014 ' if non-optimal u ' \ u2014 ' solutions in line 13 of Algorithm 2.2

CASE: 31
Stag: 135 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The addition of this constraint to the relaxed LP reduces the rate of integral solutions drastically u ' \ u2014 ' from 89 % to approximately 33 % u ' \ u2014 ' but it serves to ensure that the resulting token configuration u ' \ ud835 ' u ' \ udc31 ' ~ has at least as many non-zero elements as R , i.e. , , there are at least as many tokens activated in the LP solution as are required in a valid solution
	Cause: many non-zero elements as R , i.e. , , there are at least as many tokens activated in the LP solution as are required in a valid solution
	Effect: The addition of this constraint to the relaxed LP reduces the rate of integral solutions drastically u ' \ u2014 ' from 89 % to approximately 33 % u ' \ u2014 ' but it serves to ensure that the resulting token configuration u ' \ ud835 ' u ' \ udc31 ' ~ has at least

CASE: 32
Stag: 137 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Since the commodity flow constraints in -LRB- 9 -RRB- u ' \ u2013 ' -LRB- 11 -RRB- ensure a connected u ' \ ud835 ' u ' \ udc33 ' ~ , it is therefore possible to recover a maximum-weight spanning tree from G u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' ~ -RRB- using the Chu-Liu Edmonds algorithm -LSB- 4 , 14 -RSB-
	Cause: Since the commodity flow constraints in -LRB- 9 -RRB- u ' \ u2013 ' -LRB- 11 -RRB- ensure a connected u ' \ ud835 ' u ' \ udc33 ' ~ , it is
	Effect: possible to recover a maximum-weight spanning tree from G u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc33 ' ~ -RRB- using the Chu-Liu Edmonds algorithm -LSB- 4 , 14 -RSB-

CASE: 33
Stag: 137 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since the commodity flow constraints in -LRB- 9 -RRB- u ' \ u2013 ' -LRB- 11 -RRB- ensure a connected u ' \ ud835 ' u ' \ udc33 ' ~ , it is
	Cause: the commodity flow constraints in -LRB- 9 -RRB- u ' \ u2013 ' -LRB- 11 -RRB- ensure a connected u ' \ ud835 ' u ' \ udc33 ' ~
	Effect: it is

CASE: 34
Stag: 141 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: The resulting spanning tree is a useful integral approximation of u ' \ ud835 ' u ' \ udc33 ' ~ but , as mentioned previously , may contain more nodes than R due to fractional values in u ' \ ud835 ' u ' \ udc31 ' ~ ; we therefore repeatedly prune leaves with the lowest incoming edge weight in the current tree until exactly R nodes remain
	Cause: resulting spanning tree is a useful integral approximation of u ' \ ud835 ' u ' \ udc33 ' ~ but , as mentioned previously , may contain more nodes than R due to fractional values in u ' \ ud835 ' u ' \ udc31 ' ~ ; we
	Effect: repeatedly prune leaves with the lowest incoming edge weight in the current tree until exactly R nodes remain

CASE: 35
Stag: 141 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: resulting spanning tree is a useful integral approximation of u ' \ ud835 ' u ' \ udc33 ' ~ but , as mentioned previously , may contain more nodes than R due to fractional values in u ' \ ud835 ' u ' \ udc31 ' ~ ; we
	Cause: fractional values in u ' \ ud835 ' u
	Effect: resulting spanning tree is a useful integral approximation of u ' \ ud835 ' u ' \ udc33 ' ~ but , as mentioned previously , may contain more nodes than R

CASE: 36
Stag: 144 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: We identify this phenomenon by counting repeated solutions and , if they exceed some threshold l max with at least one repeated solution from either subproblem , we terminate the update procedure for Lagrange multipliers and instead attempt to identify a good solution from the repeating ones by scoring them under -LRB- 2
	Cause: they exceed some threshold l max with at least one repeated solution from either subproblem
	Effect: we terminate the update procedure for Lagrange multipliers and instead attempt to identify a good solution from the repeating ones by scoring them under -LRB- 2

CASE: 37
Stag: 144 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: we terminate the update procedure for Lagrange multipliers and instead attempt to identify a good solution from the repeating ones by scoring them under -LRB- 2
	Cause: scoring them under -LRB- 2
	Effect: we terminate the update procedure for Lagrange multipliers and instead attempt to identify a good solution from the repeating ones

CASE: 38
Stag: 147 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: The features used in this work are largely based on the features from Thadani and McKeown -LRB- 2013 -RRB-
	Cause: the features from Thadani and McKeown
	Effect: The features used in this work are largely

CASE: 39
Stag: 150 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: u ' \ u03a6 ' dep contains features for the probability of a dependency edge under a smoothed dependency grammar constructed from the Penn Treebank and various conjunctions of the following features a -RRB- whether the edge appears as a dependency or ancestral relation in the input parse -LRB- b -RRB- the directionality of the dependency -LRB- c -RRB- the label of the edge -LRB- d -RRB- the POS tags of the tokens incident to the edge and -LRB- e -RRB- the labels of their surrounding chunks and whether the edge remains within the chunk
	Cause: a dependency or ancestral relation in the input parse -LRB- b -RRB- the directionality of the dependency -LRB- c -RRB- the label of the edge -LRB- d -RRB- the POS tags of the tokens incident to the edge and -LRB- e -RRB- the labels of their surrounding chunks and whether the edge remains within the chunk
	Effect: u ' \ u03a6 ' dep contains features for the probability of a dependency edge under a smoothed dependency grammar constructed from the Penn Treebank and various conjunctions of the following features a -RRB- whether the edge appears

CASE: 40
Stag: 153 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Overfitting was avoided by averaging parameters and monitoring performance against a held-out development set during training
	Cause: averaging parameters and monitoring performance against a held-out development set during training
	Effect: Overfitting was avoided

CASE: 41
Stag: 159 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Gold dependency parses were approximated by running the Stanford dependency parser 7 7 http://nlp.stanford.edu/software/ over reference compressions
	Cause: running the Stanford dependency parser 7 7 http://nlp.stanford.edu/software/ over reference compressions
	Effect: Gold dependency parses were approximated

CASE: 42
Stag: 160 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Following evaluations in machine translation as well as previous work in sentence compression -LSB- 47 , 7 , 34 , 39 , 45 -RSB- , we evaluate system performance using F 1 metrics over n-grams and dependency edges produced by parsing system output with RASP -LSB- 3 -RSB- and the Stanford parser
	Cause: parsing system output with RASP -LSB- 3 -RSB- and the Stanford parser
	Effect: evaluations in machine translation as well as previous work in sentence compression -LSB- 47 , 7 , 34 , 39 , 45 -RSB- , we evaluate system performance using F 1 metrics over n-grams and dependency edges produced

CASE: 43
Stag: 170 171 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: An approximate inference approach based on an LP relaxation of ILP-Dep As discussed in 2.4 , a maximum spanning tree is recovered from the output of the LP and greedily pruned in order to generate a valid integral solution while observing the imposed compression rate
	Cause: discussed in 2.4 , a maximum spanning tree is recovered from the output of the LP and greedily pruned in order to generate a valid integral solution while observing the imposed compression rate
	Effect: An approximate inference approach based on an LP relaxation of ILP-Dep

CASE: 44
Stag: 180 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The learning rate schedule for the Lagrangian relaxation approaches was set as u ' \ u0397 ' i u ' \ u225c ' u ' \ u03a4 ' / -LRB- u ' \ u03a4 ' + i -RRB- , 10 10 u ' \ u03a4 ' was set to 100 for aggressive subgradient updates while the hyperparameter u ' \ u03a8 ' was tuned using the development split of each corpus
	Cause: u ' \ u0397 ' i u ' \ u225c ' u ' \ u03a4 ' / -LRB- u ' \ u03a4 ' + i -RRB- , 10 10 u ' \ u03a4 ' was set to 100 for aggressive subgradient updates while the hyperparameter u ' \ u03a8 ' was tuned using the development split of each corpus
	Effect: The learning rate schedule for the Lagrangian relaxation approaches was set

CASE: 45
Stag: 189 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Turning to the joint approaches , the strong performance of ILP-Joint is expected ; less so is the relatively high but yet practically reasonable runtime that it requires
	Cause: to the joint approaches , the strong performance of ILP-Joint is expected ; less
	Effect: is the relatively high but yet practically reasonable runtime that it requires

CASE: 46
Stag: 191 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: Comparing the two approximation strategies shows a clear performance advantage for DP+LP over DP+LP u ' \ u2192 ' MST the latter approach entails slower inference due to the overhead of running the Chu-Liu Edmonds algorithm at every dual update , and furthermore , the error introduced by approximating an integral solution results in a significant decrease in dependency recall
	Cause: the overhead of running the Chu-Liu Edmonds algorithm at every dual update
	Effect: and furthermore , the error introduced by approximating an integral solution results in a significant decrease in dependency recall

CASE: 47
Stag: 191 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: and furthermore , the error introduced by approximating an integral solution results in a significant decrease in dependency recall
	Cause: approximating an integral solution results in a significant decrease in dependency recall
	Effect: and furthermore , the error introduced

CASE: 48
Stag: 192 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: In contrast , DP+LP directly optimizes the dual problem by using the relaxed dependency solution to update Lagrange multipliers and achieves the best performance on parse-based F 1 outside of the slower ILP approaches
	Cause: using the relaxed dependency solution to update Lagrange multipliers
	Effect: and achieves the best performance on parse-based F 1 outside of the slower ILP approaches

CASE: 49
Stag: 198 
	Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: The variation in RASP F 1 % with input size indicates the viability of a hybrid approach which could balance accuracy and speed by using ILP-Joint for smaller problems and DP+LP for larger ones
	Cause: The variation in RASP F 1 % with input size
	Effect: the viability of a hybrid approach which could balance accuracy and speed by using ILP-Joint for smaller problems and DP+LP for larger ones

CASE: 50
Stag: 198 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: the viability of a hybrid approach which could balance accuracy and speed by using ILP-Joint for smaller problems and DP+LP for larger ones
	Cause: using ILP-Joint for smaller problems
	Effect: and DP+LP for larger ones

CASE: 51
Stag: 200 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: Most approaches to sentence compression are supervised -LSB- 25 , 42 , 46 , 36 , 47 , 18 , 40 , 9 , 17 , 19 , 38 , 15 -RSB- following the release of datasets such as the Ziff-Davis corpus -LSB- 24 -RSB- and the Edinburgh compression corpora -LSB- 5 , 7 -RSB- , although unsupervised approaches u ' \ u2014 ' largely based on ILPs u ' \ u2014 ' have also received consideration -LSB- 6 , 7 , 16 -RSB-
	Cause: ILPs u ' \ u2014 ' have also received consideration -LSB- 6
	Effect: 7 , 16 -RSB-

CASE: 52
Stag: 201 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Compression has also been used as a tool for document summarization -LSB- 12 , 49 , 6 , 34 , 2 , 48 , 1 , 37 , 30 , 41 -RSB- , with recent work formulating the summarization task as joint sentence extraction and compression and often employing ILP or Lagrangian relaxation
	Cause: a tool for document summarization -LSB- 12 , 49 , 6 , 34 , 2 , 48 , 1 , 37 , 30 , 41 -RSB- , with recent work formulating the summarization task as joint sentence extraction and compression and often employing ILP or Lagrangian
	Effect: Compression has also been used

CASE: 53
Stag: 203 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We have presented approximate inference strategies to jointly compress sentences under bigram and dependency-factored objectives by exploiting the modularity of the task and considering the two subproblems in isolation
	Cause: exploiting the modularity of the task and considering the two subproblems in isolation
	Effect: We have presented approximate inference strategies to jointly compress sentences under bigram and dependency-factored objectives

