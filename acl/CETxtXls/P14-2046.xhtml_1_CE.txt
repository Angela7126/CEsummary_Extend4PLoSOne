************************************************************
P14-2046.xhtml_1_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 3 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since the speaker may not be able to pronounce the foreign-language orthography, phrasebooks additionally provide phonetic spellings that approximate the sounds of the foreign phrase
	Cause: [(0, 1), (0, 11)]
	Effect: [(0, 13), (0, 25)]

CASE: 1
Stag: 7 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If the Franglish is well designed, an English speaker can pronounce it and be understood by a French listener
	Cause: [(0, 1), (0, 5)]
	Effect: [(0, 7), (0, 19)]

CASE: 2
Stag: 9 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If a Chinese speaker wants to say u'\u2018' u'\u2018' {CJK} UTF8gkai u'\u975e' u'\u5e38' u'\u611f' u'\u8c22' u'\u4f60' u'\u8fd9' u'\u987f' u'\u7f8e' u'\u9910' u'\u2019' u'\u2019' , she need only read off the Chinglish u'\u201c' {CJK} UTF8gkai u'\u4e09' u'\u53ef' u'\u6cb9' u'\u5426' u'\u70ed' u'\u65af' u'\u5f2f' u'\u5fb7' u'\u5426' u'\u7c73' u'\u6b27' u'\u201d' , which approximates the sounds of u'\u201c' Thank you for this wonderful meal u'\u201d' using Chinese characters
	Cause: [(0, 1), (0, 75)]
	Effect: [(0, 77), (0, 177)]

CASE: 3
Stag: 12 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In this paper, we lift this restriction by designing and evaluating a software program with the following
	Cause: [(0, 9), (0, 17)]
	Effect: [(0, 0), (0, 7)]

CASE: 4
Stag: 17 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: The main challenge is that different languages have different orthographies, different phoneme inventories, and different phonotactic constraints, so mismatches are inevitable
	Cause: [(0, 0), (0, 18)]
	Effect: [(0, 21), (0, 23)]

CASE: 5
Stag: 33 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We seek to imitate phonetic transformations found in phrasebooks, so phrasebooks themselves are a good source of training data
	Cause: [(0, 0), (0, 8)]
	Effect: [(0, 11), (0, 18)]

CASE: 6
Stag: 38 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: First, because Chinglish and Chinese are written with the same characters, they render the same inventory of 416 distinct syllables
	Cause: [(0, 3), (0, 11)]
	Effect: [(0, 13), (0, 21)]

CASE: 7
Stag: 40 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: Syllables u'\u2018' u'\u2018' si u'\u2019' u'\u2019' and u'\u2018' u'\u2018' te u'\u2019' u'\u2019' are very popular, because while consonant clusters like English u'\u2018' u'\u2018' st u'\u2019' u'\u2019' are impossible to reproduce exactly, the particular vowels in u'\u2018' u'\u2018' si u'\u2019' u'\u2019' and u'\u2018' u'\u2018' te u'\u2019' u'\u2019' are fortunately very weak
	Cause: [(0, 49), (0, 79)]
	Effect: [(0, 81), (0, 131)]

CASE: 8
Stag: 43 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: It is reasonable for u'\u2018' u'\u2018' can I u'\u2019' u'\u2019' to be rendered as u'\u2018' u'\u2018' kan nai u'\u2019' u'\u2019' , with u'\u2018' u'\u2018' nai u'\u2019' u'\u2019' spanning both English words, but this is rare
	Cause: [(0, 30), (0, 81)]
	Effect: [(0, 0), (0, 28)]

CASE: 9
Stag: 52 53 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: FSTs A, C, and D are unweighted, and remain so throughout this paper We must now estimate the values of FST B parameters, such as P( s i
	Cause: [(0, 0), (0, 11)]
	Effect: [(0, 13), (1, 15)]

CASE: 10
Stag: 55 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: To do this, we first take our phrasebook triples and construct sample string pairs Epron, Pinyin-split by pronouncing the phrasebook English with FST A, and by pronouncing the phrasebook Chinglish with FSTs D and C
	Cause: [(0, 19), (0, 25)]
	Effect: [(0, 26), (0, 27)]

CASE: 11
Stag: 58 59 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: For example, when we decode English u'\u2018' u'\u2018' grandmother u'\u2019' u'\u2019' , we get where as the reference Pinyin-split sequence is
	Cause: [(1, 2), (1, 6)]
	Effect: [(0, 1), (1, 0)]

CASE: 12
Stag: 61 
	Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
	sentTXT: Following phrase-based methods in statistical machine translation [ 4 ] and machine transliteration [ 1 ] , we model substitution of longer sequences
	Cause: [(0, 0), (0, 6)]
	Effect: [(0, 7), (0, 16)]

CASE: 13
Stag: 68 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We create English, Pinyin training pairs from our phrasebook simply by pronouncing the Chinglish with FST D
	Cause: [(0, 12), (0, 17)]
	Effect: [(0, 0), (0, 10)]

CASE: 14
Stag: 71 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: Notice that this model makes alignment errors due to sparser data (e.g.,, the word u'\u2018' u'\u2018' tips u'\u2019' u'\u2019' and u'\u2018' u'\u2018' ti pu si u'\u2019' u'\u2019' only appear once each in the training data
	Cause: [(0, 9), (0, 13)]
	Effect: [(0, 15), (0, 69)]

CASE: 15
Stag: 76 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: The word-based model can only decode 29 of the 65 test utterances, because wFST E fails if an utterance contains a new English word type, previously unseen in training
	Cause: [(0, 14), (0, 30)]
	Effect: [(0, 0), (0, 11)]

CASE: 16
Stag: 76 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: The word-based model can only decode 29 of the 65 test utterances, because wFST E fails if an utterance contains a new English word type, previously unseen in training
	Cause: [(0, 4), (0, 16)]
	Effect: [(0, 0), (0, 2)]

CASE: 17
Stag: 80 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: Here, we start with reference English and measure the accuracy of Pinyin syllable production, since the choice of Chinglish character does not affect the Chinglish pronunciation
	Cause: [(0, 17), (0, 27)]
	Effect: [(0, 0), (0, 14)]

CASE: 18
Stag: 83 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: As Table 6 shows, the ratio of unseen English word tokens is small, thus large portion of tokens are transformed using word-based method
	Cause: [(0, 0), (0, 13)]
	Effect: [(0, 16), (0, 24)]

CASE: 19
Stag: 91 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Speech recognition is more fragile than human transcription, so edit distances are greater
	Cause: [(0, 0), (0, 7)]
	Effect: [(0, 10), (0, 13)]

