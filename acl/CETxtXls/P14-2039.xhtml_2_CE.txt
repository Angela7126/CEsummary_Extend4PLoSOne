************************************************************
P14-2039.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 2 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: In this paper , we extend the state of the art fixed-window alignment algorithm -LSB- -RSB- for combining the individual captions into a final output sequence
	Cause: combining the individual captions into a final output sequence
	Effect: In this paper , we extend the state of the art fixed-window alignment algorithm -LSB- -RSB-

CASE: 1
Stag: 10 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The accuracy of the ASR systems can be improved using the u ' \ u2018 ' re-speaking u ' \ u2019 ' technique , which requires a person that the ASR has been trained on to repeat the words said by a speaker as he hears them
	Cause: he hears them
	Effect: The accuracy of the ASR systems can be improved using the u ' \ u2018 ' re-speaking u ' \ u2019 ' technique , which requires a person that the ASR has been trained on to repeat the words said by a speaker

CASE: 2
Stag: 31 32 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: For the caption alignment task , we treat each individual word as a symbol in our alphabet u ' \ u03a3 ' The special gap symbol u ' \ u2018 ' - u ' \ u2019 ' represents a missing word and does not belong to u ' \ u03a3 '
	Cause: a symbol in our alphabet u ' \ u03a3 ' The special gap symbol u ' \ u2018 ' - u ' \ u2019 ' represents a missing word and does not belong to u ' \ u03a3
	Effect: For the caption alignment task , we treat each individual word

CASE: 3
Stag: 33 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: Let A = -LRB- a i u ' \ u2062 ' j -RRB- be a K N f matrix , where a i u ' \ u2062 ' j u ' \ u2208 ' u ' \ u03a3 ' u ' \ u222a ' -LCB- - -RCB- , and the i t u ' \ u2062 ' h row has exactly -LRB- N f - N i -RRB- gaps and is identical to S i if we ignore the gaps
	Cause: we ignore the gaps
	Effect: ' j -RRB- be a K N f matrix , where a i u ' \ u2062 ' j u ' \ u2208 ' u ' \ u03a3 ' u ' \ u222a ' -LCB- - -RCB- , and the i t u ' \ u2062 ' h row has exactly -LRB- N f - N i -RRB- gaps and is identical to S i

CASE: 4
Stag: 34 35 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Every column of A must have at least one non-gap symbol Therefore , the j t u ' \ u2062 ' h column of A indicates an alignment state for the j t u ' \ u2062 ' h position , where the state can have one of the 2 K - 1 possible combinations
	Cause: Every column of A must have at least one non-gap symbol
	Effect: the j t u ' \ u2062 ' h column of A indicates an alignment state for the j t u ' \ u2062 ' h position , where the state can have one of the 2 K - 1 possible combinations

CASE: 5
Stag: 39 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If a i u ' \ u2062 ' l and a j u ' \ u2062 ' l are identical , the substitution cost is zero
	Cause: a i u ' \ u2062 ' l and a j u ' \ u2062 ' l are identical
	Effect: the substitution cost is zero

CASE: 6
Stag: 40 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: The substitution cost for two words is estimated based on the edit distance between two words
	Cause: the edit distance between two words
	Effect: The substitution cost for two words is estimated

CASE: 7
Stag: 42 
	Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
	sentTXT: Our approach is based on weighted A * search for approximately solving the MSA problem -LSB- -RSB-
	Cause: weighted A *
	Effect: Our approach

CASE: 8
Stag: 52 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The A * search algorithm treats each node position n = -LSB- n 1 , u ' \ u2026 ' , n K -RSB- as a search state , and estimates the cost function g u ' \ u2062 ' -LRB- n -RRB- and the heuristic function h u ' \ u2062 ' -LRB- n -RRB- for each state
	Cause: a search state , and estimates the cost function g u ' \ u2062 ' -LRB- n -RRB- and the heuristic function h u ' \ u2062 ' -LRB- n -RRB- for
	Effect: position n = -LSB- n 1 , u ' \ u2026 ' , n K -RSB-

CASE: 9
Stag: 61 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: If the beam size is set to b seconds , then any state that aligns two words having more than b seconds time lag is ignored
	Cause: the beam size is set to b seconds
	Effect: any state that aligns two words having more than b seconds time lag is ignored

CASE: 10
Stag: 64 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: We ignore the alignment columns where the majority vote is below a certain threshold t v -LRB- typically t v = 2 -RRB- , and thus filter out spurious errors and spelling mistakes
	Cause: We ignore the alignment columns where the majority vote is below a certain threshold t v -LRB- typically t v = 2 -RRB-
	Effect: filter out spurious errors and spelling mistakes

CASE: 11
Stag: 71 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: This is because the chunk boundaries are defined with respect to the timestamps associated with each word in the captions , but the timestamps can vary greatly between words that should in fact be aligned
	Cause: the chunk boundaries are defined with respect to the timestamps associated with each word in the captions
	Effect: but the timestamps can vary greatly between words that should in fact be aligned

CASE: 12
Stag: 72 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: After all , if the timestamps corresponded precisely to the original time at which each word was spoken , the entire alignment problem would be trivial
	Cause: the timestamps corresponded precisely to the original time at which each word was spoken
	Effect: the entire alignment problem would be trivial

CASE: 13
Stag: 73 
	Pattern: 0 [[['lead', 'leads', 'led'], 'to']]---- [['&V-ing/&NP@C@', '(&CAN/have/has/had)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: The fact that the various instances of a single word in each transcription may fall on either side of a chunk boundary leads to errors where a word is either duplicated in the final output for more than one chunk , or omitted entirely
	Cause: The fact that the various instances of a single word in each transcription may fall on either side of a chunk boundary
	Effect: errors where a word is either duplicated in the final output for more than one chunk , or omitted entirely

CASE: 14
Stag: 74 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: This problem also causes errors in ordering among the words remaining within one chunk , because there is less information available to constrain the ordering relations between transcriptions
	Cause: there is less information available to constrain the ordering relations between transcriptions
	Effect: This problem also causes errors in ordering among the words remaining within one chunk

CASE: 15
Stag: 75 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Second , the fixed window alignment algorithm requires longer chunks -LRB- u ' \ u2265 ' 10 seconds -RRB- to obtain reasonable accuracy , and thus introduces unsatisfactory latency
	Cause: Second , the fixed window alignment algorithm requires longer chunks -LRB- u ' \ u2265 ' 10 seconds -RRB- to obtain reasonable accuracy
	Effect: introduces unsatisfactory latency

CASE: 16
Stag: 76 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: In order to address the problems described above , we explore a technique based on a sliding alignment window , shown in Algorithm 3
	Cause: a sliding alignment window
	Effect: shown in Algorithm 3

CASE: 17
Stag: 79 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use a single point in the aligned output as the starting point for the next chunk , and determine the corresponding starting position within each original transcription
	Cause: the starting point for the next chunk , and determine the corresponding starting position within each original transcription
	Effect: We use a single point in the aligned output

CASE: 18
Stag: 81 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: The materials in the output alignment that follow this point is thrown away , and replaced with the output produced by aligning the next chunk starting from this point -LRB- line 8
	Cause: aligning the next chunk starting from this point -LRB- line 8
	Effect: The materials in the output alignment that follow this point is thrown away , and replaced with the output produced

CASE: 19
Stag: 90 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The chunk size directly determines the latency of the system to the end user , as alignment can not begin until an entire chunk is captured
	Cause: alignment can not begin until an entire chunk is captured
	Effect: The chunk size directly determines the latency of the system to the end user

CASE: 20
Stag: 105 106 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Furthermore , we can see that for smaller values of the chunk size parameter , increasing the keep-length makes the system less accurate As the chunk size parameter increases , the performance of sliding window systems with different values of keep-length parameter converges
	Cause: the chunk size parameter increases , the performance of sliding window systems with different values of keep-length parameter converges
	Effect: Furthermore , we can see that for smaller values of the chunk size parameter , increasing the keep-length makes the system less accurate

CASE: 21
Stag: 106 107 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: As the chunk size parameter increases , the performance of sliding window systems with different values of keep-length parameter converges Therefore , at larger chunk sizes , for which there are smaller number of boundaries , the keep-length parameter has lower impact
	Cause: As the chunk size parameter increases , the performance of sliding window systems with different values of keep-length parameter converges
	Effect: at larger chunk sizes , for which there are smaller number of boundaries , the keep-length parameter has lower impact

CASE: 22
Stag: 108 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Next , we show the trade-off between computation speed and accuracy in Figure 3 , as we fix the heuristic weight and vary the chunk size over the range -LSB- 5 , 10 , 15 , 20 , 30 -RSB- seconds
	Cause: we fix the heuristic weight and vary the chunk size over the range -LSB- 5 ,
	Effect: Next , we show the trade-off between computation speed and accuracy in Figure 3

CASE: 23
Stag: 109 110 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Larger chunks are more accurately aligned but require computation time that grows as N K in the chunk size N in the worst case Furthermore , smaller weights allow faster alignment , but provide lower accuracy
	Cause: N K in the chunk size N in the worst case Furthermore , smaller weights allow faster alignment , but provide lower
	Effect: Larger chunks are more accurately aligned but require computation time that grows

CASE: 24
Stag: 112 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: By effectively addressing the problem of alignment errors at chunk boundaries , our sliding window approach outperforms the existing fixed window based system -LSB- -RSB- in terms of word error rate , particularly when the chunk size is small , and thus achieves higher accuracy at lower latency
	Cause: By effectively addressing the problem of alignment errors at chunk boundaries , our sliding window approach outperforms the existing fixed window based system -LSB- -RSB- in terms of word error rate , particularly when the chunk size is small
	Effect: achieves higher accuracy at lower latency

