************************************************************
P14-1027.xhtml_1_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 3 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We do this by comparing two computational models of word segmentation which differ solely in the way that they model function words
	Cause: [(0, 4), (0, 21)]
	Effect: [(0, 0), (0, 2)]

CASE: 1
Stag: 6 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: a word segmentation model should segment this as ju wÉnt tu si Ã°É bÊk, which is the IPA representation of u'\u201c' you want to see the book u'\u201d'
	Cause: [(0, 8), (0, 12)]
	Effect: [(0, 0), (0, 6)]

CASE: 2
Stag: 8 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: This suggests that there are acquisition advantages to treating function words specially that human learners could take advantage of (at least to the extent that they are learning similar generalisations as our models), and thus supports the hypothesis that function words are treated specially in human lexical acquisition
	Cause: [(0, 0), (0, 34)]
	Effect: [(0, 38), (0, 50)]

CASE: 3
Stag: 8 9 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: This suggests that there are acquisition advantages to treating function words specially that human learners could take advantage of (at least to the extent that they are learning similar generalisations as our models), and thus supports the hypothesis that function words are treated specially in human lexical acquisition As a reviewer points out, we present no evidence that children use function words in the way that our model does, and we want to emphasise we make no such claim
	Cause: [(1, 1), (1, 23)]
	Effect: [(0, 0), (0, 50)]

CASE: 4
Stag: 10 11 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: While absolute accuracy is not directly relevant to the main point of the paper, we note that the models that learn generalisations about function words perform unsupervised word segmentation at 92.5% token f-score on the standard corpus, which improves the previous state-of-the-art by more than 4% As a reviewer points out, the changes we make to our models to incorporate function words can be viewed as u'\u201c' building in u'\u201d' substantive information about possible human languages
	Cause: [(1, 1), (1, 38)]
	Effect: [(0, 0), (0, 49)]

CASE: 5
Stag: 14 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: By comparing the posterior probability of two models u'\u2014' one in which function words appear at the left edges of phrases, and another in which function words appear at the right edges of phrases u'\u2014' we show that a learner could use Bayesian posterior probabilities to determine that function words appear at the left edges of phrases in English, even though they are not told the locations of word boundaries or which words are function words
	Cause: [(0, 1), (0, 7)]
	Effect: [(0, 8), (0, 85)]

CASE: 6
Stag: 29 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: Properties 1 u'\u2013' 4 suggest that function words might play a special role in language acquisition because they are especially easy to identify, while property 5 suggests that they might be useful for identifying lexical categories
	Cause: [(0, 21), (0, 26)]
	Effect: [(0, 28), (0, 40)]

CASE: 7
Stag: 29 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Properties 1 u'\u2013' 4 suggest that function words might play a special role in language acquisition because they are especially easy to identify, while property 5 suggests that they might be useful for identifying lexical categories
	Cause: [(0, 10), (0, 12)]
	Effect: [(0, 0), (0, 8)]

CASE: 8
Stag: 34 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: In addition, it is plausible that function words play a crucial role in children u'\u2019' s acquisition of more complex syntactic phenomena [] , so it is interesting to investigate the roles they might play in computational models of language acquisition
	Cause: [(0, 0), (0, 28)]
	Effect: [(0, 31), (0, 46)]

CASE: 9
Stag: 37 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: Adaptor grammars are non-parametric, i.e.,, not characterisable by a finite set of parameters, if the set of possible subtrees of the adapted nonterminals is infinite
	Cause: [(0, 18), (0, 28)]
	Effect: [(0, 0), (0, 16)]

CASE: 10
Stag: 38 39 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Adaptor grammars are useful when the goal is to learn a potentially unbounded set of entities that need to satisfy hierarchical constraints As section 2 explains in more detail, word segmentation is such a case words are composed of syllables and belong to phrases or collocations, and modelling this structure improves word segmentation accuracy
	Cause: [(1, 1), (1, 29)]
	Effect: [(0, 0), (0, 21)]

CASE: 11
Stag: 48 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: If X u'\u2208' W (i.e.,, if X is a terminal) then G X is the distribution that puts probability 1 on the single-node tree labelled X
	Cause: [(0, 14), (0, 17)]
	Effect: [(0, 19), (0, 33)]

CASE: 12
Stag: 54 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: There are Markov Chain Monte Carlo (MCMC) and Variational Bayes procedures for estimating the posterior distribution over rule probabilities u'\ud835' u'\udf3d' and parse trees given data consisting of terminal strings alone []
	Cause: [(0, 14), (0, 20)]
	Effect: [(0, 0), (0, 12)]

CASE: 13
Stag: 59 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: As explain, by inserting a Dirichlet Process (DP) or Pitman-Yor Process (PYP) into the generative mechanism ( 1 ) the model u'\u201c' concentrates u'\u201d' mass on a subset of trees []
	Cause: [(0, 4), (0, 23)]
	Effect: [(0, 24), (0, 44)]

CASE: 14
Stag: 61 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In an Adaptor Grammar the unadapted nonterminals N u'\u2216' A expand via ( 1 ), just as in a PCFG, but the distributions of the adapted nonterminals A are u'\u201c' concentrated u'\u201d' by passing them through a DP or PYP
	Cause: [(0, 47), (0, 53)]
	Effect: [(0, 0), (0, 45)]

CASE: 15
Stag: 68 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: There are several different procedures for inferring the parse trees and the rule probabilities given a corpus of strings describe a MCMC sampler and describe a Variational Bayes procedure
	Cause: [(0, 6), (0, 28)]
	Effect: [(0, 0), (0, 4)]

CASE: 16
Stag: 69 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We use the MCMC procedure here since this has been successfully applied to word segmentation problems in previous work []
	Cause: [(0, 7), (0, 20)]
	Effect: [(0, 0), (0, 5)]

CASE: 17
Stag: 70 71 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Perhaps the simplest word segmentation model is the unigram model , where utterances are modeled as sequences of words, and where each word is a sequence of segments [] A unigram model can be expressed as an Adaptor Grammar with one adapted non-terminal u'\ud835' u'\uddb6' u'\ud835' u'\uddc8' u'\ud835' u'\uddcb' u'\ud835' u'\uddbd' ¯ (we indicate adapted nonterminals by underlining them in grammars here; regular expressions are expanded into right-branching productions
	Cause: [(0, 16), (1, 63)]
	Effect: [(0, 1), (0, 14)]

CASE: 18
Stag: 71 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: A unigram model can be expressed as an Adaptor Grammar with one adapted non-terminal u'\ud835' u'\uddb6' u'\ud835' u'\uddc8' u'\ud835' u'\uddcb' u'\ud835' u'\uddbd' ¯ (we indicate adapted nonterminals by underlining them in grammars here; regular expressions are expanded into right-branching productions
	Cause: [(0, 7), (0, 65)]
	Effect: [(0, 0), (0, 5)]

CASE: 19
Stag: 71 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: A unigram model can be expressed as an Adaptor Grammar with one adapted non-terminal u'\ud835' u'\uddb6' u'\ud835' u'\uddc8' u'\ud835' u'\uddcb' u'\ud835' u'\uddbd' ¯ (we indicate adapted nonterminals by underlining them in grammars here; regular expressions are expanded into right-branching productions
	Cause: [(0, 53), (0, 57)]
	Effect: [(0, 0), (0, 51)]

CASE: 20
Stag: 73 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: Because u'\ud835' u'\uddb6' u'\ud835' u'\uddc8' u'\ud835' u'\uddcb' u'\ud835' u'\uddbd' is an adapted nonterminal, the adaptor grammar memoises u'\ud835' u'\uddb6' u'\ud835' u'\uddc8' u'\ud835' u'\uddcb' u'\ud835' u'\uddbd' subtrees, which corresponds to learning the phone sequences for the words of the language
	Cause: [(0, 1), (0, 44)]
	Effect: [(0, 46), (0, 104)]

CASE: 21
Stag: 76 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Section 2.3 presents the major novel contribution of this paper by explaining how we modify these adaptor grammars to capture some of the special properties of function words
	Cause: [(0, 11), (0, 27)]
	Effect: [(0, 0), (0, 9)]

CASE: 22
Stag: 76 77 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Section 2.3 presents the major novel contribution of this paper by explaining how we modify these adaptor grammars to capture some of the special properties of function words The rule ( 3 ) models words as sequences of independently generated phones this is what called the u'\u201c' monkey model u'\u201d' of word generation (it instantiates the metaphor that word types are generated by a monkey randomly banging on the keys of a typewriter
	Cause: [(1, 8), (1, 53)]
	Effect: [(0, 1), (1, 6)]

CASE: 23
Stag: 83 84 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The model just described assumes that word-internal syllables have the same structure as word-peripheral syllables, but in languages such as English word-peripheral onsets and codas can be more complex than the corresponding word-internal onsets and codas For example, the word u'\u201c' string u'\u201d' begins with the onset cluster str, which is relatively rare word-internally showed that word segmentation accuracy improves if the model can learn different consonant sequences for word-inital onsets and word-final codas
	Cause: [(0, 13), (1, 22)]
	Effect: [(0, 0), (0, 11)]

CASE: 24
Stag: 84 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: For example, the word u'\u201c' string u'\u201d' begins with the onset cluster str, which is relatively rare word-internally showed that word segmentation accuracy improves if the model can learn different consonant sequences for word-inital onsets and word-final codas
	Cause: [(0, 35), (0, 47)]
	Effect: [(0, 0), (0, 33)]

CASE: 25
Stag: 85 86 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: It is easy to express this as an Adaptor Grammar 4 ) is replaced with ( 10 u'\u2013' 11 ) and ( 12 u'\u2013' 17 ) are added to the grammar
	Cause: [(0, 7), (1, 15)]
	Effect: [(0, 0), (0, 5)]

CASE: 26
Stag: 87 
	Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: In this grammar the suffix u'\u201c' u'\ud835' u'\udda8' u'\u201d' indicates a word-initial element, and u'\u201c' u'\ud835' u'\udda5' u'\u201d' indicates a word-final element
	Cause: [(0, 3), (0, 24)]
	Effect: [(0, 26), (0, 54)]

CASE: 27
Stag: 90 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: Informally, a model that generates words independently is likely to incorrectly segment multi-word expressions such as u'\u201c' the doggie u'\u201d' as single words because the model has no way to capture word-to-word dependencies, e.g.,, that u'\u201c' doggie u'\u201d' is typically preceded by u'\u201c' the u'\u201d'
	Cause: [(0, 33), (0, 41)]
	Effect: [(0, 43), (0, 72)]

CASE: 28
Stag: 92 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: Adaptor grammar models cannot express bigram dependencies, but they can capture similiar inter-word dependencies using phrase-like units that calls collocations showed that word segmentation accuracy improves further if the model learns a nested hierarchy of collocations
	Cause: [(0, 30), (0, 37)]
	Effect: [(0, 9), (0, 28)]

CASE: 29
Stag: 93 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: This can be achieved by replacing ( 2 ) with ( 18 u'\u2013' 21
	Cause: [(0, 5), (0, 8)]
	Effect: [(0, 0), (0, 3)]

CASE: 30
Stag: 95 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: While not designed to correspond to syntactic phrases, by examining the sample parses induced by the Adaptor Grammar we noticed that the collocations often correspond to noun phrases, prepositional phrases or verb phrases
	Cause: [(0, 10), (0, 28)]
	Effect: [(0, 29), (0, 34)]

CASE: 31
Stag: 97 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The starting point and baseline for our extension is the adaptor grammar with syllable structure phonotactic constraints and three levels of collocational structure ( 5 - 21 ), as prior work has found that this yields the highest word segmentation token f-score []
	Cause: [(0, 30), (0, 43)]
	Effect: [(0, 2), (0, 27)]

CASE: 32
Stag: 100 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: We put u'\u201c' function words u'\u201d' in scare quotes below because our model only approximately captures the linguistic properties of function words
	Cause: [(0, 19), (0, 29)]
	Effect: [(0, 0), (0, 17)]

CASE: 33
Stag: 127 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: For comparison purposes we also include results for a mirror-image model that permits u'\u201c' function words u'\u201d' on the right periphery, a model which permits u'\u201c' function words u'\u201d' on both the left and right periphery (achieved by changing rules 22 u'\u2013' 24 ), as well as a model that analyses all words as monosyllabic
	Cause: [(0, 56), (0, 64)]
	Effect: [(0, 65), (0, 76)]

CASE: 34
Stag: 128 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: Section 4 explains how a learner could use Bayesian model selection to determine that function words appear on the left periphery in English by comparing the posterior probability of the data under our u'\u201c' function word u'\u201d' Adaptor Grammar to that obtained using a grammar which is identical except that rules ( 22 u'\u2013' 24 ) are replaced with the mirror-image rules in which u'\u201c' function words u'\u201d' are attached to the right periphery
	Cause: [(0, 24), (0, 55)]
	Effect: [(0, 56), (0, 93)]

CASE: 35
Stag: 131 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We use the Adaptor Grammar software available from http://web.science.mq.edu.au/~mjohnson/ with the same settings as described in , i.e.,, we perform Bayesian inference with u'\u201c' vague u'\u201d' priors for all hyperparameters (so there are no adjustable parameters in our models), and perform 8 different MCMC runs of each condition with table-label resampling for 2,000 sweeps of the training data
	Cause: [(0, 0), (0, 40)]
	Effect: [(0, 42), (0, 70)]

CASE: 36
Stag: 131 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use the Adaptor Grammar software available from http://web.science.mq.edu.au/~mjohnson/ with the same settings as described in , i.e.,, we perform Bayesian inference with u'\u201c' vague u'\u201d' priors for all hyperparameters (so there are no adjustable parameters in our models), and perform 8 different MCMC runs of each condition with table-label resampling for 2,000 sweeps of the training data
	Cause: [(0, 14), (0, 40)]
	Effect: [(0, 0), (0, 12)]

CASE: 37
Stag: 132 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: At every 10th sweep of the last 1,000 sweeps we use the model to segment the entire corpus (even if it is only trained on a subset of it), so we collect 800 sample segmentations of each utterance
	Cause: [(0, 0), (0, 30)]
	Effect: [(0, 33), (0, 40)]

CASE: 38
Stag: 132 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: At every 10th sweep of the last 1,000 sweeps we use the model to segment the entire corpus (even if it is only trained on a subset of it), so we collect 800 sample segmentations of each utterance
	Cause: [(0, 21), (0, 29)]
	Effect: [(0, 0), (0, 19)]

CASE: 39
Stag: 137 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: When the training data is very small the Monosyllabic grammar produces the highest accuracy results, presumably because a large proportion of the words in child-directed speech are monosyllabic
	Cause: [(0, 18), (0, 28)]
	Effect: [(0, 0), (0, 16)]

CASE: 40
Stag: 139 140 
	Pattern: 8 [['because']]---- [['&R', '(,/./;/--)', '(&AND)', '&THIS', '&BE', '(&ADV)'], ['&C']]
	sentTXT: It u'\u2019' s interesting that after about 1,000 sentences the model that allows u'\u201c' function words u'\u201d' only on the right periphery is considerably less accurate than the baseline model Presumably this is because it tends to misanalyse multi-syllabic words on the right periphery as sequences of monosyllabic words
	Cause: [(1, 4), (1, 18)]
	Effect: [(0, 1), (1, 0)]

CASE: 41
Stag: 145 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: a, the, your, little 1 1 The phone u'\u2018' l u'\u2019' is generated by both Consonant and Vowel , so u'\u201c' little u'\u201d' can be (incorrectly) analysed as one syllable in
	Cause: [(0, 0), (0, 28)]
	Effect: [(0, 31), (0, 46)]

CASE: 42
Stag: 150 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: Thus, the present model, initially aimed at segmenting words from continuous speech, shows three interesting characteristics that are also exhibited by human infants it distinguishes between function words and content words [] , it allows learners to acquire at least some of the function words of their language (e.g., [] ); and furthermore, it may also allow them to start grouping together function words according to their category []
	Cause: [(0, 75), (0, 78)]
	Effect: [(0, 0), (0, 72)]

CASE: 43
Stag: 152 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: This question is important because knowing the side where function words preferentially occur is related to the question of the direction of syntactic headedness in the language, and an accurate method for identifying the location of function words might be useful for initialising a syntactic learner
	Cause: [(0, 5), (0, 26)]
	Effect: [(0, 28), (0, 46)]

CASE: 44
Stag: 153 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Experimental evidence suggests that infants as young as 8 months of age already expect function words on the correct side for their language u'\u2014' left-periphery for Italian infants and right-periphery for Japanese infants [] u'\u2014' so it is interesting to see whether purely distributional learners such as the ones studied here can identify the correct location of function words in phrases
	Cause: [(0, 0), (0, 43)]
	Effect: [(0, 45), (0, 69)]

CASE: 45
Stag: 157 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: In this section, we show that learners could use Bayesian model selection to determine that function words appear on the left periphery in English by comparing the marginal probability of the data for the left-periphery and the right-periphery models
	Cause: [(0, 26), (0, 39)]
	Effect: [(0, 0), (0, 24)]

CASE: 46
Stag: 163 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: where the marginal likelihood or u'\u201c' evidence u'\u201d' for a model G is obtained by integrating over all of the hidden or latent structure and parameters u'\ud835' u'\udf3d'
	Cause: [(0, 23), (0, 31)]
	Effect: [(0, 1), (0, 21)]

CASE: 47
Stag: 166 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Textbooks such as describe a number of methods for calculating P ( D u'\u2223' G ) , but most of them assume that the parameter space u'\u0394' is continuous and so cannot be directly applied here
	Cause: [(0, 0), (0, 36)]
	Effect: [(0, 39), (0, 44)]

CASE: 48
Stag: 166 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Textbooks such as describe a number of methods for calculating P ( D u'\u2223' G ) , but most of them assume that the parameter space u'\u0394' is continuous and so cannot be directly applied here
	Cause: [(0, 9), (0, 10)]
	Effect: [(0, 0), (0, 7)]

CASE: 49
Stag: 167 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: The Harmonic Mean estimator ( 4 ) for ( 31 ), which we used here, is a popular estimator for ( 31 ) because it only requires the ability to calculate P ( D , u'\ud835' u'\udf3d' u'\u2223' G ) for samples from P ( u'\ud835' u'\udf3d' u'\u2223' D , G )
	Cause: [(0, 26), (0, 77)]
	Effect: [(0, 0), (0, 24)]

CASE: 50
Stag: 169 170 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Figure 3 depicts how the Bayes factor in favour of left-peripheral attachment of u'\u201c' function words u'\u201d' varies as a function of the number of utterances in the training data D (calculated from the last 1000 sweeps of 8 MCMC runs of the corresponding adaptor grammars As that figure shows, once the training data contains more than about 1,000 sentences the evidence for the left-peripheral grammar becomes very strong
	Cause: [(1, 1), (1, 4)]
	Effect: [(0, 0), (0, 54)]

CASE: 51
Stag: 172 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Unfortunately, as Murphy and others warn, the Harmonic Mean estimator is extremely unstable (Radford Neal calls it u'\u201c' the worst MCMC method ever u'\u201d' in his blog), so we think it is important to confirm these results using a more stable estimator
	Cause: [(0, 0), (0, 38)]
	Effect: [(0, 41), (0, 54)]

