************************************************************
P14-2109.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 0 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: This paper introduces a new technique for phrase-structure parser analysis , categorizing possible treebank structures by integrating regular expressions into derivation trees
	Cause: integrating regular expressions into derivation trees
	Effect: This paper introduces a new technique for phrase-structure parser analysis , categorizing possible treebank structures

CASE: 1
Stag: 4 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: Phrase-structure parsing is usually evaluated using evalb -LSB- -RSB- , which provides a score based on matching brackets
	Cause: matching brackets
	Effect: Phrase-structure parsing is usually evaluated using evalb -LSB- -RSB- , which provides a score

CASE: 2
Stag: 5 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: While this metric serves a valuable purpose in pushing parser research forward , it has limited utility for understanding what sorts of errors a parser is making
	Cause: understanding what sorts of errors a parser is making
	Effect: While this metric serves a valuable purpose in pushing parser research forward , it has limited utility

CASE: 3
Stag: 6 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: This is the case even if the score is broken down by brackets -LRB- NP , VP , etc. -RRB- , because the brackets can represent different types of structures
	Cause: the brackets can represent different types of structures
	Effect: This is the case even if the score is broken down by brackets -LRB- NP , VP , etc. -RRB-

CASE: 4
Stag: 6 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: This is the case even if the score is broken down by brackets -LRB- NP , VP , etc. -RRB-
	Cause: the score is broken down by brackets -LRB- NP , VP , etc. -RRB-
	Effect: This is the case even

CASE: 5
Stag: 10 11 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: First , inspired by the tradition of Tree Adjoining Grammar-based research -LSB- -RSB- , we use a decomposition of the full trees into u ' \ u201c ' elementary trees u ' \ u201d ' -LRB- henceforth u ' \ u201c ' etrees u ' \ u201d ' -RRB- , with a derivation tree that records how the etrees relate to each other , as in In particular , we use the u ' \ u201c ' spinal u ' \ u201d ' structure approach of -LSB- -RSB- , where etrees are constrained to be unary-branching
	Cause: inspired by the tradition of Tree Adjoining Grammar-based research -LSB- -RSB- , we use a decomposition of the full trees into u ' \ u201c ' elementary trees u ' \ u201d ' -LRB- henceforth u ' \ u201c ' etrees u ' \ u201d ' -RRB- , with a derivation tree that records how the etrees relate to each other , as in In particular , we use the u ' \ u201c ' spinal u ' \ u201d ' structure approach of -LSB- -RSB- , where
	Effect: inspired by the tradition of Tree Adjoining Grammar-based research -LSB- -RSB- , we use a decomposition of the full trees into u ' \ u201c ' elementary trees u ' \ u201d ' -LRB- henceforth u ' \ u201c ' etrees u ' \ u201d ' -RRB- , with a derivation tree that records how the etrees relate to each other

CASE: 6
Stag: 13 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: These are best thought of as an extension of head-finding rules , which not only find a head but simultaneously identify each parent/children relation as one of a limited number of types of structures -LRB- right-modification , etc
	Cause: an extension of head-finding rules , which not only find a head but simultaneously identify each parent/children relation as one of a limited number of types of structures -LRB- right-modification
	Effect: These are best thought of

CASE: 7
Stag: 16 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: The regexes allow us to also provide scores based on spans of different construction types
	Cause: spans of different construction types
	Effect: The regexes allow us to also provide scores

CASE: 8
Stag: 20 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We trained the parser on sections 2-21 , and so -LRB- a -RRB- is u ' \ u201c ' test-on-train u ' \ u201d '
	Cause: We trained the parser on sections 2-21
	Effect: -LRB- a -RRB- is u ' \ u201c ' test-on-train u ' \ u201d

CASE: 9
Stag: 24 25 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Decomposing the original phrase-structure tree into the smaller components requires some method of determining the u ' \ u201c ' head u ' \ u201d ' of a nonterminal , from among its children nodes , similar to parsing work such as As described above , we are also interested in the type of linguistic construction represented by that one-level structure , each of which instantiates one of a few types - recursive coordination , simple head-and-sister , etc
	Cause: described above , we are also interested in the type of linguistic construction represented by that one-level structure , each of which instantiates one of a few types - recursive coordination , simple head-and-sister
	Effect: the original phrase-structure tree into the smaller components requires some method of determining the u ' \ u201c ' head u ' \ u201d ' of a nonterminal , from among its children nodes , similar to parsing work such as

CASE: 10
Stag: 27 28 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In contrast to the sort of head rules in -LSB- -RSB- , these refer as little as possible to specific POS tags Instead of explicitly listing the POS tags of possible heads , the heads are in most cases determined by their location in the structure
	Cause: little as possible to specific POS tags Instead of explicitly listing the POS tags of possible heads , the heads are in most cases determined by their location in the
	Effect: In contrast to the sort of head rules in -LSB- -RSB- , these refer

CASE: 11
Stag: 31 32 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: 3 3 Some among the 49 are duplicates , used for different nonterminals , as with -LRB- a -RRB- and -LRB- b -RRB- in Figure 1 We derived the regexes via an iterative process of inspection of tree decomposition on dataset -LRB- a -RRB- , together with taking advantage of the treebanking experience from some of the co-authors
	Cause: with -LRB- a -RRB- and -LRB- b -RRB- in Figure 1 We derived the regexes via an iterative process of inspection of tree decomposition on dataset -LRB- a -RRB- , together with taking advantage of the treebanking experience from some of the co-authors
	Effect: 3 3 Some among the 49 are duplicates , used for different nonterminals

CASE: 12
Stag: 36 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In this case , the NP on the left is identified as the head d -RRB- VP-crd is also a regex for a recursive structure , in this case for VP coordination , picking out the leftmost conjunct as the head of the structure
	Cause: the head d -RRB- VP-crd is also a regex for a recursive structure , in this case for VP coordination , picking out the leftmost conjunct as the head of the structure
	Effect: In this case , the NP on the left is identified

CASE: 13
Stag: 42 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Each structure within a circle is one etree , and the derivation as a whole indicates how these etrees are combined
	Cause: a whole indicates how these etrees are combined
	Effect: structure within a circle is one etree , and the derivation

CASE: 14
Stag: 46 
	Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: 4 4 We do not have space here to discuss the data structure in complete detail , but multiple regex names at a node , such a VP-aux and VP-t at tree a3 in Figure 3 , indicate multiple VP nonterminals
	Cause: 4 4 We do not have space here to discuss the data structure in complete detail , but multiple regex names at a node , such a VP-aux and VP-t at tree a3 in Figure 3 ,
	Effect: multiple VP nonterminals

CASE: 15
Stag: 64 65 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We show in Section 2.3 how this derivation tree representation is used to score this attachment error directly , rather than obscuring it as an NP bracket error as evalb would do We decompose both the gold and parser output trees into derivation trees with spinal etrees , and score based on the regexes projected by each word
	Cause: an NP bracket error as evalb would do We decompose both the gold and parser output trees into derivation trees with spinal etrees , and score based on the regexes projected by each
	Effect: We show in Section 2.3 how this derivation tree representation is used to score this attachment error directly , rather than obscuring it

CASE: 16
Stag: 65 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: We decompose both the gold and parser output trees into derivation trees with spinal etrees , and score based on the regexes projected by each word
	Cause: the regexes projected by each word
	Effect: We decompose both the gold and parser output trees into derivation trees with spinal etrees , and score

CASE: 17
Stag: 66 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: There is a match for a regex if the corresponding words in gold/parser files project to that regex , a precision error if the parser file does but the gold does not , and a recall error if the gold does but the parser file does not
	Cause: the corresponding words in gold/parser files project to that regex , a precision error if the parser file does but the gold does not , and a recall error if the gold does but the parser file does
	Effect: There is a match for a regex

CASE: 18
Stag: 66 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: the corresponding words in gold/parser files project to that regex , a precision error if the parser file does but the gold does not , and a recall error if the gold does but the parser file does
	Cause: the parser file does but the gold does not , and a recall error if the gold does but the parser file does
	Effect: the corresponding words in gold/parser files project to that regex , a precision error

CASE: 19
Stag: 68 69 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: The word u ' \ u201c ' make u ' \ u201d ' has a match for the regexes VP-t , VP-aux , and S-vp , and so on Summing such scores over the corresponding gold/parser trees gives us F-scores for each regex
	Cause: u201c ' make u ' \ u201d ' has a match for the regexes VP-t , VP-aux , and S-vp
	Effect: on Summing such scores over the corresponding gold/parser trees gives us F-scores for each

CASE: 20
Stag: 71 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: 1 -RRB- For each regex match , we score whether it matches based on the span as well
	Cause: the span
	Effect: 1 -RRB- For each regex match , we score whether it matches

CASE: 21
Stag: 72 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: For example , u ' \ u201c ' make u ' \ u201d ' is a match for VP-t in Figures 3 and 3 , and is also a match for the span as well , since in both derivation trees it includes the words u ' \ u201c ' make u ' \ u2026 ' Florida u ' \ u201d '
	Cause: in both derivation trees it includes the words u ' \ u201c ' make u ' \ u2026 ' Florida u ' \ u201d
	Effect: For example , u ' \ u201c ' make u ' \ u201d ' is a match for VP-t in Figures 3 and 3 , and is also a match for the span as well

CASE: 22
Stag: 76 77 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: However , the F-s score is for separate syntactic constructions -LRB- including also head identification -RRB- , although we can also sum it over all the structures , as done later in Figure 6 The simultaneous F-h and F-s scores let us identify constructions where the parser has the head projection correct , but gets the span wrong
	Cause: done later in Figure 6 The simultaneous F-h and F-s scores let us identify constructions where the parser has the head projection correct , but gets the span wrong
	Effect: However , the F-s score is for separate syntactic constructions -LRB- including also head identification -RRB- , although we can also sum it over all the structures

CASE: 23
Stag: 78 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: 2 -RRB- Since the derivation tree is really a dependency tree with more complex nodes -LSB- -RSB- , we can also score each regex for attachment
	Cause: the derivation tree is really a dependency tree with more complex nodes -LSB- -RSB-
	Effect: we can also score each regex for attachment

CASE: 24
Stag: 81 82 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In Figure 3 , NP-t in etree #a 5 is considered as having the attachment to #a 3 For example , while u ' \ u201c ' to u ' \ u201d ' is a match for PP-t , its attachment is not , since in Figure 3 it is a child of the u ' \ u201c ' trip u ' \ u201d ' etree -LRB- #a 5 -RRB- and in Figure 3 it is a child of the u ' \ u201c ' make u ' \ u201d ' etree -LRB- #b 3
	Cause: having the attachment to #a 3 For example , while u ' \ u201c ' to u ' \ u201d ' is a match for PP-t , its attachment is not , since in Figure 3 it is a child of the u ' \ u201c ' trip u ' \ u201d ' etree -LRB- #a 5 -RRB- and in Figure 3 it is a child of the u ' \ u201c ' make u ' \ u201d '
	Effect: In Figure 3 , NP-t in etree #a 5 is considered

CASE: 25
Stag: 82 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: For example , while u ' \ u201c ' to u ' \ u201d ' is a match for PP-t , its attachment is not , since in Figure 3 it is a child of the u ' \ u201c ' trip u ' \ u201d ' etree -LRB- #a 5 -RRB- and in Figure 3 it is a child of the u ' \ u201c ' make u ' \ u201d ' etree -LRB- #b 3
	Cause: in Figure 3 it is a child of the u ' \ u201c ' trip u ' \ u201d ' etree -LRB- #a 5 -RRB- and in Figure 3 it is a child of the u ' \ u201c ' make u ' \ u201d ' etree -LRB- #b 3
	Effect: while u ' \ u201c ' to u ' \ u201d ' is a match for PP-t , its attachment is not

CASE: 26
Stag: 84 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: This work is in the same basic line of research as the inter-annotator agreement analysis work in
	Cause: the inter-annotator agreement analysis work in
	Effect: This work is in the same basic line of research

CASE: 27
Stag: 89 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We trained the parser on sections 2-21 of OntoNotes WSJ , and parsed the three datasets with the gold tags , since at present we wish to analyze the parser performance in isolation from Part-of-Speech tagging errors
	Cause: at present we wish to analyze the parser performance in isolation
	Effect: We trained the parser on sections 2-21 of OntoNotes WSJ , and parsed the three datasets with the gold tags

CASE: 28
Stag: 92 93 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: To facilitate comparison of our analysis with evalb , we used corpora versions with the same bracket deletion -LRB- empty yields and most punctuation -RRB- as evalb We ran the gold and parsed versions through our regex decomposition and derivation tree creation
	Cause: evalb , we used corpora versions with the same bracket deletion -LRB- empty yields and most punctuation -RRB- as evalb We ran the gold and parsed versions through our regex decomposition and derivation tree creation
	Effect: To facilitate comparison of our analysis with evalb , we used corpora versions with the same bracket deletion -LRB- empty yields and most punctuation -RRB-

CASE: 29
Stag: 99 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: Table 2 lists the most frequent categories in the three datasets , with their percentage of the overall number of brackets -LRB- % gold -RRB- , their score based just on the head identification -LRB- F-h -RRB- , their score based on head identification and -LRB- left and right -RRB- span -LRB- F-s -RRB- , and the attachment -LRB- att -RRB- and span-right -LRB- spanR -RRB- scores for those that match based on the head
	Cause: head identification and -LRB- left and right -RRB- span -LRB- F-s -RRB-
	Effect: and the attachment -LRB- att -RRB- and span-right -LRB- spanR -RRB- scores for those that match based on the

CASE: 30
Stag: 102 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: The two graphs in Figure 6 show the cumulative results based on F-h and F-s , respectively
	Cause: F-h and F-s
	Effect: The two graphs in Figure 6 show the cumulative results

CASE: 31
Stag: 110 111 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The benefit of the approach described here is that now we can see the contribution to the evalb score of the particular types of constructions , and within those constructions , how well the parser is doing at getting the same head projection , but failing or not on the spans As this is work-in-progress , the analysis is not yet complete
	Cause: this is work-in-progress , the analysis is not yet complete
	Effect: The benefit of the approach described here is that now we can see the contribution to the evalb score of the particular types of constructions , and within those constructions , how well the parser is doing at getting the same head projection , but failing or not on the spans

CASE: 32
Stag: 113 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: 1 -RRB- The high performance on the OntoNotes WSJ material is in large part due to the score on the non-recursive regexes of NP-t , VP-t , S-vp , and the auxiliaries -LRB- points 1 , 2 , 4 , 6 in the graphs
	Cause: the score on the non-recursive regexes of NP-t , VP-t , S-vp , and the auxiliaries -LRB- points 1 , 2 , 4 , 6 in the graphs
	Effect: 1 -RRB- The high performance on the OntoNotes WSJ material is in large part

CASE: 33
Stag: 116 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: 2 -RRB- We wouldn u ' \ u2019 ' t expect the test-on-training evalb score to be 100 % , since it has to back off from the training data , but the results for the different categories vary widely , with e.g. , , the NP-modr F-h score much lower than other frequent regexes
	Cause: it has to back off from the training data
	Effect: but the results for the different categories vary widely , with e.g. , , the NP-modr F-h score much lower than other frequent regexes

CASE: 34
Stag: 119 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: For example , the mediocre performance of the parser on SQ-vp barely affects the score with OntoNotes , but has a larger negative effect with Answers , due to its increased frequency in the latter
	Cause: its increased frequency in the latter
	Effect: For example , the mediocre performance of the parser on SQ-vp barely affects the score with OntoNotes , but has a larger negative effect with Answers ,

CASE: 35
Stag: 122 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since this affects the F-s scores for VP-t , VP-aux , and S-vp , the negative effect is large
	Cause: this affects the F-s scores for VP-t
	Effect: VP-aux , and S-vp , the negative effect is large

