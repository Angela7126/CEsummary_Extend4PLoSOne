************************************************************
P14-1131.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 0 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: We present CoSimRank , a graph-theoretic similarity measure that is efficient because it can compute a single node similarity without having to compute the similarities of the entire graph
	Cause: it can compute a single node similarity without having to compute the similarities of the entire graph
	Effect: We present CoSimRank , a graph-theoretic similarity measure that is efficient

CASE: 1
Stag: 5 
	Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
	sentTXT: These algorithms are often based on PageRank -LSB- 2 -RSB- and other centrality measures -LRB- e.g. , , -LSB- 7 -RSB-
	Cause: PageRank -LSB- 2 -RSB- and other centrality measures -LRB- e.g. , , -LSB- 7 -RSB-
	Effect: These algorithms

CASE: 2
Stag: 7 8 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: SimRank is based on the simple intuition that nodes in a graph should be considered as similar to the extent that their neighbors are similar Unfortunately , SimRank has time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- -LRB- where n is the number of nodes in the graph -RRB- and therefore does not scale to the large graphs that are typical of NLP
	Cause: similar to the extent that their neighbors are similar Unfortunately , SimRank has time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- -LRB- where n is the number of nodes in the graph -RRB- and therefore does not scale to the large graphs that are typical of
	Effect: SimRank is based on the simple intuition that nodes in a graph should be considered

CASE: 3
Stag: 8 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Unfortunately , SimRank has time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- -LRB- where n is the number of nodes in the graph -RRB- and therefore does not scale to the large graphs that are typical of NLP
	Cause: Unfortunately , SimRank has time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- -LRB- where n is the number of nodes in the graph -RRB-
	Effect: does not scale to the large graphs that are typical of NLP

CASE: 4
Stag: 10 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Our key observation is that to compute the similarity of two nodes , we need not consider all other nodes in the graph as SimRank does ; instead , CoSimRank starts random walks from the two nodes and computes their similarity at each time step
	Cause: SimRank does ;
	Effect: Our key observation is that to compute the similarity of two nodes , we need not consider all other nodes in the graph

CASE: 5
Stag: 11 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: This offers large savings in computation time if we only need the similarities of a small subset of all n 2 node similarities
	Cause: we only need the similarities of a small subset of all n 2 node similarities
	Effect: This offers large savings in computation time

CASE: 6
Stag: 13 14 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: CoSimRank can be used to compute many variations of basic node similarity u ' \ u2013 ' including similarity for graphs with weighted and typed edges and similarity for sets of nodes Thus , CoSimRank has the added advantage of being a flexible tool for different types of applications
	Cause: CoSimRank can be used to compute many variations of basic node similarity u ' \ u2013 ' including similarity for graphs with weighted and typed edges and similarity for sets of nodes
	Effect: , CoSimRank has the added advantage of being a flexible tool for different types of applications

CASE: 7
Stag: 15 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: The extension of CoSimRank to similarity across graphs is important for the application of bilingual lexicon extraction given a set of correspondences between nodes in two graphs A and B -LRB- corresponding to two different languages -RRB- , a pair of nodes -LRB- a u ' \ u2208 ' A , b u ' \ u2208 ' B -RRB- is a good candidate for a translation pair if their node similarity is high
	Cause: their node similarity is high
	Effect: The extension of CoSimRank to similarity across graphs is important for the application of bilingual lexicon extraction given a set of correspondences between nodes in two graphs A and B -LRB- corresponding to two different languages -RRB- , a pair of nodes -LRB- a u ' \ u2208 ' A , b u ' \ u2208 ' B -RRB- is a good candidate for a translation pair

CASE: 8
Stag: 21 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: By providing some useful extensions , we demonstrate the great flexibility of CoSimRank -LRB- Section 5
	Cause: providing some useful extensions
	Effect: , we demonstrate the great flexibility of CoSimRank -LRB- Section 5

CASE: 9
Stag: 24 25 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Our work is unsupervised We therefore do not review graph-based methods that make extensive use of supervised learning -LRB- e.g. , , de Melo and Weikum -LRB- 2012 -RRB-
	Cause: work is unsupervised We
	Effect: do not review graph-based methods that make extensive use of supervised learning -LRB- e.g. , , de Melo and Weikum -LRB- 2012 -RRB-

CASE: 10
Stag: 25 26 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We therefore do not review graph-based methods that make extensive use of supervised learning -LRB- e.g. , , de Melo and Weikum -LRB- 2012 -RRB- Since the original version of SimRank -LSB- 15 -RSB- has complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 4 -RRB- , many extensions have been proposed to speed up its calculation
	Cause: the original version of SimRank -LSB- 15 -RSB- has complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 4 -RRB- ,
	Effect: We therefore do not review graph-based methods that make extensive use of supervised learning -LRB- e.g. , , de Melo and Weikum -LRB- 2012 -RRB-

CASE: 11
Stag: 38 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: The algorithm we propose below is an order of magnitude faster in such applications because it is based on a local formulation of the similarity measure
	Cause: it is based on a local formulation of the similarity measure
	Effect: The algorithm we propose below is an order of magnitude faster in such applications

CASE: 12
Stag: 38 
	Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
	sentTXT: it is based on a local formulation of the similarity measure
	Cause: a local formulation of the similarity measure
	Effect: it

CASE: 13
Stag: 42 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: 2006 -RRB- introduce a similarity measure that is also based on the idea that nodes are similar when their neighbors are , but that is designed for bipartite graphs
	Cause: the idea that nodes are similar when their neighbors are
	Effect: but that is designed for bipartite graphs

CASE: 14
Stag: 45 46 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We will refer to this measure as PPR + cos Hughes and Ramage -LRB- 2007 -RRB- find that PPR + cos has high correlation with human similarity judgments on WordNet-based graphs
	Cause: PPR + cos Hughes and Ramage -LRB- 2007 -RRB- find that PPR + cos has high correlation with human similarity judgments on WordNet-based
	Effect: We will refer to this measure

CASE: 15
Stag: 49 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Like CoSimRank , PPR + cos is efficient when computing single node pair similarities ; we therefore use it as one of our baselines below
	Cause: CoSimRank , PPR + cos is efficient when computing single node pair similarities ; we
	Effect: use it as one of our baselines below

CASE: 16
Stag: 57 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: PPR + cos performed best except for a new similarity measure based on commute time
	Cause: commute time
	Effect: PPR + cos performed best except for a new similarity measure

CASE: 17
Stag: 58 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We do not compare against this new measure as it uses the graph Laplacian and so can not be computed for a single node pair
	Cause: We do not compare against this new measure as it uses the graph Laplacian
	Effect: can not be computed for a single node pair

CASE: 18
Stag: 58 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We do not compare against this new measure as it uses the graph Laplacian
	Cause: it uses the graph Laplacian
	Effect: We do not compare against this new measure

CASE: 19
Stag: 58 59 
	Pattern: 1 [['reason'], [['that', 'because']]]---- [['&R', '(,/./;/--)', '&ONE', '(&ADJ)'], ['(for &THIS (&NP))', '&BE'], ['&C']]
	sentTXT: We do not compare against this new measure as it uses the graph Laplacian and so can not be computed for a single node pair One reason CoSimRank is efficient is that we need only compute a few iterations of the random walk
	Cause: we need only compute a few iterations of the random walk
	Effect: We do not compare against this new measure as it uses the graph Laplacian and so can not be computed for a single node pair

CASE: 20
Stag: 68 69 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use their Multi-Edge Extraction -LRB- MEE -RRB- algorithm as one of our baselines below A similar graph of dependency structures was built by Minkov and Cohen -LRB- 2008
	Cause: one of our baselines below A similar graph of dependency structures was built by Minkov and Cohen -LRB-
	Effect: We use their Multi-Edge Extraction -LRB- MEE -RRB- algorithm

CASE: 21
Stag: 78 
	Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
	sentTXT: The novelty is that we compute similarity for vectors that are induced using a new algorithm , so that the similarity measurement is much more efficient when an application only needs a fraction of all u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 2 -RRB- pairwise similarities
	Cause: The novelty is that we compute similarity for vectors that are induced using a new algorithm ,
	Effect: the similarity measurement is much more efficient when an application only needs a fraction of all u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 2 -RRB- pairwise similarities

CASE: 22
Stag: 79 80 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We first first give an intuitive introduction of CoSimRank as a Personalized PageRank -LRB- PPR -RRB- derivative Later on , we will give a matrix formulation to compare CoSimRank with SimRank
	Cause: a Personalized PageRank -LRB- PPR -RRB- derivative Later on , we will give a matrix formulation to compare CoSimRank with
	Effect: We first first give an intuitive introduction of CoSimRank

CASE: 23
Stag: 81 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: Haveliwala -LRB- 2002 -RRB- introduced Personalized PageRank u ' \ u2013 ' or topic-sensitive PageRank u ' \ u2013 ' based on the idea that the uniform damping vector p -LRB- 0 -RRB- can be replaced by a personalized vector , which depends on node i
	Cause: the idea that the uniform damping vector p -LRB- 0 -RRB- can be replaced by a personalized vector
	Effect: which depends on node i

CASE: 24
Stag: 91 92 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Note that the personalization vector p -LRB- 0 -RRB- was eliminated , but is still present as the starting vector of the iteration Let p u ' \ u2062 ' -LRB- i -RRB- be the PPR vector of node i
	Cause: the starting vector of the iteration Let p u ' \ u2062 ' -LRB- i -RRB- be the PPR vector of node i
	Effect: the personalization vector p -LRB- 0 -RRB- was eliminated , but is still present

CASE: 25
Stag: 93 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: The cosine of two vectors u and v is computed by dividing the inner product u ' \ u27e8 ' u , v u ' \ u27e9 ' by the lengths of the vectors
	Cause: dividing the inner product u ' \ u27e8 ' u , v u ' \ u27e9 ' by the lengths of the vectors
	Effect: The cosine of two vectors u and v is computed

CASE: 26
Stag: 94 95 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The cosine of two PPR vectors can be used as a similarity measure for the corresponding nodes -LSB- 12 , 1 -RSB- This measure s u ' \ u2062 ' -LRB- i , j -RRB- looks at the probability that a random walker is on a certain edge after an unlimited number of steps
	Cause: a similarity measure for the corresponding nodes -LSB- 12 , 1 -RSB- This measure s u ' \ u2062 ' -LRB- i , j -RRB- looks at the probability that a random walker is on a certain edge after an unlimited number of
	Effect: The cosine of two PPR vectors can be used

CASE: 27
Stag: 96 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: This is potentially problematic as the example in Figure 1 shows
	Cause: the example in Figure 1 shows
	Effect: This is potentially problematic

CASE: 28
Stag: 98 99 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: However , the PPR vector of law will also have a non-zero weight for tailor So law and dress are similar because of the node tailor
	Cause: However , the PPR vector of law will also have a non-zero weight for tailor
	Effect: law and dress are similar because of the node tailor

CASE: 29
Stag: 101 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We can prevent this type of spurious similarity by taking into account the path the random surfer took to get to a particular node
	Cause: taking into account the path the random surfer took to get to a particular node
	Effect: We can prevent this type of spurious similarity

CASE: 30
Stag: 102 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We formalize this by defining CoSimRank s u ' \ u2062 ' -LRB- i , j -RRB- as follows
	Cause: defining CoSimRank s u ' \ u2062 ' -LRB- i , j -RRB- as follows
	Effect: We formalize this

CASE: 31
Stag: 107 
	Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
	sentTXT: We add a damping factor c , so that early meetings are more valuable than later meetings
	Cause: We add a damping factor c ,
	Effect: early meetings are more valuable than later meetings

CASE: 32
Stag: 111 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since our vectors are probability vectors , we have
	Cause: our vectors are probability vectors
	Effect: we have

CASE: 33
Stag: 118 119 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We will see in Section 5 that this formulation is the basis for a very efficient version of CoSimRank As the PPR vectors have only positive values , we can easily see in Eq
	Cause: the PPR vectors have only positive values , we can easily see in Eq
	Effect: We will see in Section 5 that this formulation is the basis for a very efficient version of CoSimRank

CASE: 34
Stag: 125 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We also know from elementary functional analysis that the 1-norm is the biggest of all p-norms and so one has u ' \ u2225 ' p -LRB- k -RRB- u ' \ u2225 ' u ' \ u2264 ' 1
	Cause: We also know from elementary functional analysis that the 1-norm is the biggest of all p-norms
	Effect: one has u ' \ u2225 ' p -LRB- k -RRB- u ' \ u2225 ' u ' \ u2264 ' 1

CASE: 35
Stag: 128 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If an upper bound of 1 is desired for s u ' \ u2062 ' -LRB- i , j -RRB- -LRB- instead of 1 / -LRB- 1 - c -RRB- -RRB- , then we can use s u ' \ u2032 '
	Cause: an upper bound of 1 is desired for s u ' \ u2062 ' -LRB- i
	Effect: j -RRB- -LRB- instead of 1 / -LRB- 1 - c -RRB- -RRB- , then we can use s u

CASE: 36
Stag: 142 143 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Whereas SimRank sets each of these entries back to one at each iteration , CoSimRank adds one Thus , when computing the two similarity measures iteratively , the diagonal element -LRB- i , i -RRB- will be set to 1 by both methods for those initial iterations for which this entry is 0 for c u ' \ u2062 ' A u ' \ u2062 ' S -LRB- k - 1 -RRB- u ' \ u2062 ' A T -LRB- i.e. , , before applying either max or add
	Cause: Whereas SimRank sets each of these entries back to one at each iteration , CoSimRank adds one
	Effect: , when computing the two similarity measures iteratively , the diagonal element -LRB- i , i -RRB- will be set to 1 by both methods for those initial iterations for which this entry is 0 for c u ' \ u2062 ' A u ' \ u2062 ' S -LRB- k - 1 -RRB- u ' \ u2062 ' A T -LRB- i.e. , , before applying either max or add

CASE: 37
Stag: 148 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: 8 -RRB- have time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- or u ' \ u2013 ' if we want to take the higher efficiency of computation for sparse graphs into account u ' \ u2013 ' u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- d u ' \ u2062 ' n 2 -RRB- where n is the number of nodes and d the average degree
	Cause: we want to take the higher efficiency of computation for sparse graphs into account u ' \ u2013 ' u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- d u ' \ u2062 ' n 2 -RRB- where n is the number of nodes and d the average degree
	Effect: 8 -RRB- have time complexity u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 3 -RRB- or u ' \ u2013 '

CASE: 38
Stag: 155 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: If d k , then the time complexity of CoSimRank is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- k 2 u ' \ u2062 ' n
	Cause: d k
	Effect: the time complexity of CoSimRank is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- k 2 u ' \ u2062 ' n

CASE: 39
Stag: 156 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: If we only compute a single similarity , then the complexity is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- d u ' \ u2062 ' n
	Cause: we only compute a single similarity
	Effect: the complexity is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- d u ' \ u2062 ' n

CASE: 40
Stag: 158 159 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: It is not obvious how to design a lower-complexity version of SimRank for this case Thus , we have reduced SimRank u ' \ u2019 ' s cubic time complexity to a quadratic time complexity for CoSimRank or u ' \ u2013 ' assuming that the average degree d does not depend on n u ' \ u2013 ' SimRank u ' \ u2019 ' s quadratic time complexity to linear time complexity for the case of computing few similarities
	Cause: It is not obvious how to design a lower-complexity version of SimRank for this case
	Effect: , we have reduced SimRank u ' \ u2019 ' s cubic time complexity to a quadratic time complexity for CoSimRank or u ' \ u2013 ' assuming that the average degree d does not depend on n u ' \ u2013 ' SimRank u ' \ u2019 ' s quadratic time complexity to linear time complexity for the case of computing few similarities

CASE: 41
Stag: 160 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: Space complexity for computing k 2 similarities is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- k u ' \ u2062 ' n -RRB- since we need only store k vectors , not the complete similarity matrix
	Cause: we need only store k vectors , not the complete similarity matrix
	Effect: complexity for computing k 2 similarities is u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- k u ' \ u2062 ' n -RRB-

CASE: 42
Stag: 162 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: If the matrix formulation can not be used because the u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 2 -RRB- similarity matrix is too big for available memory , then we can compute all similarities in batches u ' \ u2013 ' and if desired in parallel u ' \ u2013 ' whose size is chosen such that the vectors of each batch still fit in memory
	Cause: the u ' \ ud835 ' u ' \ udcaa ' u ' \ u2062 ' -LRB- n 2 -RRB- similarity matrix is too big for available
	Effect: then we can compute all similarities in batches u ' \ u2013 ' and if desired in parallel u ' \ u2013 ' whose size is chosen such that the vectors of each batch still fit in

CASE: 43
Stag: 163 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: In summary , CoSimRank and SimRank have similar space and time complexities for computing all n 2 similarities
	Cause: computing all n 2 similarities
	Effect: In summary , CoSimRank and SimRank have similar space and time complexities

CASE: 44
Stag: 164 165 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: For the more typical case that we only want to compute a fraction of all similarities , we have recast the global SimRank formulation as a local CoSimRank formulation As a result , time and space complexities are much improved
	Cause: a local CoSimRank formulation As a result , time and space complexities are much
	Effect: For the more typical case that we only want to compute a fraction of all similarities , we have recast the global SimRank formulation

CASE: 45
Stag: 164 165 
	Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
	sentTXT: For the more typical case that we only want to compute a fraction of all similarities , we have recast the global SimRank formulation as a local CoSimRank formulation As a result , time and space complexities are much improved
	Cause: For the more typical case that we only want to compute a fraction of all similarities , we have recast the global SimRank formulation as a local CoSimRank formulation
	Effect: time and space complexities are much improved

CASE: 46
Stag: 167 168 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: We will show now that the basic CoSimRank algorithm can be extended in a number of ways and is thus a flexible tool for different NLP applications The use of weighted edges was first proposed in the PageRank patent
	Cause: We will show now that the basic CoSimRank algorithm can be extended in a number of ways and is
	Effect: a flexible tool for different NLP applications The use of weighted edges was first proposed in the PageRank

CASE: 47
Stag: 169 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: It is straightforward and easy to implement by replacing the row normalized adjacency matrix A with an arbitrary stochastic matrix P
	Cause: replacing the row normalized adjacency matrix A with an arbitrary stochastic matrix P
	Effect: It is straightforward and easy to implement

CASE: 48
Stag: 190 191 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We can interpret S -LRB- 0 -RRB- as a change of basis A similar approach for word embeddings was published by Mikolov et al
	Cause: a change of basis A similar approach for word embeddings was published by Mikolov et
	Effect: We can interpret S -LRB- 0 -RRB-

CASE: 49
Stag: 201 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We are not including this method in our experiments , but we will give the equation here , as traditional document similarity measures -LRB- e.g. , , cosine similarity -RRB- perform poorly on this task although there also are known alternatives with good results -LSB- 30 -RSB-
	Cause: traditional document similarity measures -LRB- e.g. , , cosine similarity -RRB- perform poorly on this task although there also are known alternatives with good results -LSB- 30 -RSB-
	Effect: this method in our experiments , but we will give the equation here

CASE: 50
Stag: 212 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Our motivation for this application is that two words that are synonyms of each other should have similar lexical neighbors and that two words that are translations of each other should have neighbors that correspond to each other ; thus , in each case the nodes should be similar in the graph-theoretic sense and CoSimRank should be able to identify this similarity
	Cause: Our motivation for this application is that two words that are synonyms of each other should have similar lexical neighbors and that two words that are translations of each other should have neighbors that correspond to each other
	Effect: , in each case the nodes should be similar in the graph-theoretic sense and CoSimRank should be able to identify this similarity

CASE: 51
Stag: 218 219 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph Consequently , we compare against the two main methods for this task in NLP
	Cause: an efficient algorithm for computing the similarity of nodes in a graph Consequently , we compare against the two main methods for this task in
	Effect: We propose CoSimRank

CASE: 52
Stag: 218 219 
	Pattern: 9 [['consequently']]---- [['&C', '(,/;/./--)'], ['(,)', '&R']]
	sentTXT: We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph Consequently , we compare against the two main methods for this task in NLP
	Cause: We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph
	Effect: we compare against the two main methods for this task in NLP

CASE: 53
Stag: 223 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Apart from SimRank , extensions of PageRank are the main methods for computing the similarity of nodes in graphs in NLP -LRB- e.g. , , Hughes and Ramage -LRB- 2007 -RRB- , Agirre et al
	Cause: computing the similarity of nodes in graphs in NLP -LRB- e.g. , , Hughes and Ramage -LRB- 2007 -RRB- , Agirre et al
	Effect: Apart from SimRank , extensions of PageRank are the main methods

CASE: 54
Stag: 229 230 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use TS68 , a test set of 68 synonym pairs published by Minkov and Cohen -LRB- 2012 -RRB- for evaluation This gold standard lists a single word as the correct synonym even if there are several equally acceptable near-synonyms -LRB- see Table 3 for examples
	Cause: the correct synonym even if there are several equally acceptable near-synonyms -LRB- see Table 3
	Effect: We use TS68 , a test set of 68 synonym pairs published by Minkov and Cohen -LRB- 2012 -RRB- for evaluation This gold standard lists a single word

CASE: 55
Stag: 233 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: If all three of them agreed on one word as being a synonym in at least one meaning , we added this as a correct answer to the test set
	Cause: being a synonym in at least one meaning , we added this as a correct answer to the test set
	Effect: all three of them agreed on one word

CASE: 56
Stag: 233 
	Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
	sentTXT: being a synonym in at least one meaning , we added this as a correct answer to the test set
	Cause: being a synonym in at least one meaning
	Effect: we added this as a correct answer to the test set

CASE: 57
Stag: 242 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: CoSimRank is better than PPR + cos on both evaluations , but as this test set is very small , the results are not significant
	Cause: this test set is very small , the results are not significant
	Effect: CoSimRank is better than PPR + cos on both evaluations , but

CASE: 58
Stag: 246 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: MRR is equivalent to MAP as reported by Minkov and Cohen -LRB- 2012 -RRB- when there is only one correct answer . -RRB- Their best number -LRB- 0.59 -RRB- is better than our one-synonym result ; however , they performed manual postprocessing of results u ' \ u2013 ' e.g. , , discarding words that are morphologically or semantically related to other words in the list u ' \ u2013 ' so our fully automatic results can not be directly compared
	Cause: MRR is equivalent to MAP as reported by Minkov and Cohen -LRB- 2012 -RRB- when there is only one correct answer . -RRB- Their best number -LRB- 0.59 -RRB- is better than our one-synonym result ; however , they performed manual postprocessing of results u ' \ u2013 ' e.g. , , discarding words that are morphologically or semantically related to other words in the list u ' \ u2013 '
	Effect: our fully automatic results can not be directly compared

CASE: 59
Stag: 246 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: MRR is equivalent to MAP as reported by Minkov and Cohen -LRB- 2012 -RRB- when there is only one correct answer . -RRB- Their best number -LRB- 0.59 -RRB- is better than our one-synonym result ; however , they performed manual postprocessing of results u ' \ u2013 ' e.g. , , discarding words that are morphologically or semantically related to other words in the list u ' \ u2013 '
	Cause: reported by Minkov and Cohen -LRB- 2012 -RRB- when there is only one correct answer . -RRB-
	Effect: MRR is equivalent to MAP

CASE: 60
Stag: 248 249 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: For lexicon extraction , we use the same parameters as in the synonym extraction task for all four similarity measures We use a seed dictionary of 12,630 word pairs to establish node-node correspondences between the two graphs
	Cause: in the synonym extraction task for all four similarity measures We use a seed dictionary of 12,630 word pairs to establish node-node correspondences between the two
	Effect: For lexicon extraction , we use the same parameters

CASE: 61
Stag: 250 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: We remove a search keyword from the seed dictionary before calculating similarities for it , something that the architecture of CoSimRank makes easy because we can use a different seed dictionary S -LRB- 0 -RRB- for every keyword
	Cause: we can use a different seed dictionary S -LRB- 0 -RRB- for every keyword
	Effect: We remove a search keyword from the seed dictionary before calculating similarities for it , something that the architecture of CoSimRank makes easy

CASE: 62
Stag: 259 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: This is also true for CoSimRank , but it seems that CoSimRank is more stable because we compare more than one vector
	Cause: we compare more than one vector
	Effect: This is also true for CoSimRank , but it seems that CoSimRank is more stable

CASE: 63
Stag: 262 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: We tried a number of different ways of modifying it for weighted graphs i -RRB- running the random walks with the weighted adjacency matrix as Markov matrix , -LRB- ii -RRB- storing the weight -LRB- product of each edge weight -RRB- of a random walk and using it as a factor if two walks meet and -LRB- iii -RRB- a combination of both
	Cause: two walks meet and
	Effect: We tried a number of different ways of modifying it for weighted graphs i -RRB- running the random walks with the weighted adjacency matrix as Markov matrix , -LRB- ii -RRB- storing the weight -LRB- product of each edge weight -RRB- of a random walk and using it as a factor

CASE: 64
Stag: 264 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: As a result , the computational time was approximately 30 minutes per test word , so this method is even slower than SimRank for our application
	Cause: As a result , the computational time was approximately 30 minutes per test word
	Effect: this method is even slower than SimRank for our application

CASE: 65
Stag: 269 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The actual wall clock time was significantly lower as we used up to 64 CPUs
	Cause: we used up to 64 CPUs
	Effect: The actual wall clock time was significantly lower

CASE: 66
Stag: 271 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: SimRank is at a disadvantage because it computes all similarities in the graph regardless of the size of the test set ; it is particularly inefficient on synonym extraction because the English graph contains a large number of edges -LRB- see Table 1
	Cause: it computes all similarities in the graph regardless of the size of the test set ; it is particularly inefficient on synonym extraction because the English graph contains a large number of edges -LRB- see Table 1
	Effect: SimRank is at a disadvantage

CASE: 67
Stag: 271 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: it computes all similarities in the graph regardless of the size of the test set ; it is particularly inefficient on synonym extraction because the English graph contains a large number of edges -LRB- see Table 1
	Cause: the English graph contains a large number of edges -LRB- see Table 1
	Effect: it computes all similarities in the graph regardless of the size of the test set ; it is particularly inefficient on synonym extraction

CASE: 68
Stag: 277 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: This effect is only visible on the larger test set -LRB- lexicon extraction -RRB- because the general computation overhead is about the same on a smaller test set
	Cause: the general computation overhead is about the same on a smaller test set
	Effect: This effect is only visible on the larger test set -LRB- lexicon extraction -RRB-

CASE: 69
Stag: 278 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: Here we address inducing a bilingual lexicon from a seed set based on grammatical relations found by a parser
	Cause: grammatical relations found by a parser
	Effect: Here we address inducing a bilingual lexicon from a seed set

CASE: 70
Stag: 286 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: Most of the 226 missing word pairs are adverbs , prepositions and plural forms that are not covered by our graphs due to the construction algorithm we use lemmatization , restriction to adjectives , nouns and verbs etc
	Cause: the construction algorithm we use lemmatization , restriction to adjectives , nouns and verbs etc
	Effect: Most of the 226 missing word pairs are adverbs , prepositions and plural forms that are not covered by our graphs

CASE: 71
Stag: 288 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: 4 4 We achieved better results for CoSimRank by optimizing the damping factor , but in this paper , we only present results for a fixed damping factor of 0.8
	Cause: optimizing the damping factor
	Effect: , but in this paper , we only present results for a fixed damping factor of 0.8

CASE: 72
Stag: 290 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: The results on TS774 can be considered conservative since only one translation is accepted as being correct
	Cause: only one translation is accepted as being correct
	Effect: The results on TS774 can be considered conservative

CASE: 73
Stag: 293 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Additionally , TS774 was created by translating English words into German -LRB- using Google translate
	Cause: translating English words into German -LRB- using Google translate
	Effect: Additionally , TS774 was created

CASE: 74
Stag: 294 295 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: We are now testing the reverse direction So we are doomed to fail if the original English word is a less common translation of an ambiguous German word
	Cause: We are now testing the reverse direction
	Effect: we are doomed to fail if the original English word is a less common translation of an ambiguous German word

CASE: 75
Stag: 296 297 
	Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: For example , the English word gulf was translated by Google to Golf , but the most common sense of Golf is the sport Hence our algorithm will incorrectly translate it back to golf
	Cause: For example , the English word gulf was translated by Google to Golf , but the most common sense of Golf is the sport
	Effect: our algorithm will incorrectly translate it back to

CASE: 76
Stag: 297 298 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Hence our algorithm will incorrectly translate it back to golf As we can see in Table 7 , we also face the problems discussed by Laws et al
	Cause: we can see in Table 7 , we also face the problems discussed by Laws et al
	Effect: algorithm will incorrectly translate it back to golf

CASE: 77
Stag: 299 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: 2010 the algorithm sometimes picks cohyponyms -LRB- which can still be seen as reasonable -RRB- and antonyms -LRB- which are clear errors
	Cause: reasonable -RRB- and antonyms -LRB- which
	Effect: 2010 the algorithm sometimes picks cohyponyms -LRB- which can still be seen

CASE: 78
Stag: 301 
	Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
	sentTXT: Looking at Table 1 , we see that there is only one edge type connecting adjectives
	Cause: Looking at Table 1
	Effect: we see that there is only one edge type connecting adjectives

CASE: 79
Stag: 310 311 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: We also presented extensions of CoSimRank for a number of applications , thus demonstrating the flexibility of CoSimRank as a similarity measure We showed that CoSimRank is superior to SimRank in time and space complexity ; and we demonstrated that CoSimRank performs better than PPR + cos on two similarity computation tasks
	Cause: We also presented extensions of CoSimRank for a number of applications
	Effect: demonstrating the flexibility of CoSimRank as a similarity measure We showed that CoSimRank is superior to SimRank in time and space complexity ; and we demonstrated that CoSimRank performs better than PPR + cos on two similarity computation

