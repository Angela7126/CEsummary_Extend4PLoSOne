************************************************************
P14-2129.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 0 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Finite-state chunking and tagging methods are very fast for annotating non-hierarchical syntactic information , and are often applied in applications that do not require full syntactic analyses
	Cause: annotating non-hierarchical syntactic information
	Effect: Finite-state chunking and tagging methods are very fast

CASE: 1
Stag: 3 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: This approach improves efficiency by bounding constituent size , and allows for efficient segmentation strategies prior to parsing
	Cause: bounding constituent size
	Effect: , and allows for efficient segmentation strategies prior to parsing

CASE: 2
Stag: 7 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Models to derive such non-hierarchical annotations are finite-state , so inference is very fast
	Cause: Models to derive such non-hierarchical annotations are finite-state
	Effect: inference is very fast

CASE: 3
Stag: 9 
	Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: For example , in incremental -LRB- simultaneous -RRB- machine translation -LSB- 13 -RSB- , sub-sentential segments are translated independently and sequentially , hence the fully-connected syntactic structure is not generally available
	Cause: example , in incremental -LRB- simultaneous -RRB- machine translation -LSB- 13 -RSB- , sub-sentential segments are translated independently and sequentially
	Effect: the fully-connected syntactic structure is not generally available

CASE: 4
Stag: 9 10 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: For example , in incremental -LRB- simultaneous -RRB- machine translation -LSB- 13 -RSB- , sub-sentential segments are translated independently and sequentially , hence the fully-connected syntactic structure is not generally available Even so , locally-connected source language parse structures can inform both segmentation and translation of each segment in such a translation scenario
	Cause: example , in incremental -LRB- simultaneous -RRB- machine translation -LSB- 13 -RSB- , sub-sentential segments are translated independently and sequentially , hence the fully-connected syntactic structure is not generally available Even
	Effect: locally-connected source language parse structures can inform both segmentation and translation of each segment in such a translation scenario

CASE: 5
Stag: 12 
	Pattern: 0 [['due', 'to', 'the', 'fact', 'that']]---- [['&R', '(,)'], ['&C']]
	sentTXT: We follow the XML community in naming structures of this type hedges -LRB- not to be confused with the rhetorical device of the same name -RRB- , due to the fact that they are like smaller versions of trees which occur in sequences
	Cause: they are like smaller versions of trees which occur in sequences
	Effect: We follow the XML community in naming structures of this type hedges -LRB- not to be confused with the rhetorical device of the same name -RRB-

CASE: 6
Stag: 15 16 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Similar constraints have been used in dependency parsing -LSB- 6 , 5 -RSB- , where the use of hard constraints on the distance between heads and dependents is known as vine parsing It is also reminiscent of so-called Semi-Markov models -LSB- 12 -RSB- , which allow finite-state models to reason about segments rather than just tags by imposing segment length limits
	Cause: vine parsing It is also reminiscent of so-called Semi-Markov models -LSB- 12 -RSB- ,
	Effect: Similar constraints have been used in dependency parsing -LSB- 6 , 5 -RSB- , where the use of hard constraints on the distance between heads and dependents is known

CASE: 7
Stag: 16 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: It is also reminiscent of so-called Semi-Markov models -LSB- 12 -RSB- , which allow finite-state models to reason about segments rather than just tags by imposing segment length limits
	Cause: imposing segment length limits
	Effect: It is also reminiscent of so-called Semi-Markov models -LSB- 12 -RSB- , which allow finite-state models to reason about segments rather than just tags

CASE: 8
Stag: 20 21 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In such a way , hedges are sequentially connected to the top-most non-terminal in the tree , as demonstrated in Figure 1 After applying such a transform to a treebank , we can induce grammars and modify parsing to search as needed to recover just these constituents
	Cause: demonstrated in Figure 1 After applying such a transform to a treebank , we can induce grammars and modify parsing to search as needed to recover just these constituents
	Effect: In such a way , hedges are sequentially connected to the top-most non-terminal in the tree

CASE: 9
Stag: 21 22 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: After applying such a transform to a treebank , we can induce grammars and modify parsing to search as needed to recover just these constituents In this paper , we propose several methods to parse hedge constituents and examine their accuracy/efficiency tradeoffs
	Cause: needed to recover just these constituents In this paper , we propose several methods to parse hedge constituents and examine their accuracy/efficiency tradeoffs
	Effect: After applying such a transform to a treebank , we can induce grammars and modify parsing to search

CASE: 10
Stag: 35 
	Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: For example , the span of the non-root S , SBAR , ADJP , and VP nodes in Figure 1 -LRB- a -RRB- have spans between 10 and 13 , hence are removed in the tree in Figure 1 -LRB- b
	Cause: For example , the span of the non-root S , SBAR , ADJP , and VP nodes in Figure 1 -LRB- a -RRB- have spans between 10 and 13
	Effect: are removed in the tree in Figure 1 -LRB- b

CASE: 11
Stag: 36 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If we apply this transform to an entire treebank , we can use the transformed trees to induce a PCFG for parsing
	Cause: we apply this transform to an entire treebank
	Effect: we can use the transformed trees to induce a PCFG for parsing

CASE: 12
Stag: 37 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Figure 2 plots the percentage of constituents from the original WSJ Penn treebank -LRB- sections 2-21 -RRB- retained in the transformed version , as we vary the maximum span length parameter L
	Cause: we vary the maximum span length
	Effect: 2 plots the percentage of constituents from the original WSJ Penn treebank -LRB- sections 2-21 -RRB- retained in the transformed version

CASE: 13
Stag: 39 40 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Most experiments in this paper will focus on L = 7 , which is short enough to provide a large speedup yet still cover a large fraction of constituents As stated earlier , our brute-force baseline approach is to parse the sentence using a full context-free grammar -LRB- CFG -RRB- and then hedge-transform the result
	Cause: stated earlier , our brute-force baseline approach is to parse the sentence using a full context-free grammar -LRB- CFG -RRB- and then hedge-transform the result
	Effect: Most experiments in this paper will focus on L = 7 , which is short enough to provide a large speedup yet still cover a large fraction of constituents

CASE: 14
Stag: 41 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: This method should yield a ceiling on hedge-parsing accuracy , as it has access to rich contextual information -LRB- as compared to grammars trained on transformed trees
	Cause: it has access to rich contextual information -LRB- as compared to grammars trained on transformed trees
	Effect: This method should yield a ceiling on hedge-parsing accuracy

CASE: 15
Stag: 43 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since we limit the span of non-terminal labels , we can constrain the search performed by the parser , greatly reduce the CYK processing time
	Cause: we limit the span of non-terminal labels
	Effect: we can constrain the search performed by the parser , greatly reduce the CYK processing

CASE: 16
Stag: 48 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: Further , if the binarization systematically groups the leftmost or the rightmost children under these new non-terminals -LRB- the most common strategy -RRB- , then constituents with span greater than L will either begin at the first word -LRB- leftmost grouping -RRB- or end at the last word -LRB- rightmost -RRB- , further constraining the number of cells in the chart requiring work
	Cause: the binarization systematically groups the leftmost or the rightmost children under these new non-terminals -LRB- the most common strategy -RRB-
	Effect: constituents with span greater than L will either begin at the first word -LRB- leftmost grouping -RRB- or end at the last word -LRB- rightmost -RRB- , further constraining the number of cells in the chart requiring work

CASE: 17
Stag: 56 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Note also that these latter cells -LRB- spanning L words -RRB- may be less expensive , as the set of possible non-terminals is reduced to only those introduced by binarization
	Cause: the set of possible non-terminals is reduced to only those introduced by binarization
	Effect: these latter cells -LRB- spanning L words -RRB- may be less expensive

CASE: 18
Stag: 57 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: It is possible to parse with a standardly induced PCFG using this sort of hedge constrained parsing that only considers a subset of the chart cells , and speedups are achieved , however this is clearly non-optimal , since the model is ill-suited to combining hedges into flat structures at the root of the tree
	Cause: the model is ill-suited to combining hedges into flat structures at the root of the tree
	Effect: It is possible to parse with a standardly induced PCFG using this sort of hedge constrained parsing that only considers a subset of the chart cells , and speedups are achieved , however this is clearly non-optimal

CASE: 19
Stag: 58 
	Pattern: 4 [['result'], ['is']]---- [['&C', '(,/./;/--)', '&ONE', '(&adj)'], ['(of &THIS (&NP))'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: Space constraints preclude inclusion of trials with this method , but the net result is a severe degradation in accuracy -LRB- tens of points of F-measure -RRB- versus standard parsing
	Cause: Space constraints preclude inclusion of trials with this method , but
	Effect: a severe degradation in accuracy -LRB- tens of points of F-measure -RRB- versus standard parsing

CASE: 20
Stag: 58 59 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Space constraints preclude inclusion of trials with this method , but the net result is a severe degradation in accuracy -LRB- tens of points of F-measure -RRB- versus standard parsing Thus , we train a grammar in a matched condition , which we call it a hedgebank grammar
	Cause: Space constraints preclude inclusion of trials with this method , but the net result is a severe degradation in accuracy -LRB- tens of points of F-measure -RRB- versus standard parsing
	Effect: , we train a grammar in a matched condition , which we call it a hedgebank grammar

CASE: 21
Stag: 63 64 
	Pattern: 0 [[['enable', 'enables', 'enabled']]]---- [['&C', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['&NP@R@', '&TODO@R@']]
	sentTXT: A unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially connected to the top-most node This property enables us to chunk the sentence into segments that correspond to complete hedges , and parse the segments independently -LRB- and simultaneously -RRB- instead of parsing the entire sentence
	Cause: A unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially connected to the top-most node
	Effect: us to chunk the sentence into segments that correspond to complete hedges , and parse the segments independently -LRB- and simultaneously -RRB- instead of parsing the entire sentence

CASE: 22
Stag: 69 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: We treat this as a binary classification task which decides if a word can begin a new hedge
	Cause: a word can begin a new hedge
	Effect: We treat this as a binary classification task which decides

CASE: 23
Stag: 70 71 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use hedge segmentation as a finite-state pre-processing step for hedge context-free parsing Our task is to learn which words can begin -LRB- B -RRB- a hedge constituent
	Cause: a finite-state pre-processing step for hedge context-free parsing Our task is to learn which words can begin -LRB- B -RRB- a hedge
	Effect: We use hedge segmentation

CASE: 24
Stag: 72 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: Given a set of labeled pairs -LRB- S , H -RRB- where S is a sentence of n words w 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' w n and H is its hedge parse tree , word w b belongs to B if there is a hedge constituent spanning w b u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' w e for some e u ' \ u2265 ' b and w b belongs to B otherwise
	Cause: there is a hedge constituent spanning w b
	Effect: Given a set of labeled pairs -LRB- S , H -RRB- where S is a sentence of n words w 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' w n and H is its hedge parse tree , word w b belongs to B

CASE: 25
Stag: 76 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We restrict the types to the most important types u ' \ u2013 ' following the 11 chunk types annotated in the CoNLL-2000 chunking task -LSB- 11 -RSB- u ' \ u2013 ' by replacing all other types with a new type OUT
	Cause: replacing all other types with a new type OUT
	Effect: We restrict the types to the most important types u ' \ u2013 ' following the 11 chunk types annotated in the CoNLL-2000 chunking task -LSB- 11 -RSB- u ' \ u2013 '

CASE: 26
Stag: 76 77 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: We restrict the types to the most important types u ' \ u2013 ' following the 11 chunk types annotated in the CoNLL-2000 chunking task -LSB- 11 -RSB- u ' \ u2013 ' by replacing all other types with a new type OUT Thus , u ' \ u201c ' Analysts u ' \ u201d ' is labeled B G ; u ' \ u201c ' much u ' \ u201d ' , B u ' \ ud835 ' u ' \ udc41 ' u ' \ ud835 ' u ' \ udc43 ' ; u ' \ u201c ' will u ' \ u201d ' , B u ' \ ud835 ' u ' \ udc49 ' u ' \ ud835 ' u ' \ udc43 ' and so on
	Cause: We restrict the types to the most important types u ' \ u2013 ' following the 11 chunk types annotated in the CoNLL-2000 chunking task -LSB- 11 -RSB- u ' \ u2013 ' by replacing all other types with a new type OUT
	Effect: , u ' \ u201c ' Analysts u ' \ u201d ' is labeled B G ; u ' \ u201c ' much u ' \ u201d ' , B u ' \ ud835 ' u ' \ udc41 ' u ' \ ud835 ' u ' \ udc43 ' ; u ' \ u201c ' will u ' \ u201d ' , B u ' \ ud835 ' u ' \ udc49 ' u ' \ ud835 ' u ' \ udc43 ' and so on

CASE: 27
Stag: 91 92 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Segmentation accuracy is reported as an F1-score of unlabeled segment bracketing We ran timing tests on an Intel 2.66 GHz processor with 3MB of cache and 2GB of memory
	Cause: an F1-score of unlabeled segment bracketing We ran timing tests on an Intel 2.66 GHz processor with 3MB of cache and 2GB of
	Effect: Segmentation accuracy is reported

CASE: 28
Stag: 93 
	Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Note that segmentation time is negligible compared to the parsing time , hence is omitted in reported time
	Cause: Note that segmentation time is negligible compared to the parsing time
	Effect: is omitted in reported time

CASE: 29
Stag: 94 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Efficiency results are reported as number of words parsed per second -LRB- w/s
	Cause: number of words parsed per second -LRB-
	Effect: Efficiency results are reported

CASE: 30
Stag: 101 102 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The final two rows show performance with automatic segmentation , using a model that includes either unlabeled or labeled segmentation tags , as described in the last section Segmentation accuracy is better for the model with labels , although overall that accuracy is rather low
	Cause: described in the last section Segmentation accuracy is better for the model with labels ,
	Effect: The final two rows show performance with automatic segmentation , using a model that includes either unlabeled or labeled segmentation tags

CASE: 31
Stag: 105 106 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The results show the same patterns as on the development set Finally , Figure 3 shows the speed of inference , labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser
	Cause: on the development set Finally , Figure 3 shows the speed of inference , labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline
	Effect: The results show the same patterns

CASE: 32
Stag: 106 107 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Finally , Figure 3 shows the speed of inference , labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser Keep in mind that the number of reference constituents increases as L increases , hence both precision and recall can decrease as the parameter grows
	Cause: a function of the maximum span parameter L , versus the baseline parser Keep in mind that the number of reference constituents increases as L increases , hence both precision and recall can decrease as the parameter grows
	Effect: Finally , Figure 3 shows the speed of inference , labeled precision and labeled recall of annotating hedge constituents on the test set

CASE: 33
Stag: 107 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Keep in mind that the number of reference constituents increases as L increases , hence both precision and recall can decrease as the parameter grows
	Cause: L increases , hence both precision and recall can decrease as the parameter grows
	Effect: the number of reference constituents increases

CASE: 34
Stag: 107 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: L increases , hence both precision and recall can decrease as the parameter grows
	Cause: the parameter grows
	Effect: L increases , hence both precision and recall can decrease

CASE: 35
Stag: 109 
	Pattern: 0 [[['concern', 'concerns', 'concerned', 'require', 'requires', 'required', 'request', 'requests', 'requested']]]---- [['&R', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['(about)', '&V-ing/&NP@C@']]
	sentTXT: We proposed a novel partial parsing approach for applications that require a fast syntactic analysis of the input beyond shallow bracketing
	Cause: a fast syntactic analysis of the input beyond shallow bracketing
	Effect: We proposed a novel partial parsing approach for applications

