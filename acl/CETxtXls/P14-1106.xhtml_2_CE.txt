************************************************************
P14-1106.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 0 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: This paper explores a simple and effective unified framework for incorporating soft linguistic reordering constraints into a hierarchical phrase-based translation system
	Cause: incorporating soft linguistic reordering constraints into a hierarchical phrase-based translation system
	Effect: This paper explores a simple and effective unified framework

CASE: 1
Stag: 2 3 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We develop novel features based on both models and use them as soft constraints to guide the translation process Experiments on Chinese-English translation show that the reordering approach can significantly improve a state-of-the-art hierarchical phrase-based translation system
	Cause: soft constraints to guide the translation process Experiments on Chinese-English translation show that the reordering approach can significantly improve a state-of-the-art hierarchical phrase-based translation system
	Effect: We develop novel features based on both models and use them

CASE: 2
Stag: 4 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: However , the gain achieved by the semantic reordering model is limited in the presence of the syntactic reordering model , and we therefore provide a detailed analysis of the behavior differences between the two
	Cause: , the gain achieved by the semantic reordering model is limited in the presence of the syntactic reordering model , and we
	Effect: provide a detailed analysis of the behavior differences between the two

CASE: 3
Stag: 6 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: The popular distortion or lexicalized reordering models in phrase-based SMT make good local predictions by focusing on reordering on word level , while the synchronous context free grammars in hierarchical phrase-based -LRB- HPB -RRB- translation models are capable of handling non-local reordering on the translation phrase level
	Cause: focusing on reordering on word level
	Effect: , while the synchronous context free grammars in hierarchical phrase-based -LRB- HPB -RRB- translation models are capable of handling non-local reordering on the translation phrase level

CASE: 4
Stag: 7 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: However , reordering , especially without any help of external knowledge , remains a great challenge because an accurate reordering is usually beyond these word level or translation phrase level reordering models u ' \ u2019 ' ability
	Cause: an accurate reordering is usually beyond these word level or translation phrase
	Effect: However , reordering , especially without any help of external knowledge , remains a great challenge

CASE: 5
Stag: 8 9 
	Pattern: 3 [['as', 'a'], ['result']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(&ADJ)'], ['(,)', '&R']]
	sentTXT: In addition , often these translation models fail to respect linguistically-motivated syntax and semantics As a result , they tend to produce translations containing both syntactic and semantic reordering confusions
	Cause: In addition , often these translation models fail to respect linguistically-motivated syntax and semantics
	Effect: they tend to produce translations containing both syntactic and semantic reordering confusions

CASE: 6
Stag: 17 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Due to the fact that a constituent , especially a long one , usually maps into multiple discontinuous blocks in the target language , there is more than one way to describe the monotonicity or swapping patterns ; we therefore design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word
	Cause: to the fact that a constituent , especially a long one , usually maps into multiple discontinuous blocks in the target language , there is more than one way to describe the monotonicity or swapping patterns ; we
	Effect: design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word

CASE: 7
Stag: 17 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: design two reordering models one is based on the leftmost aligned target word and the other based on the rightmost target word
	Cause: the rightmost target word
	Effect: design two reordering models one is based on the leftmost aligned target word and the other

CASE: 8
Stag: 17 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: design two reordering models one is based on the leftmost aligned target word and the other
	Cause: the leftmost aligned target word and the other
	Effect: design two reordering models one is

CASE: 9
Stag: 19 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: PAS -RRB- reordering in SMT , it is still an open question whether semantic structure reordering strongly overlaps with syntactic structure reordering , since the semantic structure is closely tied to syntax
	Cause: the semantic structure is closely tied to syntax
	Effect: PAS -RRB- reordering in SMT , it is still an open question whether semantic structure reordering strongly overlaps with syntactic structure reordering

CASE: 10
Stag: 38 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: The syntactic reordering model takes a CFG rule -LRB- e.g. , , VP u ' \ u2192 ' VP u ' \ u2062 ' PP u ' \ u2062 ' PP -RRB- and models the reordering of the constituents on the left hand side by examining their translation or visit order according to the target language
	Cause: the target language
	Effect: The syntactic reordering model takes a CFG rule -LRB- e.g. , , VP u ' \ u2192 ' VP u ' \ u2062 ' PP u ' \ u2062 ' PP -RRB- and models the reordering of the constituents on the left hand side by examining their translation or visit order

CASE: 11
Stag: 41 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Note that we refer all core arguments , adjuncts , and predicates as semantic roles ; thus we say the PAS in Figure 1 has 4 roles
	Cause: Note that we refer all core arguments , adjuncts , and predicates as semantic roles
	Effect: we say the PAS in Figure 1 has 4 roles

CASE: 12
Stag: 42 
	Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
	sentTXT: According to the annotation principles in -LRB- Chinese -RRB- PropBank -LSB- 28 , 42 -RSB- , all the roles in a PAS map to a corresponding constituent in the parse tree , and these constituents -LRB- e.g. , , NPs and VBD in Figure 1 -RRB- do not overlap with each other
	Cause: the annotation principles in -LRB- Chinese -RRB- PropBank
	Effect: 42 -RSB- , all the roles in a PAS map to a corresponding constituent in the parse tree , and these constituents -LRB- e.g. , , NPs and VBD in Figure 1 -RRB- do not overlap with each

CASE: 13
Stag: 44 
	Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
	sentTXT: Treating the two forms of reorderings in a unified way , the semantic reordering model is obtainable by regarding a PAS as a CFG rule and considering a semantic role as a constituent
	Cause: Treating the two forms of reorderings in a unified way
	Effect: the semantic reordering model is obtainable by regarding a PAS as a CFG rule and considering a semantic role as a constituent

CASE: 14
Stag: 44 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: the semantic reordering model is obtainable by regarding a PAS as a CFG rule and considering a semantic role as a constituent
	Cause: regarding a PAS as a CFG rule and considering a semantic role as a constituent
	Effect: the semantic reordering model is obtainable

CASE: 15
Stag: 45 
	Pattern: 18 [['because'], [',']]---- [[], ['&C'], ['&R']]
	sentTXT: Because the translation of a source constituent might result in multiple discontinuous blocks , there can be several ways to describe or group the reordering patterns
	Cause: the translation of a source constituent might result in multiple discontinuous blocks
	Effect: there can be several ways to describe or group the reordering patterns

CASE: 16
Stag: 45 46 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Because the translation of a source constituent might result in multiple discontinuous blocks , there can be several ways to describe or group the reordering patterns Therefore , we design two general constituent reordering sub-models
	Cause: Because the translation of a source constituent might result in multiple discontinuous blocks , there can be several ways to describe or group the reordering patterns
	Effect: we design two general constituent reordering sub-models

CASE: 17
Stag: 47 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: One is based on the leftmost aligned word -LRB- leftmost reordering model -RRB- and the other is based on the rightmost aligned word -LRB- rightmost reordering model -RRB- , as follows
	Cause: the rightmost aligned word -LRB- rightmost reordering model -RRB-
	Effect: as follows

CASE: 18
Stag: 54 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: if the first constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 is unaligned , we add a NULL word at the beginning of the target side and link u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 to the NULL word ;
	Cause: the first constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 is unaligned
	Effect: we add a NULL word at the beginning of the target side and link u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 to the NULL word ;

CASE: 19
Stag: 55 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: if a constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i -LRB- i 1 -RRB- is unaligned , we add a link to the target word which is aligned to u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i - 1 , e.g. , , u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 4 will be linked to e 3 ; and
	Cause: a constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i -LRB- i 1 -RRB- is unaligned
	Effect: we add a link to the target word which is aligned to u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i - 1 , e.g. , , u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 4 will be linked to e 3 ; and

CASE: 20
Stag: 56 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: if k constituents u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' m 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' m k -LRB- m 1 u ' \ u2026 ' m k -RRB- are linked to the same target word , then v m i = v m i + 1 - 1 , e.g. , , since u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 3 and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 4 are both linked to e 3 , then v 3 = v 4 - 1
	Cause: u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 3 and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 4 are both linked to e 3
	Effect: then v 3 = v 4 - 1

CASE: 21
Stag: 65 
	Pattern: 0 [[['indicate', 'indicates', 'indicated', 'realize', 'realizes', 'realized', 'ensure', 'ensures', 'ensured', 'imply', 'implies', 'implied']]]---- [['&NP@C@', '(&Clause@C@)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: where u ' \ u03a8 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc50 ' u ' \ ud835 ' u ' \ udc53 ' u ' \ ud835 ' u ' \ udc54 ' -RRB- indicates the surrounding context of the CFG
	Cause: u ' \ u03a8 ' u ' \ u2062 ' -LRB- u ' \ ud835 ' u ' \ udc50 ' u ' \ ud835 ' u ' \ udc53 ' u ' \ ud835 ' u ' \ udc54 ' -RRB-
	Effect: the surrounding context of the CFG

CASE: 22
Stag: 66 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: By assuming that any two reordering types in u ' \ ud835 ' u ' \ udc3f ' u ' \ ud835 ' u ' \ udc45 ' u ' \ ud835 ' u ' \ udc47 ' = -LCB- l u ' \ u2062 ' r u ' \ u2062 ' t 1 , u ' \ u2026 ' , l u ' \ u2062 ' r u ' \ u2062 ' t n - 1 -RCB- are independent of each other , we reformulate Eq
	Cause: assuming that any two reordering types in u ' \ ud835 ' u ' \ udc3f ' u ' \ ud835 ' u ' \ udc45 ' u ' \ ud835 ' u ' \ udc47 ' = -LCB- l u ' \ u2062 ' r u ' \ u2062 ' t 1 , u ' \ u2026 ' , l u ' \ u2062 ' r u ' \ u2062 ' t n - 1 -RCB- are independent of each other
	Effect: , we reformulate Eq

CASE: 23
Stag: 68 69 
	Pattern: 2 [['accordingly']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Similarly , the sequence of rightmost reordering types RRT can be decided for a CFG rule u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' u ' \ u2192 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' n Accordingly , for a PAS pas u ' \ ud835 ' u ' \ udc43 ' u ' \ ud835 ' u ' \ udc34 ' u ' \ ud835 ' u ' \ udc46 ' u ' \ u2192 ' u ' \ ud835 ' u ' \ udc45 ' 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' u ' \ ud835 ' u ' \ udc45 ' n , we can obtain its sequences of leftmost and rightmost reordering types by using the same way described above
	Cause: Similarly , the sequence of rightmost reordering types RRT can be decided for a CFG rule u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' u ' \ u2192 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' n
	Effect: for a PAS pas u ' \ ud835 ' u ' \ udc43 ' u ' \ ud835 ' u ' \ udc34 ' u ' \ ud835 ' u ' \ udc46 ' u ' \ u2192 ' u ' \ ud835 ' u ' \ udc45 ' 1 u ' \ u2062 ' u ' \ u2026 ' u ' \ u2062 ' u ' \ ud835 ' u ' \ udc45 ' n , we can obtain its sequences of leftmost and rightmost reordering types by using the same way described above

CASE: 24
Stag: 73 74 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: For u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 in cfg , the features are aimed to examine which of them should be translated first Therefore , most features share two common components the syntactic categories of u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1
	Cause: For u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 in cfg , the features are aimed to examine which of them should be translated first
	Effect: most features share two common components the syntactic categories of u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i and u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1

CASE: 25
Stag: 81 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Unlike the conventional phrase and lexical translation features , whose values are phrase pair-determined and thus can be calculated offline , the value of the reordering features can only be obtained during decoding time , and requires word alignment information as well
	Cause: Unlike the conventional phrase and lexical translation features , whose values are phrase pair-determined
	Effect: can be calculated offline , the value of the reordering features can only be obtained during decoding time , and requires word alignment information as well

CASE: 26
Stag: 82 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: Before we present the algorithm integrating the reordering models , we define the following functions by assuming XP i and XP i + 1 are the constituent pair of interest in CFG rule cfg , H is the translation hypothesis and a is its word alignment
	Cause: assuming XP i
	Effect: and XP i + 1 are the constituent pair of interest in CFG rule cfg , H is the translation hypothesis and a is its word alignment

CASE: 27
Stag: 84 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: u ' \ u2131 ' 2 u ' \ u2062 ' -LRB- H , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc50 ' u ' \ ud835 ' u ' \ udc53 ' u ' \ ud835 ' u ' \ udc54 ' , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 -RRB- returns true if the reordering of the pair u ' \ u27e8 ' XP i , XP i + 1 u ' \ u27e9 ' in rule cfg has not been calculated yet ; otherwise returns false
	Cause: the reordering of the pair u ' \ u27e8 ' XP i , XP i + 1 u ' \ u27e9 ' in rule cfg has not been calculated
	Effect: u ' \ u2131 ' 2 u ' \ u2062 ' -LRB- H , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc50 ' u ' \ ud835 ' u ' \ udc53 ' u ' \ ud835 ' u ' \ udc54 ' , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 -RRB- returns true

CASE: 28
Stag: 85 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: u ' \ u2131 ' 3 u ' \ u2062 ' -LRB- H , u ' \ u2006 ' a , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 -RRB- returns the leftmost and rightmost reordering types for the constituent pair u ' \ u27e8 ' XP i , XP i + 1 u ' \ u27e9 ' , given alignment a , according to Section 3
	Cause: Section 3
	Effect: u ' \ u2131 ' 3 u ' \ u2062 ' -LRB- H , u ' \ u2006 ' a , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i , u ' \ u2006 ' u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i + 1 -RRB- returns the leftmost and rightmost reordering types for the constituent pair u ' \ u27e8 ' XP i , XP i + 1 u ' \ u27e9 ' , given alignment a

CASE: 29
Stag: 89 
	Pattern: 0 [['if']]---- [['&R@Complete@'], ['&C@Complete@']]
	sentTXT: Given a hypothesis H with its alignment a , it traverses all CFG rules in the parse tree and sees if two adjacent constituents are conditioned to trigger the reordering models -LRB- lines 2-4
	Cause: two adjacent constituents are conditioned to trigger the reordering models -LRB- lines 2-4
	Effect: Given a hypothesis H with its alignment a , it traverses all CFG rules in the parse tree and sees

CASE: 30
Stag: 92 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Note that Function u ' \ u2131 ' 1 returns true if hypothesis H fully covers , or fully contains , constituent X u ' \ u2062 ' P i , regardless of the reordering type of X u ' \ u2062 ' P i
	Cause: hypothesis H fully covers
	Effect: or fully contains , constituent X u ' \ u2062 ' P i , regardless of the reordering type of X u ' \ u2062 '

CASE: 31
Stag: 95 96 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: To get the two semantic reordering model feature values , we simply use Algorithm 1 and its associated functions from u ' \ u2131 ' 1 to u ' \ u2131 ' 5 replacing a CFG rule cfg with a PAS pas , and a constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i with a semantic role u ' \ ud835 ' u ' \ udc45 ' i Algorithm 1 therefore permits a unified treatment of syntactic and PAS-based reordering , even though it is expressed in terms of syntactic reordering here for ease of presentation
	Cause: get the two semantic reordering model feature values , we simply use Algorithm 1 and its associated functions from u ' \ u2131 ' 1 to u ' \ u2131 ' 5 replacing a CFG rule cfg with a PAS pas , and a constituent u ' \ ud835 ' u ' \ udc4b ' u ' \ ud835 ' u ' \ udc43 ' i with a semantic role u ' \ ud835 ' u ' \ udc45 ' i Algorithm 1
	Effect: permits a unified treatment of syntactic and PAS-based reordering , even though it is expressed in terms of syntactic reordering here for ease of presentation

CASE: 32
Stag: 111 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since the syntactic parses of the tuning and test data contain 29 types of constituent labels and 35 types of POS tags , we have 29 types of XP + features and 64 types of XP = features
	Cause: the syntactic parses of the tuning and test data contain 29 types of constituent labels and 35 types of POS tags
	Effect: we have 29 types of XP + features and 64 types of XP = features

CASE: 33
Stag: 117 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We first run syntactic parsing and semantic role labeling on the Chinese sentences , then train the models by using MaxEnt toolkit with L1 regularizer -LSB- 34 -RSB-
	Cause: using MaxEnt toolkit with L1 regularizer -LSB-
	Effect: We first run syntactic parsing and semantic role labeling on the Chinese sentences , then train the models

CASE: 34
Stag: 122 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: In order to understand how well the MR08 system respects their reordering preference , we use the gold alignment dataset LDC2006E86 , in which the source sentences are from the Chinese Treebank , and thus both the gold parse trees and gold predicate-argument structures are available
	Cause: In order to understand how well the MR08 system respects their reordering preference , we use the gold alignment dataset LDC2006E86 , in which the source sentences are from the Chinese Treebank
	Effect: both the gold parse trees and gold predicate-argument structures are available

CASE: 35
Stag: 124 
	Pattern: 0 [['based', 'on'], [',']]---- [[], ['&V-ing/&NP@C@', '(&Clause@C@)'], ['&R']]
	sentTXT: For example , the first row shows that based on the gold alignment , for u ' \ u27e8 ' PP , VP u ' \ u27e9 ' , 16 % are in monotone and 76 % are in swap reordering
	Cause: the gold alignment
	Effect: for u ' \ u27e8 ' PP , VP u ' \ u27e9 ' , 16 % are in monotone and 76 % are in swap

CASE: 36
Stag: 125 126 
	Pattern: 7 [['hence']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: However , our MR08 system outputs 46 % of them in monotone and and 50 % in swap reordering Hence , the reordering accuracy for u ' \ u27e8 ' PP , VP u ' \ u27e9 ' is 54 %
	Cause: However , our MR08 system outputs 46 % of them in monotone and and 50 % in swap reordering
	Effect: the reordering accuracy for u ' \ u27e8 ' PP , VP u ' \ u27e9 ' is 54 %

CASE: 37
Stag: 144 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The trend of the results , summarized as performance gain over the baseline and MR08 systems averaged over all test sets , is presented in Table 6
	Cause: performance gain over the baseline and MR08 systems averaged over all test sets , is presented in Table 6
	Effect: The trend of the results , summarized

CASE: 38
Stag: 150 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: This is not surprising since the semantic reordering features are exclusively attached to predicates , and the span set of the semantic roles is a strict subset of the span set of the syntactic constituents ; only 22 % of syntactic constituents are semantic roles
	Cause: the semantic reordering features are exclusively attached to predicates
	Effect: and the span set of the semantic roles is a strict subset of the span set of the syntactic constituents ; only 22 % of syntactic constituents are semantic roles

CASE: 39
Stag: 152 153 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: Of all the semantic role pairs , 44 % are in the same CFG rules , indicating that this part of semantic reordering has overlap with syntactic reordering Therefore , the PAS model has fewer opportunities to influence reordering
	Cause: Of all the semantic role pairs , 44 % are in the same CFG rules , indicating that this part of semantic reordering has overlap with syntactic reordering
	Effect: the PAS model has fewer opportunities to influence reordering

CASE: 40
Stag: 159 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Once we have the -LRB- semi - -RRB- gold alignment , we compute the gold reordering types between two adjacent syntactic constituents or semantic roles
	Cause: we have the -LRB- semi - -RRB- gold alignment
	Effect: we compute the gold reordering types between two adjacent syntactic constituents or semantic roles

CASE: 41
Stag: 161 162 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Table 7 shows the accuracy averaged over the four gold reordering sets -LRB- the four reference translations It shows that 1 -RRB- as expected , our classifiers do worse on the harder semantic reordering prediction than syntactic reordering prediction ; 2 -RRB- thanks to the high accuracy obtained by the maxent classifiers , integrating either the syntactic or the semantic reordering constraints results in better reordering performance from both syntactic and semantic perspectives ; 3 -RRB- in terms of the mutual impact , the syntactic reordering models help improving semantic reordering more than the semantic reordering models help improving syntactic reordering ; and 4 -RRB- the rightmost models have a learnability advantage over the leftmost models , achieving higher accuracy across the board
	Cause: expected , our classifiers do worse on the harder semantic reordering prediction than syntactic reordering prediction ; 2 -RRB- thanks to the high accuracy obtained by the maxent classifiers , integrating either the syntactic or the semantic reordering constraints results in better reordering performance from both syntactic and semantic perspectives ; 3 -RRB- in terms of the mutual impact , the syntactic reordering models help improving semantic reordering more than the semantic reordering models help improving syntactic reordering ; and 4 -RRB- the rightmost models have a learnability advantage over the leftmost models , achieving higher accuracy across the board
	Effect: Table 7 shows the accuracy averaged over the four gold reordering sets -LRB- the four reference translations It shows that 1 -RRB-

CASE: 42
Stag: 171 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: We report the averaged performance by using the gold reordering type extracted from the four reference translations
	Cause: using the gold reordering type extracted from the four reference translations
	Effect: We report the averaged performance

CASE: 43
Stag: 174 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: 33.4 on average -RRB- and there is still some room for improvement by building a better maximum entropy classifiers -LRB- e.g. , , 34.9 vs
	Cause: building a better maximum
	Effect: entropy classifiers -LRB- e.g. , , 34.9 vs

CASE: 44
Stag: 180 
	Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
	sentTXT: Some previous work pre-ordered words in the source sentences , so that the word order of source and target sentences is similar
	Cause: Some previous work pre-ordered words in the source sentences ,
	Effect: the word order of source and target sentences is similar

CASE: 45
Stag: 184 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: -LSB- 44 -RSB- obtained word order by using a reranking approach to reposition nodes in syntactic parse trees
	Cause: using a reranking approach to reposition nodes in syntactic parse trees
	Effect: -LSB- 44 -RSB- obtained word order

CASE: 46
Stag: 195 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: 4 4 Note that they obtained the translation order of source word pairs by predicting the reordering of adjacent constituents , which was quite close to our work
	Cause: predicting the reordering of adjacent constituents , which was quite close to our work
	Effect: 4 4 Note that they obtained the translation order of source word pairs

CASE: 47
Stag: 196 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: Our work , which shares this approach , differs from their work primarily in that our syntactic reordering models are based on the constituent level , rather than the word level
	Cause: the constituent level , rather than the word level
	Effect: Our work , which shares this approach , differs from their work primarily in that our syntactic reordering models are

CASE: 48
Stag: 214 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Although there are overlaps between translation phrases and syntactic constituents , it is reasonable to think that the two reordering approaches can work together well and even complement each other , as the linguistic patterns they capture differ substantially
	Cause: the linguistic patterns they capture differ substantially
	Effect: Although there are overlaps between translation phrases and syntactic constituents , it is reasonable to think that the two reordering approaches can work together well and even complement each other

CASE: 49
Stag: 229 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: The authors would like to thank three anonymous reviewers for providing helpful comments , and also acknowledge Ke Wu , Vladimir Eidelman , Hua He , Doug Oard , Yuening Hu , Jordan Boyd-Graber , and Jyothi Vinjumur for useful discussions
	Cause: providing helpful comments
	Effect: The authors would like to thank three anonymous reviewers

