************************************************************
P14-2128.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 1 
	Pattern: 0 [[['lead', 'leads', 'led'], 'to']]---- [['&V-ing/&NP@C@', '(&CAN/have/has/had)'], ['&NP@R@', '(&Clause@R@)']]
	sentTXT: Punctuation parsing errors lead to low parsing accuracy on words
	Cause: Punctuation parsing errors
	Effect: low parsing accuracy on words

CASE: 1
Stag: 3 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Rather than assigning lexical heads to punctuations , we treat punctuations as properties of their neighbouring words , used as features to guide the parser to build the dependency graph
	Cause: properties of their neighbouring words , used as features to guide the parser to build the dependency
	Effect: Rather than assigning lexical heads to punctuations , we treat punctuations

CASE: 2
Stag: 3 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: properties of their neighbouring words , used as features to guide the parser to build the dependency
	Cause: features to guide the parser to
	Effect: properties of their neighbouring words , used

CASE: 3
Stag: 9 10 
	Pattern: 9 [['consequently']]---- [['&C', '(,/;/./--)'], ['(,)', '&R']]
	sentTXT: First , the lexical heads of punctuations are not as well defined as those of words Consequently , punctuations are not as consistently annotated in treebanks as words , making it harder to parse punctuations
	Cause: First , the lexical heads of punctuations are not as well defined as those of words
	Effect: punctuations are not as consistently annotated in treebanks as words , making it harder to parse punctuations

CASE: 4
Stag: 13 14 
	Pattern: 1 [['reason'], [['that', 'because']]]---- [['&R', '(,/./;/--)', '&ONE', '(&ADJ)'], ['(for &THIS (&NP))', '&BE'], ['&C']]
	sentTXT: Moreover , experimental results showed that parsing accuracy of content words drops on sentences which contain higher ratios of punctuations One reason for this result is that projective dependency parsers satisfy the u ' \ u201c ' no crossing links u ' \ u201d ' constraint , and errors in punctuations may prevent correct word-word dependencies from being created -LRB- see section 2
	Cause: projective dependency parsers satisfy the u ' \ u201c ' no crossing links u ' \ u201d ' constraint , and errors in punctuations may prevent correct word-word dependencies from being created -LRB- see section 2
	Effect: Moreover , experimental results showed that parsing accuracy of content words drops on sentences which contain higher ratios of punctuations

CASE: 5
Stag: 20 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: The fact that most previous work evaluates parsing accuracies without taking punctuations into account is also largely due to this reason
	Cause: this reason
	Effect: The fact that most previous work evaluates parsing accuracies without taking punctuations into account is also largely

CASE: 6
Stag: 26 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Although the improvement becomes smaller as the beam width grows larger , we still achieved 93.06 u ' \ u2062 ' % UAS with a beam of width 64 , which is the best result for transition-based parsers reported so far
	Cause: the beam width grows larger , we still achieved 93.06 u ' \ u2062 ' % UAS with a beam of width 64 , which is the best result for transition-based parsers reported so
	Effect: the improvement becomes smaller

CASE: 7
Stag: 29 30 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We use the Wall Street Journal portion of the Penn Treebank with the standard splits sections 02-21 are used as the training set ; section 22 and section 23 are used as the development and test set , respectively Penn2Malt is used to convert bracketed structures into dependencies
	Cause: the training set ; section 22 and section 23 are used as the development and test set , respectively Penn2Malt is used to convert bracketed structures into
	Effect: We use the Wall Street Journal portion of the Penn Treebank with the standard splits sections 02-21 are used

CASE: 8
Stag: 41 42 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: We can see that although all the parsers achieve above 90 u ' \ u2062 ' % UAS on words , the UAS on punctuations are mostly below 85 u ' \ u2062 ' % As for learning , we calculate the percentage of parameter updates that are caused by associating punctuations with incorrect heads during training of the easy-first parser 3 3 For the greedy easy-first parser , whether a parameter update is caused by punctuation error can be determined with no ambiguity
	Cause: for learning , we calculate the percentage of parameter updates that are caused by associating punctuations with incorrect heads during training of the easy-first parser 3 3 For the greedy easy-first parser , whether a parameter
	Effect: We can see that although all the parsers achieve above 90 u ' \ u2062 ' % UAS on words , the UAS on punctuations are mostly below 85 u ' \ u2062 ' %

CASE: 9
Stag: 42 43 
	Pattern: 4 [['result'], ['is', 'that']]---- [['&C', '(,/./;/--)', '&ONE', '(&adj)'], ['(of &THIS (&NP))'], ['&R']]
	sentTXT: As for learning , we calculate the percentage of parameter updates that are caused by associating punctuations with incorrect heads during training of the easy-first parser 3 3 For the greedy easy-first parser , whether a parameter update is caused by punctuation error can be determined with no ambiguity The result is that more than 31 u ' \ u2062 ' % of the parameter updates are caused due to punctuations , though punctuations account for only 11.6 u ' \ u2062 ' % of the total tokens in the training set
	Cause: As for learning , we calculate the percentage of parameter updates that are caused by associating punctuations with incorrect heads during training of the easy-first parser 3 3 For the greedy easy-first parser , whether a parameter update is caused by punctuation error can be determined with no ambiguity
	Effect: more than 31 u ' \ u2062 ' % of the parameter updates are caused due to punctuations , though punctuations account for only 11.6

CASE: 10
Stag: 44 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: The fact that parsers achieve low accuracies on punctuations is to some degree expected , because the head of a punctuation mark is linguistically less well-defined
	Cause: the head of a punctuation mark is linguistically less well-defined
	Effect: The fact that parsers achieve low accuracies on punctuations is to some degree expected

CASE: 11
Stag: 48 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since long sentences are inherently more difficult to parse , to make a fair comparison , we further divide the development set according to sentence lengths as shown in the first row 4 4 1694 out of 1700 sentences on the development set with length no larger than 60 tokens
	Cause: long sentences are inherently more difficult to parse
	Effect: to make a fair comparison , we further divide the development set according to sentence lengths as shown in the first row 4 4 1694 out of 1700 sentences on the development set with length no larger than 60 tokens

CASE: 12
Stag: 48 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: to make a fair comparison , we further divide the development set according to sentence lengths as shown in the first row 4 4 1694 out of 1700 sentences on the development set with length no larger than 60 tokens
	Cause: sentence lengths as
	Effect: to make a fair comparison , we further divide the development set

CASE: 13
Stag: 50 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: Note that this negative effect on parsing accuracy might be overlooked since most previous work evaluates parsing accuracy without taking punctuations into account
	Cause: most previous work evaluates parsing accuracy without taking punctuations into account
	Effect: Note that this negative effect on parsing accuracy might be overlooked

CASE: 14
Stag: 51 
	Pattern: 0 [[['lead', 'leads', 'led'], 'to']]---- [['&C', '(,/./;/--)', '&this', '(&adj)', '(&N)', '(&CAN/have/has/had)', '(&ADV)'], ['&NP@R@']]
	sentTXT: By inspecting the parser outputs , we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason that leads to this result
	Cause: By inspecting the parser outputs , we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason
	Effect: this result

CASE: 15
Stag: 51 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: By inspecting the parser outputs , we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason
	Cause: inspecting the parser outputs
	Effect: , we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason

CASE: 16
Stag: 51 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: , we found that error propagation caused by assigning incorrect head to punctuations is one of the main reason
	Cause: assigning incorrect head to punctuations
	Effect: is one of the main reason

CASE: 17
Stag: 52 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: Take the sentence shown in Figure 1 -LRB- a -RRB- for example , the word Mechanisms is a modifier of entitled according to the gold reference
	Cause: the gold reference
	Effect: Take the sentence shown in Figure 1 -LRB- a -RRB- for example , the word Mechanisms is a modifier of entitled

CASE: 18
Stag: 53 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: However , if the quotation mark , u ' \ u201c ' , is incorrectly recognized as a modifier of was , due to the u ' \ u201c ' no crossing links u ' \ u201d ' constraint , the arc between Mechanisms and entitled can never be created
	Cause: a modifier of was , due to the u ' \ u201c ' no crossing links u ' \ u201d ' constraint , the arc between Mechanisms and entitled can never be created
	Effect: the quotation mark , u ' \ u201c ' , is incorrectly recognized

CASE: 19
Stag: 53 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: a modifier of was , due to the u ' \ u201c ' no crossing links u ' \ u201d ' constraint , the arc between Mechanisms and entitled can never be created
	Cause: the u ' \ u201c ' no crossing links u
	Effect: ' \ u201d ' constraint , the arc between Mechanisms and entitled can never be created

CASE: 20
Stag: 56 
	Pattern: 2 [[[',', '.', ';', 'and']], ['accordingly']]---- [['&C'], ['&R']]
	sentTXT: In this experiment , we first remove all punctuations from the original data and then modify the dependency arcs accordingly in order to maintain word-word dependencies in the original data
	Cause: In this experiment , we first remove all punctuations from the original data
	Effect: then modify the dependency arcs

CASE: 21
Stag: 60 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: The result indicates that by removing punctuations , we lose some information that is important for dependency parsing
	Cause: removing punctuations
	Effect: , we lose some information that is important for dependency parsing

CASE: 22
Stag: 62 63 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Such properties are used as additional features to guide the parser to construct the dependency graph Our method distinguishes paired punctuations from other punctuations
	Cause: additional features to guide the parser to construct the dependency graph Our method distinguishes paired punctuations
	Effect: Such properties are used

CASE: 23
Stag: 68 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: To utilize such boundary information , we further classify paired punctuations into two categories those that serve as the beginning of the boundary , whose POS tags are either -LRB- or u ' \ u201c ' , denoted by Bpunc ; and those that serve as the end of the boundary , denoted by Epunc
	Cause: the beginning of the boundary , whose POS tags are either -LRB- or u ' \ u201c ' , denoted by Bpunc ; and those that serve as the end of the boundary , denoted by Epunc
	Effect: such boundary information , we further classify paired punctuations into two categories those that serve

CASE: 24
Stag: 72 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: In such cases , we simply remove these punctuations since the existence of paired punctuations already indicates that there should be a boundary
	Cause: the existence of paired punctuations already indicates that there should be a boundary
	Effect: In such cases , we simply remove these punctuations

CASE: 25
Stag: 83 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In the example , when Congrees u ' \ u2019 ' s is identified as a modifier of Buccaneers , the u ' \ u201d ' flag of Buccaneers is turned off
	Cause: a modifier of Buccaneers , the u ' \ u201d ' flag of Buccaneers is turned off
	Effect: Congrees u ' \ u2019 ' s is identified

CASE: 26
Stag: 84 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: However , we do not assign a Paired property to Buccaneers since its -LRB- flag is still on
	Cause: its -LRB- flag is still
	Effect: However , we do not assign a Paired property to Buccaneers

CASE: 27
Stag: 92 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: The only special case is that if w h already contains a Bpunc property , then our method simply ignores the non-paired property since we maintain the boundary information with the highest priority
	Cause: we maintain the boundary information with the highest priority
	Effect: The only special case is that if w h already contains a Bpunc property , then our method simply ignores the non-paired property

CASE: 28
Stag: 92 
	Pattern: 0 [['if'], ['then']]---- [[], ['&C', '(,)'], ['&R']]
	sentTXT: The only special case is that if w h already contains a Bpunc property , then our method simply ignores the non-paired property
	Cause: w h already contains a Bpunc property
	Effect: our method simply ignores the non-paired property

CASE: 29
Stag: 97 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: For example , the distance features in line 5 of Table 3 is used to capture the pattern that if a word w with comma property is the left modifier of a noun or a verb , the distance between w and its lexical head is often larger than 1
	Cause: a word w with comma property is the left modifier of a noun or a verb
	Effect: the distance between w and its lexical head is often larger than 1

CASE: 30
Stag: 107 108 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Our method is able to capture that the root , w h , of the sub-tree within the paired-punctuation , such as u ' \ u201c ' Mechanisms u ' \ u201d ' in Figure 1 , generally serves as a modifier of the words outside , while the baseline parser occasionally make w h as the head of the sentence As we increase the beam width , the improvement of our method over the baseline becomes smaller
	Cause: we increase the beam width , the improvement of our method over the baseline becomes smaller
	Effect: Our method is able to capture that the root , w h , of the sub-tree within the paired-punctuation , such as u ' \ u201c ' Mechanisms u ' \ u201d ' in Figure 1 , generally serves as a modifier of the words outside , while the baseline parser occasionally make w h as the head of the sentence

CASE: 31
Stag: 109 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: This is as expected , since beam search also has the effect of reducing error propagation -LSB- 15 -RSB- , thereby alleviating the errors caused by punctuations
	Cause: beam search also has the effect of reducing error propagation -LSB- 15 -RSB-
	Effect: thereby alleviating the errors caused by punctuations

CASE: 32
Stag: 115 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: However , the exact type of errors that are corrected by using non-paired punctuations is more difficult to summarize
	Cause: using non-paired punctuations
	Effect: is more difficult to summarize

CASE: 33
Stag: 120 121 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: In this work , we proposed to treat punctuations as properties of context words for dependency parsing Experiments with an arc-standard parser showed that our method effectively improves parsing performance and we achieved the best accuracy for single-model transition-based parser
	Cause: properties of context words for dependency parsing Experiments with an arc-standard parser showed that our method effectively improves parsing performance and we achieved the best accuracy for single-model transition-based
	Effect: In this work , we proposed to treat punctuations

