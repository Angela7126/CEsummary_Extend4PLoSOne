************************************************************
P14-1142.xhtml_2_CE.txt: Cause-Effect links
************************************************************

CASE: 0
Stag: 5 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: However , every Chinese word inputted into computer or cellphone can not be typed through one-to-one mapping of key-to-letter inputting directly , but has to go through an IME as there are thousands of Chinese characters for inputting while only 26 letter keys are available in the keyboard
	Cause: there are thousands of Chinese characters for inputting while only 26 letter keys are available in the keyboard
	Effect: However , every Chinese word inputted into computer or cellphone can not be typed through one-to-one mapping of key-to-letter inputting directly , but has to go through an IME

CASE: 1
Stag: 5 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: there are thousands of Chinese characters for inputting while only 26 letter keys are available in the keyboard
	Cause: inputting while only 26 letter keys are available in the keyboard
	Effect: there are thousands of Chinese characters

CASE: 2
Stag: 9 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Pinyin is originally designed as the phonetic symbol of a Chinese character -LRB- based on the standard modern Chinese , mandarin -RRB- , using Latin letters as its syllable notation
	Cause: the phonetic symbol of a Chinese character -LRB- based on the standard modern Chinese , mandarin
	Effect: Pinyin is originally designed

CASE: 3
Stag: 11 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: Most characters usually have unique pinyin representations , while a few Chinese characters may be pronounced in several different ways , so they may have multiple pinyin representations
	Cause: Most characters usually have unique pinyin representations , while a few Chinese characters may be pronounced in several different ways
	Effect: they may have multiple pinyin representations

CASE: 4
Stag: 12 
	Pattern: 45 [['so', 'that']]---- [['&C'], ['&R']]
	sentTXT: The advantage of pinyin IME is that it only adopts the pronunciation perspective of Chinese characters so that it is simple and easy to learn
	Cause: The advantage of pinyin IME is that it only adopts the pronunciation perspective of Chinese characters
	Effect: it is simple and easy to learn

CASE: 5
Stag: 16 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since Chinese characters are entered via IME , those user-made typos do not immediately lead to spelling errors
	Cause: Chinese characters are entered via IME
	Effect: those user-made typos do not immediately lead to spelling errors

CASE: 6
Stag: 18 19 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: Normally , the user may immediately notice the inputting error and then make corrections , which usually means doing a bunch of extra operations like cursor movement , deletion and re-typing Thus there are two separated sub-tasks for Chinese spell checking
	Cause: Normally , the user may immediately notice the inputting error and then make corrections , which usually means doing a bunch of extra operations like cursor movement , deletion and re-typing
	Effect: there are two separated sub-tasks for Chinese spell checking

CASE: 7
Stag: 23 
	Pattern: 407 [['because']]---- [['&R', '(,)', '(&ADV)'], ['&C']]
	sentTXT: The user may fail to input the completely right pinyin simply because he/she is a dialect speaker and does not know the exact pronunciation for the expected character
	Cause: he/she is a dialect speaker and does not know the exact pronunciation for the expected character
	Effect: The user may fail to input the completely right pinyin

CASE: 8
Stag: 24 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: This may be a very common situation since there are about seven quite different dialects in Chinese , among which being spoken languages , six are far different from the standard modern Chinese , mandarin
	Cause: there are about seven quite different dialects in Chinese
	Effect: among which being spoken languages , six are far different from the standard modern Chinese ,

CASE: 9
Stag: 25 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: With the boom of smart-phones , pinyin typos worsen due to the limited size of soft keyboard , and the lack of physical feedback on the touch screen
	Cause: the limited size of soft keyboard , and the lack of physical feedback on the touch screen
	Effect: With the boom of smart-phones , pinyin typos worsen

CASE: 10
Stag: 30 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The idea of u ' \ u201c ' statistical input method u ' \ u201d ' was proposed by modeling PTC conversion as a hidden Markov model -LRB- HMM -RRB- , and using Viterbi -LSB- 26 -RSB- algorithm to decode the sequence
	Cause: a hidden Markov model -LRB- HMM -RRB- , and using Viterbi -LSB- 26 -RSB- algorithm to decode the sequence
	Effect: The idea of u ' \ u201c ' statistical input method u ' \ u201d ' was proposed by modeling PTC conversion

CASE: 11
Stag: 31 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: They solved the typo correction problem by decomposing the conditional probability P -LRB- H
	Cause: decomposing the conditional probability P -LRB- H
	Effect: They solved the typo correction problem

CASE: 12
Stag: 34 35 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: However , real user input data can be very noisy and not very convenient to obtain As we will propose a joint model in this paper , such an individual typing model is not necessarily built in our approach
	Cause: we will propose a joint model in this paper , such an individual typing model is not necessarily built in our approach
	Effect: However , real user input data can be very noisy and not very convenient to obtain

CASE: 13
Stag: 39 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We release this assumption since our model solves segmentation , typo correction and PTC conversion jointly
	Cause: our model solves segmentation , typo correction and PTC conversion jointly
	Effect: We release this assumption

CASE: 14
Stag: 55 
	Pattern: 0 [['that', 'is', 'why']]---- [['&C', '(,/./;/--)', '(&AND)', '(&adv)'], ['&R']]
	sentTXT: Without word delimiters , linguists have argued on what a Chinese word really is for a long time and that is why there is always a primary word segmentation treatment in most Chinese language processing tasks -LSB- 40 , 13 , 41 , 39 , 42 , 43 -RSB-
	Cause: Without word delimiters , linguists have argued on what a Chinese word really is for a long time
	Effect: there is always a primary word segmentation treatment in most Chinese language processing tasks -LSB- 40 , 13 , 41 , 39 , 42 , 43 -RSB-

CASE: 15
Stag: 56 
	Pattern: 0 [['due', 'to']]---- [['&R'], ['&NP@C@']]
	sentTXT: A Chinese word may contain from 1 to over 10 characters due to different word segmentation conventions
	Cause: different word segmentation conventions
	Effect: A Chinese word may contain from 1 to over 10 characters

CASE: 16
Stag: 59 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Non-Chinese users may feel confused or even surprised if they know that when typing pinyin through an IME , Chinese IME users will never enter delimiters such as u ' \ u201c ' Space u ' \ u201d ' key to segment either pinyin syllables or pinyin words , but just input the entire un-segmented pinyin sequence
	Cause: they know that when typing pinyin through an IME
	Effect: Chinese IME users will never enter delimiters such as u ' \ u201c ' Space u ' \ u201d ' key to segment either pinyin syllables or pinyin words , but just input the entire un-segmented pinyin sequence

CASE: 17
Stag: 60 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: For example , if one wants to input u ' \ u201c ' \ song u ' \ u4f60 ' u ' \ u597d ' u ' \ u4e16 ' u ' \ u754c ' -LRB- Hello world -RRB- u ' \ u201d ' , he will just type u ' \ u201c ' nihaoshijie u ' \ u201d ' instead of segmented pinyin sequence u ' \ u201c ' ni hao shi jie u ' \ u201d '
	Cause: one wants to input u ' \ u201c ' \ song u ' \ u4f60 ' u ' \ u597d ' u ' \ u4e16 ' u ' \ u754c ' -LRB- Hello world -RRB- u ' \ u201d
	Effect: he will just type u ' \ u201c ' nihaoshijie u ' \ u201d ' instead of segmented pinyin sequence u ' \ u201c ' ni hao shi jie u ' \ u201d '

CASE: 18
Stag: 62 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly , it is convenient to perform pinyin syllable segmentation by using rules
	Cause: pinyin syllables have a very limited vocabulary and follow a set of regularities strictly
	Effect: it is convenient to perform pinyin syllable segmentation by using rules

CASE: 19
Stag: 62 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: it is convenient to perform pinyin syllable segmentation by using rules
	Cause: using rules
	Effect: it is convenient to perform pinyin syllable segmentation

CASE: 20
Stag: 62 63 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Since pinyin syllables have a very limited vocabulary and follow a set of regularities strictly , it is convenient to perform pinyin syllable segmentation by using rules But as the pinyin input is not segmented , it is nearly impossible to adopt previous spell checking methods for English to pinyin typo checking , although techniques for English spell checking have been well developed
	Cause: the pinyin input is not segmented , it is nearly impossible to adopt previous spell checking methods for English to pinyin typo checking , although techniques for English spell checking have been well developed
	Effect: syllables have a very limited vocabulary and follow a set of regularities strictly , it is convenient to perform pinyin syllable segmentation by using rules But

CASE: 21
Stag: 64 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: A bit confusing but interesting , pinyin typo correction and segmentation come as two sides of one problem when a pinyin sequence is mistyped , it is unlikely to be correctly segmented ; when it is segmented in an awkward way , it is likely to be mistyped
	Cause: two sides of one problem when a pinyin sequence is mistyped , it is unlikely to be correctly segmented ;
	Effect: A bit confusing but interesting , pinyin typo correction and segmentation come

CASE: 22
Stag: 65 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: Inspired by -LSB- 36 -RSB- and -LSB- 14 -RSB- , we adopt the graph model for Chinese spell checking for pinyin segmentation and typo correction , which is based on the shortest path word segmentation algorithm -LSB- 1 -RSB-
	Cause: the shortest path word segmentation algorithm -LSB- 1 -RSB-
	Effect: Inspired by -LSB- 36 -RSB- and -LSB- 14 -RSB- , we adopt the graph model for Chinese spell checking for pinyin segmentation and typo correction , which is

CASE: 23
Stag: 67 
	Pattern: 0 [['based', 'on']]---- [['&V-ing/&NP@R@', '(&Clause@R@)', '&BE', '(&ADV)'], ['&NP@C@', '(&Clause@C@)']]
	sentTXT: The shortest path segmentation algorithm is based on the idea that a reasonable segmentation should minimize the number of segmented units
	Cause: the idea that a reasonable segmentation should minimize the number of segmented units
	Effect: The shortest path segmentation algorithm

CASE: 24
Stag: 71 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: Possible legal syllables fetched from dictionary u ' \ ud835 ' u ' \ udd3b ' p according to the input pinyin sequence
	Cause: the input pinyin sequence
	Effect: Possible legal syllables fetched from dictionary u ' \ ud835 ' u ' \ udd3b ' p

CASE: 25
Stag: 79 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: This is the single source shortest path -LRB- SSSP -RRB- problem on DAG which has an efficient algorithm by preprocessing the DAG with topology sort , then traversing vertices and edges in topological order
	Cause: preprocessing the DAG with topology sort
	Effect: , then traversing vertices and edges in topological order

CASE: 26
Stag: 82 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: For example , one intends to input u ' \ u201c ' \ song u ' \ u4f60 ' u ' \ u597d ' u ' \ u4e16 ' u ' \ u754c ' -LRB- Hello world -RRB- u ' \ u201d ' by typing u ' \ u201c ' nihaoshijie u ' \ u201d ' , but mistyped as u ' \ u201c ' m ihaoshiji w u ' \ u201d '
	Cause: u ' \ u201c ' m ihaoshiji w u ' \ u201d
	Effect: For example , one intends to input u ' \ u201c ' \ song u ' \ u4f60 ' u ' \ u597d ' u ' \ u4e16 ' u ' \ u754c ' -LRB- Hello world -RRB- u ' \ u201d ' by typing u ' \ u201c ' nihaoshijie u ' \ u201d ' , but mistyped

CASE: 27
Stag: 90 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If the adjacent syllables can be merged into a legal syllable , the merged syllable is also added into u ' \ ud835 ' u ' \ udd4d '
	Cause: the adjacent syllables can be merged into a legal syllable
	Effect: the merged syllable is also added into u ' \ ud835 ' u ' \ udd4d '

CASE: 28
Stag: 92 93 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Syllables with Levenshtein distance under a certain threshold are considered as similar The vertex weight is the Levenshtein distance multiply by a normalization parameter
	Cause: similar The vertex weight is the Levenshtein distance multiply by a normalization
	Effect: Syllables with Levenshtein distance under a certain threshold are considered

CASE: 29
Stag: 98 
	Pattern: 30 []---- [['&V-ing@C@', '(,)', '&R@Complete@']]
	sentTXT: Merely using the above model , the typo correction result is not satisfying yet , no matter how much effort is paid
	Cause: Merely using the above model
	Effect: the typo correction result is not satisfying yet , no matter how much effort is paid

CASE: 30
Stag: 98 99 
	Pattern: 1 [['reason'], [['that', 'because']]]---- [['&R', '(,/./;/--)', '&ONE', '(&ADJ)'], ['(for &THIS (&NP))', '&BE'], ['&C']]
	sentTXT: Merely using the above model , the typo correction result is not satisfying yet , no matter how much effort is paid The major reason is that the basic semantic unit of Chinese language is actually word -LRB- tough vaguely defined -RRB- which is usually composed of several characters
	Cause: the basic semantic unit of Chinese language is actually word -LRB- tough vaguely defined -RRB- which is usually composed of several characters
	Effect: Merely using the above model , the typo correction result is not satisfying yet , no matter how much effort is paid

CASE: 31
Stag: 99 100 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: The major reason is that the basic semantic unit of Chinese language is actually word -LRB- tough vaguely defined -RRB- which is usually composed of several characters Thus the conditional probability between characters does not make much sense
	Cause: The major reason is that the basic semantic unit of Chinese language is actually word -LRB- tough vaguely defined -RRB- which is usually composed of several characters
	Effect: the conditional probability between characters does not make much sense

CASE: 32
Stag: 102 103 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: However , using pinyin words instead of syllables is not a wise choice because pinyin word segmentation is not so easy a task as syllable segmentation To make typo correction better , we consider to integrate it with PTC conversion using a joint model
	Cause: However , using pinyin words instead of syllables is not a wise choice because pinyin word segmentation is not
	Effect: easy a task as syllable segmentation To make typo correction better , we consider to integrate it with PTC conversion using a joint

CASE: 33
Stag: 131 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: The graph G = -LRB- u ' \ ud835 ' u ' \ udd4d ' , u ' \ ud835 ' u ' \ udd3c ' -RRB- is constructed based on graph G c for typo correction in Section 3.2
	Cause: typo correction in Section 3.2
	Effect: = -LRB- u ' \ ud835 ' u ' \ udd4d ' , u ' \ ud835 ' u ' \ udd3c ' -RRB- is constructed based on graph G c

CASE: 34
Stag: 131 
	Pattern: 0 [['based', 'on']]---- [['&R', '(,)', '(&ADV)'], ['&V-ing/&NP@C@', '(&Clause@C@)']]
	sentTXT: = -LRB- u ' \ ud835 ' u ' \ udd4d ' , u ' \ ud835 ' u ' \ udd3c ' -RRB- is constructed based on graph G c
	Cause: graph G c
	Effect: = -LRB- u ' \ ud835 ' u ' \ udd4d ' , u ' \ ud835 ' u ' \ udd3c ' -RRB- is constructed

CASE: 35
Stag: 135 136 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: Corresponding Chinese words are fetched from a PTC dictionary u ' \ ud835 ' u ' \ udd3b ' c , which is a dictionary maps pinyin words to Chinese words , and added as vertices The vertex weight consists of two parts
	Cause: vertices The vertex weight consists of
	Effect: Chinese words are fetched from a PTC dictionary u ' \ ud835 ' u ' \ udd3b ' c , which is a dictionary maps pinyin words to Chinese words , and added

CASE: 36
Stag: 138 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: If the corresponding pinyin syllables in G c have an edge between them , the vertices in G also have an edge
	Cause: the corresponding pinyin syllables in G c have an edge between them
	Effect: the vertices in G also have an edge

CASE: 37
Stag: 140 
	Pattern: 0 [[['by', 'through']]]---- [['&R@Complete@'], ['&V-ing@C@']]
	sentTXT: Although the model is formulated on first order HMM , i.e. , , the LM used for transition probability is a bigram one , it is easy to extend the model to take advantage of higher order n - gram LM , by tracking longer history while traversing the graph
	Cause: tracking longer history while traversing the graph
	Effect: Although the model is formulated on first order HMM , i.e. , , the LM used for transition probability is a bigram one , it is easy to extend the model to take advantage of higher order n - gram LM ,

CASE: 38
Stag: 144 
	Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
	sentTXT: According to our empirical statistics , when setting threshold T = 2 , for a sentence of M characters , the joint graph will have u ' \ ud835 ' u ' \ udd4d '
	Cause: our empirical statistics
	Effect: when setting threshold T = 2 , for a sentence of M characters , the joint graph will have u ' \ ud835 ' u ' \ udd4d '

CASE: 39
Stag: 147 
	Pattern: 0 [[['by', 'through']]]---- [[], ['&V-ing@C@', '&R']]
	sentTXT: To reduce the scale of graph G , we filter graph G c by searching its K - shortest paths first to get G c u ' \ u2032 ' and construct G on top of G c u ' \ u2032 '
	Cause: searching its K
	Effect: - shortest paths first to get G c u ' \ u2032 ' and construct G on top of G c u ' \ u2032

CASE: 40
Stag: 149 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: The scale of graph may be thus drastically reduced
	Cause: The scale of graph may be
	Effect: drastically reduced

CASE: 41
Stag: 150 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: An efficient heap data structure is required in K - shortest paths algorithm -LSB- 7 -RSB- for backtracking the best paths to current vertex while traversing
	Cause: backtracking the best paths to current vertex
	Effect: An efficient heap data structure is required in K - shortest paths algorithm -LSB- 7 -RSB-

CASE: 42
Stag: 151 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The heap is implemented as a priority queue of size K sorted according to path length that should support efficient push and pop operations
	Cause: a priority queue of size K sorted according to path length that should support efficient push and pop
	Effect: The heap is implemented

CASE: 43
Stag: 151 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: a priority queue of size K sorted according to path length that should support efficient push and pop
	Cause: path length
	Effect: a priority queue of size K sorted

CASE: 44
Stag: 152 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: Fibonacci heap -LSB- 9 -RSB- is adopted for the heap implementation since it has a push complexity of O u ' \ u2062 ' -LRB- 1 -RRB- which is better than the O u ' \ u2062 ' -LRB- K -RRB- for other heap structures
	Cause: it has a push complexity of O u ' \ u2062 ' -LRB- 1 -RRB- which is better than the O u ' \ u2062 ' -LRB- K -RRB- for other heap structures
	Effect: Fibonacci heap -LSB- 9 -RSB- is adopted for the heap implementation

CASE: 45
Stag: 153 
	Pattern: 25 [['for']]---- [['&R'], ['&V-ing@C@']]
	sentTXT: Another benefit provided by K - shortest paths is that it can be used for generating N - best candidates of PTC conversion , which may be helpful for further performance improvement
	Cause: generating N - best candidates of PTC conversion , which may be helpful for further performance improvement
	Effect: Another benefit provided by K - shortest paths is that it can be used

CASE: 46
Stag: 159 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: The pinyin part is segmented according to the Chinese part
	Cause: the Chinese part
	Effect: The pinyin part is segmented

CASE: 47
Stag: 160 161 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: This vocabulary u ' \ ud835 ' u ' \ udcb1 ' also serves as the PTC dictionary The original vocabulary is not labeled with pinyin , thus we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME , to label the vocabulary u ' \ ud835 ' u ' \ udcb1 ' with pinyin
	Cause: the PTC dictionary The original vocabulary is not labeled with pinyin , thus we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME ,
	Effect: This vocabulary u ' \ ud835 ' u ' \ udcb1 ' also serves

CASE: 48
Stag: 161 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: The original vocabulary is not labeled with pinyin , thus we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME , to label the vocabulary u ' \ ud835 ' u ' \ udcb1 ' with pinyin
	Cause: The original vocabulary is not labeled with pinyin
	Effect: we use the PTC dictionary of sunpinyin 1 1 http://code.google.com/p/sunpinyin/ which is an open source Chinese pinyin IME , to label the vocabulary u ' \ ud835 ' u ' \ udcb1 ' with pinyin

CASE: 49
Stag: 162 163 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The emission probabilities are estimated using the lexical translation module of MOSES -LSB- 17 -RSB- as u ' \ u201c ' translation probability u ' \ u201d ' from pinyin to Chinese We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME , thus we are unable to use existing evaluation systems -LSB- 15 -RSB- for full Chinese IME functions
	Cause: u ' \ u201c ' translation probability u ' \ u201d ' from pinyin to Chinese We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME , thus we are unable to use existing evaluation systems -LSB- 15 -RSB- for full Chinese IME
	Effect: The emission probabilities are estimated using the lexical translation module of MOSES -LSB- 17 -RSB-

CASE: 50
Stag: 163 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME , thus we are unable to use existing evaluation systems -LSB- 15 -RSB- for full Chinese IME functions
	Cause: We will use conventional sequence labeling evaluation metrics such as sequence accuracy and character accuracy 2 2 We only work on the PTC conversion part of IME
	Effect: we are unable to use existing evaluation systems -LSB- 15 -RSB- for full Chinese IME functions

CASE: 51
Stag: 167 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We will also report the conversion error rate -LRB- ConvER -RRB- proposed by -LSB- 44 -RSB- , which is the ratio of the number of mistyped pinyin word that is not converted to the right Chinese word over the total number of mistyped pinyin words 3 3 Other evaluation metrics are also proposed by -LSB- 44 -RSB- which is only suitable for their system since our system uses a joint model
	Cause: our system uses a joint model
	Effect: We will also report the conversion error rate -LRB- ConvER -RRB- proposed by -LSB- 44 -RSB- , which is the ratio of the number of mistyped pinyin word that is not converted to the right Chinese word over the total number of mistyped pinyin words 3 3 Other evaluation metrics are also proposed by -LSB- 44 -RSB- which is only suitable for their system

CASE: 52
Stag: 171 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: According to our empirical observation , emission probabilities are mostly 1 since most Chinese words have unique pronunciation
	Cause: most Chinese words have unique pronunciation
	Effect: According to our empirical observation , emission probabilities are mostly 1

CASE: 53
Stag: 171 
	Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
	sentTXT: According to our empirical observation , emission probabilities are mostly 1
	Cause: our empirical observation
	Effect: emission probabilities are mostly 1

CASE: 54
Stag: 171 172 
	Pattern: 265 [['so']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(-far)', '(,)', '&R']]
	sentTXT: According to our empirical observation , emission probabilities are mostly 1 since most Chinese words have unique pronunciation So in this step we set u ' \ u0393 ' = 0
	Cause: According to our empirical observation , emission probabilities are mostly 1 since most Chinese words have unique pronunciation
	Effect: in this step we set u ' \ u0393 ' =

CASE: 55
Stag: 177 
	Pattern: 0 [['according', 'to'], [',']]---- [[], ['&NP@C@'], ['&R']]
	sentTXT: According to the results , we then choose the trigram LM using Kneser-Ney smoothing with interpolation
	Cause: the results
	Effect: we then choose the trigram LM using Kneser-Ney smoothing with interpolation

CASE: 56
Stag: 180 181 
	Pattern: 62 [['therefore']]---- [['&C', '(,/;/./--)', '(&AND)'], ['(,)', '&R']]
	sentTXT: We can observe that MIU-Acc slightly decreases while N goes up , but Ch-Acc largely increases We therefore choose N = 10 as trade-off
	Cause: can observe that MIU-Acc slightly decreases while N goes up , but Ch-Acc largely increases We
	Effect: choose N = 10 as trade-off

CASE: 57
Stag: 188 
	Pattern: 0 [['according', 'to']]---- [['&R', '(,)'], ['&NP@C@']]
	sentTXT: The typo rate is set according to previous Human-Computer Interaction -LRB- HCI -RRB- studies
	Cause: previous Human-Computer Interaction -LRB- HCI -RRB- studies
	Effect: The typo rate is set

CASE: 58
Stag: 189 
	Pattern: 0 [['due', 'to']]---- [[], ['&NP@C@', '(,)', '&R']]
	sentTXT: Due to few works have been done on modeling Chinese text entry , we have to refer to those corresponding results on English -LSB- 32 , 22 , 6 -RSB- , which show that the average typo rate is about 2 %
	Cause: few works have been done on modeling Chinese text entry
	Effect: we have to refer to those corresponding results on English -LSB- 32 , 22 , 6 -RSB- , which show that the average typo rate is about 2 %

CASE: 59
Stag: 191 192 
	Pattern: 26 [['as']]---- [['&R@Complete@', '(,)', '(-such/-same/-seem/-regard/-regards/-regarded/-view/-views/-viewed/-denote/-denoted/-denotes)'], ['(-if/-follow/-follows/-&adv)', '&C@Complete@']]
	sentTXT: The collected data consists of 775 mistyped pinyin words caused by one edit operation , and 85 caused by two edit operations As we observe on \ msc Train that the average pinyin word length is 5.24 , then typo rate in the experiment of -LSB- 44 -RSB- can be roughly estimated as
	Cause: we observe on \ msc Train that the average pinyin word length is 5.24 , then typo rate in the experiment of -LSB- 44 -RSB- can be roughly estimated as
	Effect: The collected data consists of 775 mistyped pinyin words caused by one edit operation , and 85 caused by two edit operations

CASE: 60
Stag: 193 194 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: which is similar to the conclusion on English Thus we generate corpora from \ msc Dev with typo rate of 0 % -LRB- 0-P -RRB- , 2 % -LRB- 2-P -RRB- , and 5 % -LRB- 5-P -RRB- to evaluate the system
	Cause: which is similar to the conclusion on English
	Effect: we generate corpora from \ msc Dev with typo rate of 0 % -LRB- 0-P -RRB- , 2 % -LRB- 2-P -RRB- , and 5 % -LRB- 5-P -RRB- to evaluate the system

CASE: 61
Stag: 196 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since pinyin syllable is much shorter than pinyin word , this ratio can be higher for pinyin syllables
	Cause: pinyin syllable is much shorter than pinyin word
	Effect: this ratio can be higher for pinyin syllables

CASE: 62
Stag: 197 198 
	Pattern: 35 [['thus']]---- [['&C', '(,/;/./--)', '(&AND)'], ['&R']]
	sentTXT: From our statistics on \ msc Train , with 2 % randomly generated typos , P r -LRB- u ' \ u2112 ' -LRB- S u ' \ u2032 ' , S -RRB- 2 -RRB- = 99.86 % Thus we set the threshold T for u ' \ u2112 ' to 2
	Cause: From our statistics on \ msc Train , with 2 % randomly generated typos , P r -LRB- u ' \ u2112 ' -LRB- S u ' \ u2032 ' , S -RRB- 2 -RRB- = 99.86 %
	Effect: we set the threshold T for u ' \ u2112 ' to

CASE: 63
Stag: 203 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: We choose K = 20 since there is no significant improvement when K 20
	Cause: there is no significant improvement when K 20
	Effect: We choose K = 20

CASE: 64
Stag: 208 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since sunpinyin does not have typo correction module and performs much poorer than our baseline system , we do not include it in the comparison
	Cause: sunpinyin does not have typo correction module and performs much poorer than our baseline system
	Effect: we do not include it in the comparison

CASE: 65
Stag: 209 
	Pattern: 0 [[['if', 'once']], [',']]---- [[], ['&C@Complete@'], ['&R@Complete@']]
	sentTXT: Though no direct proofs can be found to indicate if Google Input Tool has an independent typo correction component , its outputs show that such a component is unlikely available
	Cause: Google Input Tool has an independent typo correction component
	Effect: its outputs show that such a component is unlikely available

CASE: 66
Stag: 210 
	Pattern: 15 [['since'], [',']]---- [[], ['&C@NCTime@'], ['&R@NCTime@']]
	sentTXT: Since Google Input Tool has to be accessed through a web interface and the network connection can not be guaranteed we only take a subset of 10K sentences of \ msc Test to perform the experiments , and the results are shown in Table 3
	Cause: Google Input Tool has to be accessed through a web interface and the network connection can not be guaranteed we only take a subset of 10K sentences of \ msc Test to perform the experiments
	Effect: and the results are shown in Table 3

CASE: 67
Stag: 211 
	Pattern: 23 [['since']]---- [['&R@NCTime@', '(,)'], ['&C@NCTime@']]
	sentTXT: The scores reported in -LSB- 44 -RSB- are not listed in Table 4 since the data set is different
	Cause: the data set is different
	Effect: The scores reported in -LSB- 44 -RSB- are not listed in Table 4

