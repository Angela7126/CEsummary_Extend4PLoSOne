<html>
<head>
<title>P14-2054.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>We can reversely get the the compressed parse tree by removing all virtual arcs from the full parse tree</a>
<a name="1">[1]</a> <a href="#1" id=1>In this way, we derive a full parse tree of the original sentence</a>
<a name="2">[2]</a> <a href="#2" id=2>Then we augment these parse trees by adding virtual arcs and get the full parse trees of their corresponding original sentences</a>
<a name="3">[3]</a> <a href="#3" id=3>However, the time complexity greatly increases since the parse tree dynamically depends on the compression</a>
<a name="4">[4]</a> <a href="#4" id=4>We restrict the score of all the virtual arcs to be zero, so that scores of the two parse trees are equivalent</a>
<a name="5">[5]</a> <a href="#5" id=5>Recent studies used a subtree deletion model for compression [ 1 , 13 , 15 ] , which deletes a word only if its modifier in the parse tree is deleted</a>
<a name="6">[6]</a> <a href="#6" id=6>If the first word x 1 is deleted, we connect it to the root of the parse tree x 0 , as shown in Figure 3</a>
<a name="7">[7]</a> <a href="#7" id=7>For any compressed sentence, we could augment its dependency tree by adding a virtual arc i - 1 u'\u2192' i for each deleted word x i</a>
<a name="8">[8]</a> <a href="#8" id=8>Trevor et al. proposed synchronous tree</a>
</body>
</html>