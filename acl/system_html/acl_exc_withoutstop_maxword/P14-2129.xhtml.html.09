<html>
<head>
<title>P14-2129.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>The hedge tree transform converts the original parse tree into a hedge parse tree</a>
<a name="1">[1]</a> <a href="#1" id=1>First, we present the simple tree transform from a full treebank parse tree to a (root attached) sequence of hedges</a>
<a name="2">[2]</a> <a href="#2" id=2>In the resulting hedge parse tree, every child of the top-most node spans at most L words</a>
<a name="3">[3]</a> <a href="#3" id=3>Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings</a>
<a name="4">[4]</a> <a href="#4" id=4>In section 2.3 , we present our approach to hedge segmentation</a>
<a name="5">[5]</a> <a href="#5" id=5>In this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing</a>
<a name="6">[6]</a> <a href="#6" id=6>To transform an original tree to a hedge tree, we remove every non-terminal with span larger than L and attach its children to its parent</a>
<a name="7">[7]</a> <a href="#7" id=7>A unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially connected to the top-most node</a>
<a name="8">[8]</a> <a href="#8" id=8>Next, we discuss modifications to inference and the resulting computational complexity gains</a>
<a name="9">[9]</a> <a href="#9" id=9>In the pre-segmentation scenario, we first decompose the hedge transformed treebank into its hedge segments and then learn a hedgebank grammar from the new corpus</a>
<a name="10">[10]</a> <a href="#10" id=10>Other than the symbol at the root of the tree, the only constituents with span length greater than L in the binarized tree will</a>
</body>
</html>