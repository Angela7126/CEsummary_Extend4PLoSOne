<html>
<head>
<title>P14-2129.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings</a>
<a name="1">[1]</a> <a href="#1" id=1>In this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing</a>
<a name="2">[2]</a> <a href="#2" id=2>We use hedge segmentation as a finite-state pre-processing step for hedge context-free parsing</a>
<a name="3">[3]</a> <a href="#3" id=3>Table 2 shows the results on the development set when segmenting prior to hedge parsing</a>
<a name="4">[4]</a> <a href="#4" id=4>Given a set of labeled pairs ( S , H ) where S is a sentence of n words w 1 u'\u2062' u'\u2026' u'\u2062' w n and H is its hedge parse tree, word w b belongs to B if there is a hedge constituent spanning w b u'\u2062' u'\u2026' u'\u2062' w e for some e u'\u2265' b and w b belongs to B otherwise</a>
<a name="5">[5]</a> <a href="#5" id=5>In this paper, we consider the problem of hedge parsing , i.e.,, discovering every constituent of length up to some span L</a>
<a name="6">[6]</a> <a href="#6" id=6>This is compared with a baseline of parsing with a typically induced context-free grammar and transforming the result via the hedge transform, which provides a ceiling on accuracy and a floor on efficiency</a>
<a name="7">[7]</a> <a href="#7" id=7>Finally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a</a>
</body>
</html>