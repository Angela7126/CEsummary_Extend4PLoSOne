<html>
<head>
<title>P14-1130.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>We compare our model to MST and Turbo parsers on non-projective dependency parsing</a>
<a name="1">[1]</a> <a href="#1" id=1>Our parameters are divided into a sparse set corresponding to manually chosen MST or Turbo parser features and a larger set governed by a low-rank tensor</a>
<a name="2">[2]</a> <a href="#2" id=2>By taking the cross-product of all these component feature vectors, we obtain the full feature representation for arc h u'\u2192' m as a rank-1 tensor</a>
<a name="3">[3]</a> <a href="#3" id=3>Our model outperforms Turbo parser, MST parser, as well as its own variants without the tensor component</a>
<a name="4">[4]</a> <a href="#4" id=4>Finally, we demonstrate that the model can successfully leverage word vector representations, in contrast to the baselines</a>
<a name="5">[5]</a> <a href="#5" id=5>Our parsing model aims to combine the strengths of both traditional features from the MST/Turbo parser as well as the new low-rank tensor features</a>
<a name="6">[6]</a> <a href="#6" id=6>In contrast, we expand features for parsing into a multi-way tensor, and operate with an explicit low-rank representation of the associated parameter tensor</a>
<a name="7">[7]</a> <a href="#7" id=7>To assess the ability of our model to incorporate a range of features, we add unsupervised word vectors to our model</a>
<a name="8">[8]</a> <a href="#8" id=8>From a computational perspective, adding non-sparse vectors directly as features, including their combinations, can</a>
</body>
</html>