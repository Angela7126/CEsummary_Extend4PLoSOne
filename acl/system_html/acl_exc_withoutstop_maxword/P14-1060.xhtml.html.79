<html>
<head>
<title>P14-1060.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>We describe learning of the model parameters with fully annotated training data, as well as an approach for learning motif segmentation that requires only partial supervision</a>
<a name="1">[1]</a> <a href="#1" id=1>This would involve initializing the weights prior to the semi-supervised procedure with the weights from the supervised learning model, so as to seed the semi-supervised approach with reasonable model, and use the partially annotated data to fine-tune the supervised model</a>
<a name="2">[2]</a> <a href="#2" id=2>Consider the following sentences tagged by the segmentation model, that would correspond to different representations of the token u'\u2018' remains u'\u2019' once as a standalone motif, and once as part of an encompassing bigram motif ( u'\u2018' remains classified u'\u2019'</a>
<a name="3">[3]</a> <a href="#3" id=3>Section 3 describes our methodology, which consists of a frequency-driven segmentation model to partition text into semantically meaningful recurring lineal-subunits, a representation learning framework for learning new semantic embeddings based on this segmentation, and an approach to use such embeddings in downstream applications</a>
<a name="4">[4]</a> <a href="#4" id=4>Hence, we use the Hellinger measure between neighbourhood motif distributions in learning representations</a>
<a name="5">[5]</a> <a href="#5" id=5>Given constituent motifs of each sentence in the data, we can now define neighbourhood distributions for unary or phrasal motifs in terms of other motifs (as envisioned in Table 1</a>
<a name="6">[6]</a> <a href="#6" id=6>While this framework is attractive in the lack of assumptions on representation that it makes, the use of distributional embeddings for individual tokens means that it suffers from the same shortcomings as described for the example in Table 1, and hence these methods model semantic relations between word-nodes very weakly</a>
<a name="7">[7]</a> <a href="#7" id=7>While the Viterbi algorithm can be used for tagging optimal state-sequences given the weights, the structured perceptron can learn optimal model weights given gold-standard sequence labels</a>
<a name="8">[8]</a> <a href="#8" id=8>Implicitly, the weight learning algorithm can be seen as a gradient descent procedure minimizing the difference between the scores of highest scoring (Viterbi) state sequences, and the label</a>
</body>
</html>