<html>
<head>
<title>P14-2129.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings</a>
<a name="1">[1]</a> <a href="#1" id=1>The hedge tree transform converts the original parse tree into a hedge parse tree</a>
<a name="2">[2]</a> <a href="#2" id=2>Table 2 shows the results on the development set when segmenting prior to hedge parsing</a>
<a name="3">[3]</a> <a href="#3" id=3>Finally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser</a>
<a name="4">[4]</a> <a href="#4" id=4>Segmentation accuracy is reported as an F1-score of unlabeled segment bracketing</a>
<a name="5">[5]</a> <a href="#5" id=5>In this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing</a>
<a name="6">[6]</a> <a href="#6" id=6>We investigate pre-segmenting the sentences with a finite-state model prior to hedge parsing, and achieve large speedups relative to hedge parsing the whole string, though at a loss in accuracy due to cascading segmentation errors</a>
<a name="7">[7]</a> <a href="#7" id=7>First, we present the simple tree transform from a full treebank parse tree to a (root attached) sequence of hedges</a>
<a name="8">[8]</a> <a href="#8" id=8>In the resulting hedge parse tree, every child of the top-most node spans at most L words</a>
<a name="9">[9]</a> <a href="#9" id=9>In section 2.3 , we present our approach to hedge segmentation</a>
<a name="10">[10]</a> <a href="#10" id=10>In all trials, we evaluate accuracy with respect to the hedge transformed reference treebank,</a>
</body>
</html>