(lp0
VAs the semantics of DCS trees is formulated by abstract denotations, the meanings of declarative sentences are represented by statements on abstract denotations
p1
aVIn this section we describe the idea of representing natural language semantics by DCS trees, and achieving inference by computing logical relations among the corresponding abstract denotations
p2
aVOn-the-fly knowledge is generated by aligning paths in DCS trees
p3
aVBased on abstract denotations, we briefly describe our process to apply DCS to textual inference
p4
aVConvert accepted path alignments into statements on abstract denotations, use them in logical inference as new knowledge, and try to prove H again
p5
aVThe strict semantics of DCS trees brings us the idea of applying DCS to logical inference
p6
aVPerform rule-based conversion from dependency parses to DCS trees, which are translated to statements on abstract denotations
p7
aVSince meanings of sentences are represented by statements on abstract denotations, logical inference among sentences is reduced to deriving new relations among abstract denotations
p8
aVTo formulate the database querying process defined by a DCS tree, we provide formal semantics to DCS trees by employing relational algebra [] for representing the query
p9
aVWe built an inference engine to perform logical inference on abstract denotations as above
p10
aVThe conversion is done by first performing a DCS tree transformation according to the aligned paths, and then declare a subsumption relation between the denotations of aligned germs
p11
aVAbstract denotations and statements are convenient for representing semantics of various types of expressions and linguistic knowledge
p12
aVDCS trees has been proposed to represent natural language semantics with a structure similar to dependency trees [] (Figure 1
p13
aVThis formulation keeps the simpleness and computability of DCS trees mostly unaffected; for example, our semantic calculation for DCS trees is parallel to the denotation computation in original DCS
p14
aVMost of the problems do not require lexical knowledge, so we use our primary textual inference system without on-the-fly knowledge nor WordNet, to test the performance of the DCS framework as formal semantics
p15
aVFurthermore, since the on-the-fly knowledge is generated by transformed pairs of DCS trees, all contexts are preserved in Figure 6 , though the tree transformation can be seen as generated from the entailment rule u'\u005cu201c' X is blamed for death u'\u005cu2192' X causes loss of life u'\u005cu201d' , the generated on-the-fly knowledge, as shown above the trees, only fires with the additional condition that X is a tropical storm and is Debby
p16
aVIf H is not proven, compare DCS trees of T and H , and generate path alignments
p17
aVThe idea is to borrow a minimal set of operators from relational algebra [] , which is already able to formulate the calculation in DCS and define abstract denotation , which is an abstraction of the computation of denotations guided by DCS trees
p18
aVAs described below, we represent meanings of sentences with abstract denotations , and logical relations among sentences are computed as relations among their abstract denotations
p19
aVAn inference engine is built to handle inference on abstract denotations
p20
aVWe obtain DCS trees from dependency trees, to bypass the need of a concrete database
p21
aVAccepted aligned paths are converted into statements, which are used as new knowledge
p22
aVA path is considered as joining two germs in a DCS tree, where a germ is defined as a specific semantic role of a node
p23
aVTechnically, each germ in a DCS tree indicates a variable when the DCS tree is translated to a FOL formula, and the abstract denotation of the germ corresponds to the set of consistent values [] of that variable
p24
aVWe extract fragments of DCS trees as paraphrase candidates, translate them back to linguistic expressions, and apply distributional similarity to judge their validity
p25
aVFor example, Figure 5 shows DCS trees of the following sentences (a simplified pair from RTE2-dev
p26
aVAligned paths are evaluated by a similarity score, for which we use distributional similarity of the words that appear in the paths (§ 4.1
p27
aVOnly path alignments with high similarity scores can be accepted
p28
aVFor example, to apply the aligned path pair generated
p29
a.