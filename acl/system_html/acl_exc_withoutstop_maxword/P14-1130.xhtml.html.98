<html>
<head>
<title>P14-1130.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Because of this issue, Cirik and u'\u015e' ensoy ( 2013 ) used word vectors only as unigram features (without combinations) as part of a shift reduce parser [ 32 ]</a>
<a name="1">[1]</a> <a href="#1" id=1>For each word in the sentence, we add its own word vector as well as the vectors of its left and right words</a>
<a name="2">[2]</a> <a href="#2" id=2>This framework enables us to learn new syntactically guided embeddings while also leveraging separately estimated word vectors as starting features, leading to improved parsing performance</a>
<a name="3">[3]</a> <a href="#3" id=3>In contrast, we represent words as vectors in a manner that is directly optimized for parsing</a>
<a name="4">[4]</a> <a href="#4" id=4>This low dimensional syntactic abstraction can be thought of as a proxy to manually constructed POS tags</a>
<a name="5">[5]</a> <a href="#5" id=5>We begin by representing high-dimensional feature vectors as multi-way cross-products of smaller feature vectors that represent words and their syntactic relations (arcs</a>
<a name="6">[6]</a> <a href="#6" id=6>To add auxiliary word vector representations, we use the publicly available word vectors [ 5 ] , learned from raw data [ 13 , 20 ]</a>
<a name="7">[7]</a> <a href="#7" id=7>Each entry of the word vector is added as a feature value into feature vectors u'\u03a6' h and u'\u03a6' m</a>
<a name="8">[8]</a> <a href="#8" id=8>We</a>
</body>
</html>