<html>
<head>
<title>P14-2133.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Each u'\u0391' t , w is learned in the same way as its corresponding probability in the original parser model u'\u2014' during each M step of the training procedure, u'\u0391' w , t is set to the expected number of times the word w appears under the refined tag t</a>
<a name="1">[1]</a> <a href="#1" id=1>To evaluate the embedding structure hypothesis, we take the Maryland featured parser, and replace the set of lexical template features used by that parser with a set of indicator features on a discretized version of the embedding</a>
<a name="2">[2]</a> <a href="#2" id=2>This paper investigates a variety of ways in which word embeddings might augment a constituency parser with a discrete state space</a>
<a name="3">[3]</a> <a href="#3" id=3>We began by searching over exponentially-spaced values of u'\u0392' to determine an optimal setting for each training set size; as expected, for small settings of u'\u0392' (corresponding to aggressive smoothing) performance decreased; as we increased the parameter, performance increased slightly before tapering off to baseline parser performance</a>
<a name="4">[4]</a> <a href="#4" id=4>Word embeddings are useful for handling out-of-vocabulary words, because they automatically ensure that unknown words are treated the same way as known words with similar representations</a>
<a name="5">[5]</a> <a href="#5" id=5>A baseline featured model ( u'\u201c' ident u'\u201d' ) contains only indicator features on word identity (and performs considerably worse than its generative counterpart on small data sets</a>
<a name="6">[6]</a> <a href="#6" id=6>Word embeddings u'\u2014' representations of lexical items as points in a real vector space u'\u2014' have a long history in natural language processing, going back at least as far as work on latent</a>
</body>
</html>