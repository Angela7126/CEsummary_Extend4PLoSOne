(lp0
VThe learning curves depict the behavior of FVEC and STRUCT models as we increase the size of the training set
p1
aVNext, we show the learning curves to analyze the behavior of FVEC and STRUCT models according to the training size
p2
aVIntuitively, the STRUCT model relies on more general syntactic patterns and may overcome the sparseness problems incurred by the FVEC model when little training data is available
p3
aVWhen using AUTO as a source domain, STRUCT model provides additional 1-3% of absolute improvement, except for the sentiment task
p4
aVNevertheless, as we see in Figure 2 , the learning curves for sentiment and type classification tasks across both product categories do not confirm this intuition
p5
aVIn the next sections, we define a baseline feature vector model and a novel structural model based on kernel methods
p6
aVWe go beyond traditional feature vectors by employing structural models ( STRUCT ), which encode each comment into a shallow syntactic tree
p7
aVOur STRUCT model is more accurate since it is able to induce structural patterns of sentiment
p8
aVThe structural model, in contrast, is able to identify the product of interest ( xoom ) and associate it with the negative expression through a structural feature and thus correctly classify the comment as negative
p9
aVWe treat each comment as expressing positive , negative or neutral sentiment
p10
aVOne of the challenging aspects of sentiment analysis of YouTube data is that the comments may express the sentiment not only towards the product shown in the video, but also the video itself, i.e.,, users may post positive comments to the video while being generally negative about the product and vice versa
p11
aVThe comment contains a product name xoom and some negative expressions, thus, a bag-of-words model would derive a negative polarity for this product
p12
aVThe STRUCT model consistently outperforms the FVEC across all training sizes, but the gap in the performance does not increase when we move to smaller training sets
p13
aVIn contrast, the STRUCT model relies on the fact that the negative word, destroy , refers to the PRODUCT ( xoom ) since they form a verbal phase (VP
p14
aVTo understand the performance of our classifiers on other YouTube domains, we perform a set of cross-domain experiments by training on the data from one product category and testing on the other
p15
aVStructural models generally improve on both tasks u'\u005cu2013' polarity and type classification u'\u005cu2013' yielding up to 30% of relative improvement, when little data is available
p16
aVAUTO is used as the source domain to train models, which are tested on TABLETS
p17
aVThis enables the use of a simple flat multi-classifiers with seven categories for the full task, instead of a hierarchical multi-label classifiers (i.e.,, type classification first and then opinion polarity
p18
aVFor each of the lexicons, we use the number of words found in the comment that have positive and negative sentiment as a feature
p19
aVIn contrast, the opinion towards the product is neutral as the negative sentiment is expressed towards the video
p20
aVHence, the task is a three-way classification
p21
aVTable 3 reports the accuracy for three tasks when we use all comments (TRAIN + TEST) from AUTO to predict on the TEST from TABLETS and in the opposite direction ( TABLETS u'\u005cu2192' AUTO
p22
aVSimilar to the in-domain experiments, we studied the effect of the source domain size on the target test performance
p23
aVThe FVEC bag-of-words model misclassifies it to be positive , since it contains two positive expressions ( better , better functionality ) that outweigh a single negative expression ( bulky
p24
aVSuch classifiers are traditionally based on bag-of-words and more advanced features
p25
aVGiven that the main goal of sentiment analysis is to select sentiment-bearing comments and identify their polarity, distinguishing between off-topic and spam categories is not critical
p26
aVIn particular, we define an efficient tree kernel derived from the Partial Tree Kernel, [ 10 ] , suitable for encoding structural representation of comments into Support Vector Machines (SVMs
p27
aVWe start off by presenting the results for the traditional in-domain setting, where both TRAIN and TEST come from the same domain, e.g.,, AUTO or TABLETS
p28
aVA recent study focuses on sentiment analysis for Twitter [ 14 ] , however, their corpus was compiled automatically by searching for emoticons expressing positive and negative sentiment only
p29
aVHence, their goal is different predicting comment ratings, rather than predicting the sentiment expressed in a YouTube comment or its information content
p30
aVThis difference becomes smaller as we add data from the same domain
p31
aVThe STRUCT model treats each comment as a tuple u'\u005cud835' u'\u005cudc99' = u'\u005cu27e8' u'\u005cud835' u'\u005cudc7b' , u'\u005cud835' u'\u005cudc97' u'\u005cu27e9' composed of a shallow syntactic tree u'\u005cud835' u'\u005cudc7b' and a feature vector u'\u005cud835' u'\u005cudc97'
p32
aVConsidering a real-life application, it is important not only to detect the polarity of the comment, but to also identify if it is expressed towards the product or the video
p33
aVIn contrast, comments from TABLETS category tend to be more elaborated and well-argumented, thus, benefiting from the expressiveness of the structural representations
p34
aVThis is an important advantage of our structural approach, since we cannot realistically expect to obtain manual annotations for 10k+ comments for each (of many thousands) product domains present on YouTube
p35
aVHence, the impractical task of annotating data for each YouTube category can be mitigated by the use of models that adapt better across domains
p36
aVWhen applied to STRUCT trees, SHTK exactly computes the same feature space as PTK, but in faster time (on average
p37
aV2010 ) focus on exploiting user ratings (counts of u'\u005cu2018' thumbs up/down u'\u005cu2019' as flagged by other users) of YouTube video comments to train classifiers to predict the community acceptance of new comments
p38
aV7 7 We exclude comments annotated as both video and product
p39
aV1 1 The corpus and the annotation guidelines are publicly available at http://projects.disi.unitn.it/iKernels/projects/sentube/ It is the first manually annotated corpus that enables researchers to use supervised methods on YouTube for comment classification and opinion analysis
p40
aVThus, we merge the spam and off-topic into a single uninformative category
p41
aVIf the comment contains several statements of different polarities, it is annotated as both positive and negative u'\u005cu201c' Love the video but waiting for iPad 4 u'\u005cu201d'
p42
aVSince the number of comments per video varies, the resulting sizes of each set are different (we use the larger split for TRAIN
p43
aVThe fragment space is obviously the same, as the node labels of different levels in STRUCT are different and will not be matched by PTK either
p44
aVThe third contribution of the paper is a novel structural representation, based on shallow syntactic trees enriched with conceptual information, i.e.,, tags generalizing the specific topic of the video, e.g.,, iPad , Kindle , Toyota Camry
p45
aVSimilar to Twitter, most YouTube comments are very short, the language is informal with numerous accidental and deliberate errors and grammatical inconsistencies, which makes previous corpora less suitable to train models for OM on YouTube
p46
aVIn total we have annotated 208 videos with around 35k comments (128 videos TABLETS and 80 for AUTO
p47
aVAs we will see next, this picture changes when we perform the cross-domain study
p48
aVMoreover, tree kernels generate all possible subtrees, thus producing generalized (back-off) features, e.g.,, [S [negative-VP [negative-V [destroy]] [PRODUCT-NP]]]] or [S [negative-VP [PRODUCT-NP]]]]
p49
aVWe perform OM on YouTube using supervised methods, e.g.,, SVM
p50
aVHence, for each pair of comments u'\u005cud835' u'\u005cudc99' 1 and u'\u005cud835' u'\u005cudc99' 2 , we define the following comment similarity kernel
p51
aVHence, it is of crucial importance to distinguish between these two types of comments
p52
aVMost of the videos come with a title and a short description, which can be used to encode the topicality of each comment by looking at their overlap
p53
aVIt is likely due to the nature of the TABLETS videos, that are more geek-oriented, where users are more prone to share their opinions and enter involved discussions about a product
p54
aVThus, some comments do not contain any explicit positive or negative opinions, but provide detailed and well-argumented criticism, for example, this phone is heavy
p55
aVThe aforementioned corpora are, however, only partially suitable for developing models on social media, since the informal text poses additional challenges for Information Extraction and Natural Language Processing
p56
aV- negation the count of negation words, e.g.,, { don u'\u005cu2019' t, never, not, etc
p57
aVExploiting the information from user ratings is a feature that we have not exploited thus far, but we believe that it is a valuable feature to use in future work
p58
aVIndeed, SHTK required to be only applied to node pairs from the same level (see Eq
p59
aVNevertheless, there is almost no work showing effective OM on YouTube comments
p60
aVThis reduces the time for selecting the matching-node pairs carried out in PTK [ 10 , 11 ]
p61
aVThus, given H , the height of the STRUCT trees, where each level h contains nodes of the same type, i.e.,, chunk, POS, and lexical nodes, we define SHTK as the following 5 5 To have a similarity score between 0 and 1, a normalization in the kernel space, i.e., S u'\u005cu2062' H u'\u005cu2062' T u'\u005cu2062' K u'\u005cu2062' ( T 1 , T 2 ) S u'\u005cu2062' H u'\u005cu2062' T u'\u005cu2062' K u'\u005cu2062' ( T 1 , T 1 ) × S u'\u005cu2062' H u'\u005cu2062' T u'\u005cu2062' K u'\u005cu2062' ( T 2 , T 2 ) is applied
p62
aVTherefore, rather than trying to build a specialized system for every new target domain, as it has been done in most prior work on domain adaptation [ 3 , 4 ] , the domain adaptation problem boils down to finding a more robust system [ 25 , 17 ]
p63
aVHence, doing sentiment research in such an environment is highly relevant for the community
p64
aVTo improve the speed computation of T u'\u005cu2062' K , we consider pairs of nodes ( n 1 , n 2 ) belonging to the same tree level
p65
aVWhile the linguistic conventions used on Twitter and YouTube indeed show similarities [ 2 ] , focusing on YouTube allows to exploit context information, possibly also multi-modal information, not available in isolated tweets, thus rendering it a valuable resource for the future research
p66
aVThey help to build a system that is more robust across domains
p67
aVThe largest group of errors are implicit sentiments
p68
aVwhere N T 1 and N T 2 are the sets of the T 1 u'\u005cu2019' s and T 2 u'\u005cu2019' s nodes, respectively and u'\u005cu0394' u'\u005cu2062' ( n 1 , n 2 ) is equal to the number of common fragments rooted in the n 1 and n 2 nodes, according to several possible definition of the atomic fragments
p69
aVYouTube is a unique environment, just like Twitter, but probably even richer multi-modal, with a social graph, and discussions between people sharing an interest
p70
aVMoreover, such taggers have been recently updated with models [ 18 , 5 ] trained specifically to process noisy texts showing significant reductions in the error rate on user-generated texts, e.g.,, Twitter
p71
aVHence, we use the CMU Twitter pos-tagger [ 5 , 13 ] to obtain the part-of-speech tags
p72
aVA binary classifier is trained for each of the classes and the predicted class is obtained by taking a class from the classifier with a maximum prediction score
p73
aVSimilar to the opinion classification task, comment type classification is a multi-class classification with three classes video , product and uninform
p74
aVWe cast this problem as a single multi-class classification task with seven classes the Cartesian product between { product, video } type labels and { positive, neutral, negative } sentiment labels plus the uninformative category ( spam and off-topic
p75
aVSentiment classification
p76
aVFor this purpose, we drew the learning curves of the FVEC and STRUCT models applied to the sentiment and type tasks (Figure 3
p77
aVType classification
p78
aVOur structures are specifically adapted to the noisy user-generated texts and encode important aspects of the comments, e.g.,, words from the sentiment lexicons, product concepts and negation words, which specifically targets the sentiment and comment type classification tasks
p79
aVWhile previous state-of-the-art models for opinion classification have been successfully applied to traditional corpora [ 15 ] , YouTube comments pose additional challenges i) polarity words can refer to either video or product while expressing contrasting sentiments; (ii) many comments are unrelated or contain spam; and (iii) learning supervised models requires training data for each different YouTube domain, e.g.,, tablets , automobiles , etc
p80
aVThis section reports i) experiments on individual subtasks of opinion and type classification; (ii) the full task of predicting type and sentiment; (iii) study on the adaptability of our system by learning on one domain and testing on the other; (iv) learning curves that provide an indication on the required amount and type of data and the scalability to other domains
p81
aVTo address the specifics of OM tasks on YouTube comments, we enrich syntactic trees with semantic tags to encode i) central concepts of the video, (ii) sentiment-bearing words expressing positive or negative sentiment and (iii) negation words
p82
aVOur approach to OM on YouTube relies on the design of classifiers to predict comment type and opinion polarity
p83
aVWe define a novel and efficient tree kernel function, namely, Sh allow syntactic T ree K ernel (SHTK), which is as expressive as the Partial Tree Kernel (PTK) [ 10 ] to handle feature engineering over the structural representations of the STRUCT model
p84
aVWhile the previously discussed sentiment and type identification tasks are useful to model and study in their own right, our end goal is given a stream of comments, to jointly predict both the type and the sentiment of each comment
p85
aVOur goal is to learn a model to automatically detect the sentiment and type of each comment
p86
aVShallow syntactic tree kernel
p87
aVFor the sentiment task we exclude off-topic and spam comments as well as comments with ambiguous sentiment, i.e.,, annotated as both positive and negative
p88
aVConsidering per-class performance, correctly predicting negative sentiment is most difficult for both AUTO and TABLETS , which is probably caused by the smaller proportion of the negative comments in the training set
p89
aVThe resulting annotator agreement u'\u005cu0391' value [ 9 , 1 ] scores are 60.6 ( AUTO ), 72.1 ( TABLETS ) for the sentiment task and 64.1 ( AUTO ), 79.3 ( TABLETS ) for the type classification task
p90
aV5.1 sentiment, type and full
p91
aVFinally, we perform a set of cross-domain experiments that describe the enhanced adaptability of the patterns generated by the STRUCT model
p92
aVThis is confirmed by the results from the previous sentiment and type tasks, where we saw that handling negative sentiment and detecting video-related comments are most difficult
p93
aVTable 1 shows the data distribution across the task-specific classes u'\u005cu2013' sentiment and type classification
p94
aVThe plot shows that when little training data is available, the features generated by the STRUCT model exhibit better adaptability (up to 10% of improvement over FVEC
p95
aVIt should be noted that vector-based ( FVEC ) model relies only on feature counts whereas the proposed tree encodes powerful contextual syntactic features in terms of tree fragments
p96
aVFor example, the comment in Figure 1 shows two positive and one negative word from the sentiment lexicon
p97
aV- lexicon a sentiment lexicon is a collection of words associated with a positive or negative sentiment
p98
aVConversely, for the type task, we observe that comments from AUTO are uniformly distributed among the three classes, while for the TABLETS the majority of comments are product related
p99
aVFor each video, we extracted all available comments (limited to maximum 1k comments per video) and manually annotated each comment with its type and polarity
p100
aVThe number of comments assigned to both product and video is relatively small (8% for TABLETS and 4% for AUTO
p101
aVThis would strongly bias the FVEC sentiment classifier to assign a positive label to the comment
p102
aVA polynomial kernel of degree 3 is applied to feature vectors ( FVEC
p103
aVWe enrich the traditional bag-of-word representation with features from a sentiment lexicon and features quantifying the negation present in the comment
p104
aVIn this paper, we carry out a systematic study on OM targeting YouTube comments; its contribution is three-fold firstly, to solve the problems outlined above, we define a classification schema, which separates spam and not related comments from the informative ones, which are, in turn, further categorized into video- or product-related comments (type classification
p105
aVThese trees are input to tree kernel functions for generating structural features
p106
aVThis is useful to assess the adaptability of features exploited by the FVEC and STRUCT models with the change in the number of labeled examples available for training
p107
aVcontains two positive and one negative word, yet the sentiment towards the product is negative (the negative word destroy refers to Xoom
p108
aVFull task
p109
aVAt the final stage, different classifiers assign polarity (positive, negative or neutral) to each type of a meaningful comment
p110
aVWe conjecture that sentiment prediction for AUTO category is largely driven by one-shot phrases and statements where it is hard to improve upon the bag-of-words and sentiment lexicon features
p111
aVFor the sentiment task about 50% of the comments have neutral polarity, while the negative class is much less frequent
p112
aVAdditionally, we considered a setting including a small amount of training data from the target data (i.e.,, supervised domain adaptation
p113
aVWe compare FVEC and STRUCT models on three tasks described in Sec
p114
aVTo automatically identify concept words of the video we use context words (tokens detected as nouns by the part-of-speech tagger) from the video title and video description and match them in the tree
p115
aVRegarding the polarity, we distinguish between { positive, negative, neutral } sentiments with respect to the product and the video
p116
aVSecondly, we observe that the STRUCT model provides 1-3% of absolute improvement in accuracy over FVEC for every task
p117
aVSimilarly, the nodes associated with words found in the sentiment lexicon are enriched with a polarity tag (either positive or negative ), while negation words are labeled with the NEG tag
p118
aVCombining structural and vector models
p119
aVRegarding the full setting, where the goal is to have a joint prediction of the comment sentiment and type, we observe that video-negative and video-positive are the most scarce classes, which makes them the most difficult to predict
p120
aVMost of the previous work on supervised sentiment analysis use feature vectors to encode documents
p121
aVIn particular, we chose two product categories automobiles ( AUTO ) and tablets ( TABLETS
p122
aVIn contrast, we show that adding structural features from syntactic trees is particularly useful for the cross-domain setting
p123
aVAs full syntactic parsers such as constituency or dependency tree parsers would significantly degrade in performance on noisy texts, e.g.,, Twitter or YouTube comments, we opted for shallow structures, which rely on simpler and more robust components a part-of-speech tagger and a chunker
p124
aVWe split all the videos 50% between training set (TRAIN) and test set (TEST), where each video contains all its comments
p125
aVFor individual categories the F1 scores are also improved by the STRUCT model (except for the negative classes for AUTO , where we see a small drop
p126
aVThis can be explained by the following i) TABLETS contains more training data and (ii) videos from AUTO and TABLETS categories draw different types of audiences u'\u005cu2013' well-informed users and geeks expressing better-motivated opinions about a product for the former vs more general audience for the latter
p127
aVClearly, the bag-of-words lacks the structural information linking the sentiment with the target product
p128
aVSecondly, the resulting SHTK is essentially a special case of PTK [ 10 ] , adapted to the shallow structural representation STRUCT (see Sec
p129
aVproduct discuss the topic product in general or some features of the product;
p130
aVThe bag-of-words model seems to be affected by the data sparsity problem which becomes a crucial issue when only a small training set is available
p131
aVAdditionally, many comments are irrelevant for both the product and the video ( off-topic ) or may even contain spam
p132
aVInterestingly, the ratios between polarities expressed in comments from AUTO and TABLETS are very similar across both TRAIN and TEST
p133
aVThis allows us to filter out irrelevant comments, providing accurate OM distinguishing comments about the video and the target product
p134
aV- video concept cosine similarity between a comment and the title/description of the video
p135
aVOur approach relies on robust syntactic structures to automatically generate patterns that adapt better
p136
aVThe second contribution of the paper is the creation and annotation (by an expert coder) of a comment corpus containing 35k manually labeled comments for two product YouTube domains tablets and automobiles
p137
aV[S [negative-VP [negative-V [destroy]] [PRODUCT-NP [PRODUCT-N [xoom]]]] is a strong feature (induced by tree kernels) to help the classifier to discriminate such hard cases
p138
aVFor the matched words, we enrich labels of their parent nodes (part-of-speech and chunk) with the PRODUCT tag
p139
aVOur model ( FVEC ) encodes each document using the following feature groups
p140
aVIn other words, the tree fragment
p141
aVOur second component u'\u005cu2013' chunker u'\u005cu2013' is taken from [ 18 ] , which also comes with a model trained on Twitter data 3 3 The chunker from [ 18 ] relies on its own POS tagger, however, in our structural representations we favor the POS tags from the CMU Twitter tagger and take only the chunk tags from the chunker and shown to perform better on noisy data such as user comments
p142
aVFor the type task, video-related class is substantially more difficult than product-related for both categories
p143
aV8 8 The results for the other direction ( TABLETS u'\u005cu2192' AUTO ) show similar behavior
p144
aVGiven the complexity and the novelty of the task, we exploit structural kernels to automatically engineer novel features
p145
aV5.2 ), which give the possibility to study the domain adaptability of the supervised models by training on one category and testing on the other (and vice versa
p146
aVFollowing the convolution kernel framework, we define the new SHTK function from Eq
p147
aVThe general equations for Convolution Tree Kernels is
p148
aVMoreover, we introduce additional tags, e.g.,, video concepts, polarity and negation words, to achieve better generalization across different domains where the word distribution and vocabulary changes
p149
aVThis results in the different quality of comments with the AUTO being more challenging to analyze
p150
aVFinally, our results show that our models are adaptable, especially when the structural information is used
p151
aVThe latter are automatically generated and learned by SVMs with expressive tree kernels
p152
aVWhile a few successful attempts have been made to use more involved linguistic analysis for opinion mining, such as dependency trees with latent nodes [ 26 ] and syntactic parse trees with vectorized nodes [ 24 ] , recently, a comprehensive study by Wang and Manning ( 2012 ) showed that a simple model using bigrams and SVMs performs on par with more complex models
p153
aV}, found in a comment
p154
aV1 to compute the similarity between tree structures
p155
aVFirstly, we note that the performance on TABLETS is much higher than on AUTO across all tasks
p156
aVTo have a more general and expressive kernel, we use u'\u005cu0394' previously defined for PTK
p157
aVFor the full task, the class video-negative accounts for the largest error
p158
aVTo the best of our knowledge, the only exception is given by the classification system of YouTube comments proposed by Siersdorfer et al
p159
aVwhere K TK computes SHTK (defined next), and K v is a kernel over feature vectors, e.g.,, linear, polynomial, Gaussian, etc
p160
aVIn particular, our shallow tree structure is a two-level syntactic hierarchy built from word lemmas (leaves) and part-of-speech tags that are further grouped into chunks (Fig
p161
aVTo build a corpus of YouTube comments, we focus on a particular set of videos (technical reviews and advertisings) featuring commercial products
p162
aVAdditionally, videos from the AUTO category (both commercials and user reviews) are more visually captivating and, being generally oriented towards a larger audience, generate more video-related comments
p163
aVIt should be noted that firstly, the use of a subsequence kernel makes it possible to generate child subsets of the two nodes, i.e.,, it allows for gaps, which makes matching of syntactic patterns less rigid
p164
aVTable 2 reports the per-class performance and the overall accuracy of the multi-class classifier
p165
aVThis ensures that all comments from the same video appear either in TRAIN or in TEST
p166
aVFor the rest of the comments, we assigned the entire annotation task to a single coder
p167
aVThe latter computes the similarity between two comments
p168
aVThe comments from different product domains exhibit different properties (cf
p169
aVFor example, consider a typical comment on a YouTube review video about a Motorola Xoom tablet
p170
aV2 2 The list of negation words is adopted from http://sentiment.christopherpotts.net/lingstruc.html Our structural representation (defined next) enables a more involved treatment of negation
p171
aVSome issues remain problematic even for the structural model
p172
aVvideo discuss the video or some of its details;
p173
aVFor this purpose, we build a multi-class classifier using the one-vs-all scheme
p174
aVOur back-end binary classifier is SVM-light-TK 4 4 http://disi.unitn.it/moschitti/Tree-Kernel.htm , which encodes structural kernels in the SVM-light [ 7 ] solver
p175
aVSimilarly, the following comment
p176
aVWe use two manually constructed sentiment lexicons that are freely available the MPQA Lexicon [ 29 ] and the lexicon of Hu and Liu ( 2004
p177
aV3 ), where the node labels can match u'\u005cu2013' chunk, POS or lexicals
p178
aVThe most commonly used datasets include the MPQA corpus of news documents [ 29 ] , web customer review data [ 6 ] , Amazon review data [ 3 ] , the JDPA corpus of blogs [ 8 ] , etc
p179
aVTo evaluate the quality of the produced labels, we asked 5 annotators to label a sample set of one hundred comments and measured the agreement
p180
aVA typical kernel machine, e.g.,, SVM, classifies a test input u'\u005cud835' u'\u005cudc99' using the following prediction function h u'\u005cu2062' ( u'\u005cud835' u'\u005cudc99' ) = u'\u005cu2211' i u'\u005cu0391' i u'\u005cu2062' y i u'\u005cu2062' K u'\u005cu2062' ( u'\u005cud835' u'\u005cudc99' , u'\u005cud835' u'\u005cudc99' i ) , where u'\u005cu0391' i are the model parameters estimated from the training data, y i are target variables, u'\u005cud835' u'\u005cudc99' i are support vectors, and K ( u'\u005cu22c5' , u'\u005cu22c5' ) is a kernel function
p181
aVTo account for these cases, a deep understanding of the product domain is necessary
p182
aVwhere u'\u005cu039b' , u'\u005cu039c' u'\u005cu2208' [ 0 , 1 ] are decay factors; the large sum is adopted from a definition of the subsequence kernel [ 22 ] to generate children subsets with gaps, which are then used in a recursive call to u'\u005cu0394'
p183
aVMost prior work on more general OM has been carried out on more standardized forms of text, such as consumer reviews or newswire
p184
aVFinally, given its recursive definition in Eq
p185
aVoff-topic comments that have almost no content ( u'\u005cu201c' lmao u'\u005cu201d' ) or content that is not related to the video ( u'\u005cu201c' Thank you u'\u005cu201d'
p186
aVIt counts the number of common substructures between two trees T 1 and T 2 without explicitly considering the whole fragment space
p187
aVThis is in line with recent advances in parsing the web [ 16 ] , where participants where asked to build a single system able to cope with different yet related domains
p188
aVThese representations have been inspired by the semantic models developed for Question Answering [ 12 , 19 , 20 ] and Semantic Textual Similarity [ 21 ]
p189
aV[positive-NP [positive-A N]], [S [negative-VP [negative-V [destroy]] [PRODUCT-NP]]]] and so on
p190
aV3 and the use of subsequence (with gaps), SHTK can derive useful dependencies between its elements
p191
aVSuch comments might also include irony
p192
aVSocial media such as Twitter, Facebook or YouTube contain rapidly changing information generated by millions of users that can dramatically affect the reputation of a person or an organization
p193
aVTo collect the videos, we compiled a list of products and queried the YouTube gData API 6 6 https://developers.google.com/youtube/v3/ to retrieve the videos
p194
aVThe above equation can be applied with any u'\u005cu0394' function
p195
aV- word n-grams we compute unigrams and bigrams over lower-cased word lemmas where binary values are used to indicate the presence/absence of a given item
p196
aVWe then manually excluded irrelevant videos
p197
aVspam provide advertising and malicious links; and
p198
aVFurther details on the corpus can be found in Uryupina et al
p199
aVWe distinguish between the following types
p200
aVConsider the following comment optimus pad is better this xoom is just to bulky but optimus pad offers better functionality
p201
aVFor example, it will generate the following subtree fragments
p202
aVSec
p203
aVThis raises the importance of automatic extraction of sentiments and opinions expressed in social media
p204
aVSiersdorfer et al
p205
aViPad 2 is better the superior apps just destroy the xoom
p206
aVwhere N T 1 h and N T 2 h are sets of nodes at height h
p207
aVHere, c n 1 u'\u005cu2062' ( i ) is the i t u'\u005cu2062' h child of the node n 1 ; I u'\u005cu2192' 1 and I u'\u005cu2192' 2 are two sequences of indexes that enumerate subsets of children with gaps, i.e.,, I u'\u005cu2192' = ( i 1 , i 2
p208
aVthis guy really puts a negative spin on this , and I u'\u005cu2019' m not sure why , this seems crazy fast , and I u'\u005cu2019' m not entirely sure why his pinch to zoom his laggy all the other xoom reviews
p209
aVThe authors are supported by a Google Faculty Award 2011, the Google Europe Fellowship Award 2013 and the European Community u'\u005cu2019' s Seventh Framework Programme (FP7/2007-2013) under the grant #288024
p210
aV; and d u'\u005cu2062' ( I u'\u005cu2192' 1 ) = I u'\u005cu2192' 1 u'\u005cu2062' l u'\u005cu2062' ( I u'\u005cu2192' 1 ) - I u'\u005cu2192' 11 + 1 and d u'\u005cu2062' ( I u'\u005cu2192' 2 ) = I u'\u005cu2192' 2 u'\u005cu2062' l u'\u005cu2062' ( I u'\u005cu2192' 2 ) - I u'\u005cu2192' 21 + 1 , which penalizes subsequences with larger gaps
p211
aVMore formally if n 1 and n 2 are leaves then u'\u005cu0394' u'\u005cu2062' ( n 1 , n 2 ) = u'\u005cu039c' u'\u005cu2062' u'\u005cu039b' u'\u005cu2062' ( n 1 , n 2 ) ; else u'\u005cu0394' u'\u005cu2062' ( n 1 , n 2 )
p212
aVLiMoSINe
p213
aV2014 )
p214
aVI
p215
aV, with 1 u'\u005cu2264' i 1 i 2 i
p216
ag215
aV2010 )
p217
aV3.2
p218
aV1
p219
a.