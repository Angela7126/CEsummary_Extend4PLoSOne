<html>
<head>
<title>P14-1010.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Work on target language morphological segmentation for SMT can be divided into three subproblems segmentation, desegmentation and integration</a>
<a name="1">[1]</a> <a href="#1" id=1>In summary, we are given a segmented lattice, which encodes the decoder u'\u2019' s translation space as an acceptor over morphemes</a>
<a name="2">[2]</a> <a href="#2" id=2>The second indicates that the source words contained a single discontiguity, as in a word-by-word translation of the u'\u201c' with his blue car u'\u201d' example from Section 2.2</a>
<a name="3">[3]</a> <a href="#3" id=3>The chains found by this search are desegmented and then added to the output lattice as edges</a>
<a name="4">[4]</a> <a href="#4" id=4>This can be accomplished by composing the lattice with a desegmenting transducer that consumes morphemes and outputs desegmented words</a>
<a name="5">[5]</a> <a href="#5" id=5>In Equation 1 only, we overload u'\u201c' + u'\u201d' as the Kleene cross</a>
<a name="6">[6]</a> <a href="#6" id=6>Once n -best lists have been desegmented, we can tune on unsegmented references as a side-benefit</a>
<a name="7">[7]</a> <a href="#7" id=7>The one-best approach can be extended easily by desegmenting n -best lists of segmented decoder output</a>
<a name="8">[8]</a> <a href="#8" id=8>This is sometimes referred to as a word graph [ 32 ] , although in our case the segmented phrase table also produces tokens that correspond to morphemes</a>
<a name="9">[9]</a> <a href="#9" id=9>Our goal is to desegment the decoder u'\u2019' s output lattice, and</a>
</body>
</html>