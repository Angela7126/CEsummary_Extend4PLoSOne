(lp0
VTable 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings
p1
aVIn this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing
p2
aVWe use hedge segmentation as a finite-state pre-processing step for hedge context-free parsing
p3
aVTable 2 shows the results on the development set when segmenting prior to hedge parsing
p4
aVGiven a set of labeled pairs ( S , H ) where S is a sentence of n words w 1 u'\u005cu2062' u'\u005cu2026' u'\u005cu2062' w n and H is its hedge parse tree, word w b belongs to B if there is a hedge constituent spanning w b u'\u005cu2062' u'\u005cu2026' u'\u005cu2062' w e for some e u'\u005cu2265' b and w b belongs to B ¯ otherwise
p5
aVIn this paper, we consider the problem of hedge parsing , i.e.,, discovering every constituent of length up to some span L
p6
aVThis is compared with a baseline of parsing with a typically induced context-free grammar and transforming the result via the hedge transform, which provides a ceiling on accuracy and a floor on efficiency
p7
aVFinally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a
p8
a.