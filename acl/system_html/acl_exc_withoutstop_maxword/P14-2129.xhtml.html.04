<html>
<head>
<title>P14-2129.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Table 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings</a>
<a name="1">[1]</a> <a href="#1" id=1>We investigate pre-segmenting the sentences with a finite-state model prior to hedge parsing, and achieve large speedups relative to hedge parsing the whole string, though at a loss in accuracy due to cascading segmentation errors</a>
<a name="2">[2]</a> <a href="#2" id=2>It is possible to parse with a standardly induced PCFG using this sort of hedge constrained parsing that only considers a subset of the chart cells, and speedups are achieved, however this is clearly non-optimal, since the model is ill-suited to combining hedges into flat structures at the root of the tree</a>
<a name="3">[3]</a> <a href="#3" id=3>Finally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser</a>
<a name="4">[4]</a> <a href="#4" id=4>The hedge tree transform converts the original parse tree into a hedge parse tree</a>
<a name="5">[5]</a> <a href="#5" id=5>Given a set of labeled pairs ( S , H ) where S is a sentence of n words w 1 u'\u2062' u'\u2026' u'\u2062' w n and H is its hedge parse tree, word w b belongs to B if there is a hedge constituent spanning w b u'\u2062' u'\u2026' u'\u2062' w e for some e u'\u2265' b</a>
</body>
</html>