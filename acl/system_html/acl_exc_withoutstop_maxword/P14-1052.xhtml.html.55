<html>
<head>
<title>P14-1052.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>The first step finds an adjoining location by searching through our sentence to find any subtree with a root whose label matches the root node of the auxiliary tree</a>
<a name="1">[1]</a> <a href="#1" id=1>In the second step, the target subtree is removed from the sentence tree, and placed in the auxiliary tree as a direct replacement for the foot node</a>
<a name="2">[2]</a> <a href="#2" id=2>Finally, the modified auxiliary tree is placed back in the sentence tree in the original target location</a>
<a name="3">[3]</a> <a href="#3" id=3>Note that, as STRUCT is an anytime algorithm, valid sentences are available very early in the generation process, despite the size of the set of adjoining trees</a>
<a name="4">[4]</a> <a href="#4" id=4>Entities are defined as any element anchored by precisely one node in the tree which can appear in a statement representing the semantic content of the tree</a>
<a name="5">[5]</a> <a href="#5" id=5>Thus we use as a reward a measure of the match between the semantic annotation of the partial tree and the communicative goal</a>
<a name="6">[6]</a> <a href="#6" id=6>We formulate NLG as a planning problem on a Markov decision process (MDP) [ 15 ]</a>
<a name="7">[7]</a> <a href="#7" id=7>In order to build a lookahead tree, we use a u'\u201c' rollout policy u'\u201d' This policy has two components if it encounters a state already in the tree, it follows a u'\u201c' tree policy, u'\u201d' discussed further below</a>
<a name="8">[8]</a> <a href="#8" id=8>Other approaches</a>
</body>
</html>