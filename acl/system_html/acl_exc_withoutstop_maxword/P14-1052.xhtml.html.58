<html>
<head>
<title>P14-1052.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>The first step finds an adjoining location by searching through our sentence to find any subtree with a root whose label matches the root node of the auxiliary tree</a>
<a name="1">[1]</a> <a href="#1" id=1>In the second step, the target subtree is removed from the sentence tree, and placed in the auxiliary tree as a direct replacement for the foot node</a>
<a name="2">[2]</a> <a href="#2" id=2>Finally, the modified auxiliary tree is placed back in the sentence tree in the original target location</a>
<a name="3">[3]</a> <a href="#3" id=3>Note that, as STRUCT is an anytime algorithm, valid sentences are available very early in the generation process, despite the size of the set of adjoining trees</a>
<a name="4">[4]</a> <a href="#4" id=4>In this section, we compare STRUCT to a state-of-the-art NLG system, CRISP, 1 1 We were unfortunately unable to get the PCRISP system to compile, and so we could not evaluate it and evaluate three hypotheses i) STRUCT is comparable in speed and generation quality to CRISP as it generates increasingly large referring expressions, (ii) STRUCT is comparable in speed and generation quality to CRISP as the size of the grammar which they use increases, and (iii) STRUCT is capable of communicating complex propositions, including multiple concurrent goals, negated goals, and nested subclauses</a>
<a name="5">[5]</a> <a href="#5" id=5>We formulate NLG as a planning problem on a Markov decision process (MDP)</a>
</body>
</html>