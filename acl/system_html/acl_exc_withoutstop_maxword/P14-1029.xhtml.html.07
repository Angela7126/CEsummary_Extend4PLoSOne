<html>
<head>
<title>P14-1029.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>By examining sentiment compositions of negators and arguments, we model the quantitative behavior of negators in changing sentiment</a>
<a name="1">[1]</a> <a href="#1" id=1>We extend RNTN to directly consider the sentiment information of arguments</a>
<a name="2">[2]</a> <a href="#2" id=2>Figure 1 shows the distribution of the effect of negators on sentiment without considering further semantics of the arguments</a>
<a name="3">[3]</a> <a href="#3" id=3>Note that the two neural network based models incorporate the syntax and semantics by representing each node with a vector</a>
<a name="4">[4]</a> <a href="#4" id=4>A recursive neural tensor network (RNTN) is a specific form of feed-forward neural network based on syntactic (phrasal-structure) parse tree to conduct compositional sentiment analysis</a>
<a name="5">[5]</a> <a href="#5" id=5>Each node of the parse tree is a fixed-length vector that encodes compositional semantics and syntax, which can be used to predict the sentiment of this node</a>
<a name="6">[6]</a> <a href="#6" id=6>Figure 1 illustrates the effect of a common list of negators on sentiment as observed on the Stanford Sentiment Treebank</a>
<a name="7">[7]</a> <a href="#7" id=7>This model learns the syntax and semantics of the negator u'\u2019' s argument with a recursive neural network</a>
<a name="8">[8]</a> <a href="#8" id=8>Making the basic shifting model to be dependent on the negators (model 4) reduces the prediction error significantly as compared with the error of the basic shifting (model 3</a>
<a name="9">[9]</a> <a href="#9" id=9>Note that depending on different purposes, p 1 s u'\u2062' e u'\u2062' n can take the value of the automatically predicted sentiment distribution obtained in</a>
</body>
</html>