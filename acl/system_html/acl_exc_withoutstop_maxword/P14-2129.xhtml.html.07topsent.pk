(lp0
VThe hedge tree transform converts the original parse tree into a hedge parse tree
p1
aVFirst, we present the simple tree transform from a full treebank parse tree to a (root attached) sequence of hedges
p2
aVNext, we discuss modifications to inference and the resulting computational complexity gains
p3
aVFinally, we discuss segmenting to further reduce computational complexity
p4
aVIn section 2.3 , we present our approach to hedge segmentation
p5
aVIn the resulting hedge parse tree, every child of the top-most node spans at most L words
p6
aVTable 1 presents hedge parsing accuracy on the development set for the full parsing baseline, where the output of regular PCFG parsing is transformed to hedges and evaluated, versus parsing with a hedgebank grammar, with no segmentation of the strings
p7
aVIn this section, we present the details of our approach
p8
aVIn this section we present our segmentation model which takes the input sentence and chunks it into appropriate segments for hedge parsing
p9
aVTo transform an original tree to a hedge tree, we remove every non-terminal with span larger than L and attach its children to its parent
p10
aVFinally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser
p11
aVA unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially
p12
a.