<html>
<head>
<title>P14-2133.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>For OOV words which are not in the dictionary of embeddings, we back off to the unknown word model for the underlying parser</a>
<a name="1">[1]</a> <a href="#1" id=1>In order to isolate the contribution from word embeddings, it is useful to demonstrate improvement over a parser that already achieves state-of-the-art performance without vector representations</a>
<a name="2">[2]</a> <a href="#2" id=2>It seems clear that word embeddings exhibit some syntactic structure</a>
<a name="3">[3]</a> <a href="#3" id=3>We take the best-performing combination of all of these models (based on development experiments, a combination of the lexical pooling model with u'\u0392' = 0.3 , and OOV, both using c w word embeddings), and evaluate this on the WSJ test set (Table 2</a>
<a name="4">[4]</a> <a href="#4" id=4>It has been less clear how (and indeed whether) word embeddings in and of themselves are useful for constituency parsing</a>
<a name="5">[5]</a> <a href="#5" id=5>This paper investigates a variety of ways in which word embeddings might augment a constituency parser with a discrete state space</a>
<a name="6">[6]</a> <a href="#6" id=6>There certainly exist competitive parsers that internally represent lexical items as real-valued vectors, such as the neural network-based parser of Henderson ( 2004 ) , and even parsers which use pre-trained word embeddings to represent the lexicon, such as Socher et al</a>
<a name="7">[7]</a> <a href="#7" id=7>Each u'\u0391' t , w is learned in the same way as its corresponding probability in the original parser model u'\u2014' during each M step of the training procedure, u'\u0391' w , t is set to the expected number of times the word w appears under the refined tag t</a>
<a name="8">[8]</a> <a href="#8" id=8>1 1 Both downloaded from https://code.google.com/p/umd-featured-parser/</a>
</body>
</html>