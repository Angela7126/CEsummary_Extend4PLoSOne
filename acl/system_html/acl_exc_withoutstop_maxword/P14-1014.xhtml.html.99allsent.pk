(lp0
VAs mentioned in Section 3.1, the knowledge learned from the WRRBM can be investigated incrementally, using word representation , which corresponds to initializing only the projection layer of web-feature module with the projection matrix of the learned WRRBM, or ngram-level representation , which corresponds to initializing both the projection and sigmoid layers of the web-feature module by the learned WRRBM
p1
aVThis can be achieved by also initializing the parameters of the second layer of the web-feature module using the position-dependent weight matrix and hidden bias of the learned WRRBM
p2
aVThis can be achieved by initializing only the first layer of the web module with the projection matrix u'\u005cud835' u'\u005cudc03' of the learned WRRBM
p3
aVSuch distribution can be easily obtained by adding a soft-max layer on top of the output layer to perform a local normalization, as done by Collobert et al
p4
aVWe integrate the learned encoder with a set of well-established features for POS tagging [ 21 , 5 ] in a single neural network, which is applied as a scorer to an easy-first POS tagger
p5
aVThe main challenge to designing the neural network structure is on the one hand, we hope that the model can take the advantage of information provided by the learned WRRBM, which reflects general properties of web texts, so that the model generalizes well in the web domain; on the other hand, we also hope to improve the model u'\u005cu2019' s discriminative power by utilizing well-established POS tagging features, such as those of Ratnaparkhi ( 1996 )
p6
aVThis may partly be due to the fact that unlike computer vision tasks, the input structure of POS tagging or other sequential labelling tasks is relatively simple, and a single non-linear layer is enough to model the interactions within the input [ 27 ]
p7
aVAlternatively, we can choose to use the hidden states of the WRRBM, which can be treated as the representations of the input n-gram
p8
aVOur approach is to leverage the two sources of information in one neural network by combining them though a shared output layer, as shown in Figure 1
p9
aVHowever, since fine-tuning is conducted with respect to the source domain , adjusting the parameters of the pre-trained representation towards optimizing source domain tagging accuracies would disrupt its ability in modelling the web domain data
p10
aVThis is consistent with previous work (Le Roux et al., 2011), which found that for noisy data such as web domain text, data cleaning is a effective and necessary step
p11
aVWe choose the easy-first tagging approach since it has been demonstrated to give higher accuracies than the standard left-to-right POS tagger [ 23 , 15 ]
p12
aVThe best result achieved by using a 4-gram WRRBM, ( w i - 2 , u'\u005cu2026' , w i + 1 ) , with 300 hidden units learned on 1,000k web domain sentences are shown in row 3 of Table 6
p13
aVWhile previous work [ 23 , 29 , 9 ] apply guided learning to train a linear classifier by using variants of the perceptron algorithm, we are the first to combine guided learning with a neural network, by using a margin loss and a modified back-propagation algorithm
p14
aVThis result illustrates that the ngram-level knowledge captures more complex interactions of the web text, which cannot be recovered by using only word embeddings
p15
aVPrevious work treats the learned representations either as model parameters that are further optimized in supervised fine-tuning [ 6 ] or as fixed features that are kept unchanged [ 26 , 8 ]
p16
aVCompared with the performance of the official baseline (row 4 of Table 6), which is evaluated based on the output of BerkeleyParser [ 16 , 17 ] , our baseline tagger achieves comparable accuracies on both the source and target domain data
p17
aVThe averaged accuracies are calculated across the web domain data
p18
aVThe problem we face here can be considered as a special case of domain adaptation , where we have access to labelled data on the source domain (PTB) and unlabelled data on the target domain (web data
p19
aVAnalysing and extracting useful information from the web has become an increasingly important research direction for the NLP community, where many tasks require part-of-speech (POS) tagging as a fundamental preprocessing step
p20
aVBy adopting greedy layer-wise training [ 10 , 2 ] , DBNs are capable of modelling higher order non-linear relations between the input, and has been demonstrated to improve performance for many computer vision tasks [ 10 , 2 , 13 ]
p21
aVRather than tagging a sentence from left to right, easy-first tagging is based on a deterministic process, repeatedly selecting the easiest word to tag
p22
aVThe idea of learning representations from unlabelled data and then fine-tuning a model with such representations according to some supervised criterion has been studied before [ 26 , 6 , 8 ]
p23
aVTherefore, a better idea is to keep the representation unchanged so that we can learn a function that maps the general web-text properties to its syntactic categories
p24
aVHowever, state-of-the-art POS taggers in the literature [ 5 , 23 ] are mainly optimized on the the Penn Treebank (PTB), and when shifted to web data, tagging accuracies drop significantly [ 18 ]
p25
aVThis is because the standard loss is calculated based on a unique input vector
p26
aVThe standard back-propagation algorithm [ 22 ] cannot be applied directly
p27
aVThe results suggest that using mixed data can achieve almost as good performance as using the target sub-domain data, while using mixed data yields a much more robust tagger across all sub-domains
p28
aVFeature templates are shown in Table 3, which are based on those of Ratnaparkhi (1996) and Shen et al
p29
aV2006 ) propose to induce shared representations for domain adaptation, which is based on the alternating structure optimization (ASO) method of Ando and Zhang ( 2005
p30
aVThe new representations are induced based on the auxiliary tasks defined on unlabelled data together with a dimensionality reduction technique
p31
aVMoreover, we achieve the highest tagging accuracy reported so far on this data set, surpassing those achieved using parser combinations based on self-training [ 24 , 12 ]
p32
aVIf the loss is zero, the algorithm continues to process the next untagged word
p33
aVThe tagging performance is evaluated according to the official evaluation metrics of SANCL 2012
p34
aVHowever, in this work we do not observe further improvement by employing DBNs
p35
aVAt each step during the processing of a training example, the algorithm calculates a margin loss based on two word-tag pairs ( w ¯ , t ¯ ) and ( w ^ , t ^ ) (line 4 u'\u005cu223c' line 6 w ¯ , t ¯ ) denotes the word-tag pair that has the highest model score among those that are inconsistent with the gold standard, while ( w ^ , t ^ ) denotes the one that has the highest model score among those that are consistent with the gold standard
p36
aVHere u'\u005cu201c' easiness u'\u005cu201d' is evaluated based on a statistical model
p37
aVThe tagging accuracy is defined as the percentage of words (punctuations included) that are correctly tagged
p38
aVThis condition does not hold in our case, because w ^ and w ¯ may refer to different words, which means that the margin loss in line 6 of Algorithm 2 is calculated based on two different input vectors, denoted by u'\u005cu27e8' w ^ u'\u005cu27e9' and u'\u005cu27e8' w ¯ u'\u005cu27e9' , respectively
p39
aVAll these parameters are selected according to the averaged accuracy on the development set
p40
aVThe data sets are generated by first concatenating all the cleaned unlabelled data, then selecting sentences evenly across the concatenated file
p41
aVOur method achieves a 93.27 u'\u005cu2062' % average accuracy across the web-domain, which is the best result reported so far on this data set, higher than those given by ensembled syntactic parsers
p42
aVThe input for this module is a vector of boolean values u'\u005cu03a6' u'\u005cu2062' ( x ) = ( f 1 u'\u005cu2062' ( x ) , u'\u005cu2026' , f k u'\u005cu2062' ( x ) ) , where x denotes the partially tagged input sentence and f i u'\u005cu2062' ( x ) denotes a feature function, which returns 1 if the corresponding feature fires and 0 otherwise
p43
aV[t] Training over one sentence {algorithmic} [1] \u005cREQUIRE ( x , t ) a tagged sentence, neural net n u'\u005cu2062' n \u005cENSURE updated neural net n u'\u005cu2062' n u'\u005cu2032'
p44
aVWhile in our case, each visible variable corresponds to a word, which may take on tens-of-thousands of different values
p45
aVWhile emails and weblogs are used as the development sets, reviews, news groups and Yahoo!Answers are used as the final test sets
p46
aVTherefore, the RBM need to be re-factorized to make inference tractable
p47
aVu'\u005cud835' u'\u005cudc14' u'\u005cu2260' [ ] \u005cSTATE ( w ¯ , t ¯ ) u'\u005cu2190' arg u'\u005cu2062' max ( w , t ) u'\u005cu2208' ( u'\u005cud835' u'\u005cudc14' × u'\u005cud835' u'\u005cudc13' / u'\u005cud835' u'\u005cudc11' ) u'\u005cu2061' n u'\u005cu2062' n u'\u005cu2062' ( w , t ) \u005cSTATE ( w ^ , t ^ ) u'\u005cu2190' arg u'\u005cu2062' max ( w , t ) u'\u005cu2208' u'\u005cud835' u'\u005cudc11' u'\u005cu2061' n u'\u005cu2062' n u'\u005cu2062' ( w , t
p48
aVl u'\u005cu2062' o u'\u005cu2062' s u'\u005cu2062' s u'\u005cu2190' max u'\u005cu2061' ( 0 , 1 + n u'\u005cu2062' n u'\u005cu2062' ( w ¯ , t ¯ ) - n u'\u005cu2062' n u'\u005cu2062' ( w ^ , t ^ ) ) \u005cIF l u'\u005cu2062' o u'\u005cu2062' s u'\u005cu2062' s 0 \u005cSTATE e ^ u'\u005cu2190' n u'\u005cu2062' n
p49
aVUnder the output layer, the network consists of two modules the web-feature module , which incorporates knowledge from the pre-trained WRRBM, and the sparse-feature module , which makes use of other POS tagging features
p50
aVThe neural network proposed in Section 3 is used for POS disambiguation by the easy-first POS tagger
p51
aVWe integrate the learned WRRBM into a neural network, which serves as a scorer for POS disambiguation
p52
aVThe web-feature module, shown in the lower left part of Figure 1, consists of a input layer and two hidden layers
p53
aVWe utilize the Word Representation RBM (WRRBM) factorization proposed by Dahl et al
p54
aVWe can choose to use only the word representations of the learned WRRBM
p55
aVFor POS tagging, we found that a simple linear layer yields satisfactory accuracies
p56
aVThe second layer is a sigmoid layer to model non-linear relations between the word projections
p57
aVThe first layer is a linear projection layer, where each word in the input is projected into a D -dimensional real value vector using the projection operation described in Section 2.2
p58
aVThe web-feature and sparse-feature modules are combined by a linear output layer, as shown in the upper part of Figure 1
p59
aVIn the fine-tuning phase, the parameters of the network are optimized on a set of labelled training data using guided learning
p60
aVWhile those approaches mainly explore token-level representations (word or character embeddings), using WRRBM is able to utilize both word and n-gram representations
p61
aVThe neural network of our baseline tagger only contains the sparse-feature module
p62
aVParameters of the network are trained using guided learning, where learning and search interact with each other
p63
aVInspired by this observation, we apply the RBM to learn feature representations from word n-grams
p64
aVSuch representations capture hidden properties of the input, and can be used as features for supervised tasks [ 3 , 20 ]
p65
aVThe input for the this module is the word n-gram ( w i - l , u'\u005cu2026' , w i + r ) , the form of which is identical to the training data of the pre-trained WRRBM
p66
aVUnsupervised learning is often used for training encoders that convert the input data to abstract representations (i.e., encoding vectors
p67
aVNote that one can stack standard RBMs on top of a WRRBM to construct a Deep Belief Network (DBN
p68
aVThe first layer of this module is a linear transformation layer, which converts the high dimensional sparse vector into a fixed-dimensional real value vector
p69
aVThe training algorithm repeats for several iterations over the training data, which is a set of sentences labelled with gold standard POS tags
p70
aVThe sparse-feature module, as shown in the lower right part of Figure 1, is designed to incorporate commonly-used tagging features
p71
aVIntuitively, unsupervised pre-training moves the parameters of the WRRBM towards the region where properties of the web domain data are properly modelled
p72
aVPseudo-code of easy-first tagging is shown in Algorithm 1
p73
aVThe web-feature module enables us to explore the learned WRRBM in various ways
p74
aVWe reimplemented the greedy easy-first POS tagger of Ma et al
p75
aVIn particular, we both use a non-linear layer to model complex relations underling word embeddings
p76
aVMost of the indicative features for POS disambiguation can be found from the words and word combinations within a local context [ 21 , 5 ]
p77
aVOn the web-domain data, shown in Figure 3 and 4, we found that leaving the learned representation unchanged ( u'\u005cu201c' word-fixed u'\u005cu201d' , u'\u005cu201c' ngram-fixed u'\u005cu201d' ) yields consistently higher performance gains
p78
aVThe basic idea is to share word representations across different positions in the input n-gram while using position-dependent weights to distinguish between different word orders
p79
aVWe conduct experiments to test whether using the target domain data to train the WRRBM yields better performance compared with using mixed data from all sub-domains
p80
aV2012), who found that using both the word embeddings and the hidden units of a tri-gram WRRBM as additional features for a CRF chunker yields larger improvements than using word embeddings only
p81
aVSecond, the web-feature module also allows us to make a comparison between whether or not to further adjust the pre-trained representation in the supervised fine-tuning phase, which corresponds to the supervised learning strategies of Turian et al
p82
aVTagging performance and lexicon coverages of each data set on the development sets are shown in Table 5
p83
aV2010 ) learn word embeddings to improve the performance of in-domain POS tagging, named entity recognition, chunking and semantic role labelling
p84
aVWe trained 3 WRRBMs using the email domain data (RBM-E), weblog domain data (RBM-W) and mixed domain data (RBM-M), respectively, with each data set consisting of 300k sentences
p85
aVHere u'\u005cud835' u'\u005cudc0c' w 1 denotes the parameters of the first layer of the web-feature module, which is a D ×
p86
aVTowards this end, we adopt the idea of learning representations which has been demonstrated useful in capturing hidden regularities underlying the raw input data (web text, in our case
p87
aVDepending on the specific task being considered, the output of this layer can be further fed to other non-linear layers, such as a sigmoid or hyperbolic tangent layer, to model more complex relations
p88
aVThe idea is to project the original feature representations into low dimensional representations, which yields a high-accuracy classifier on the target domain
p89
aVThe algorithm proposed here belongs to a general framework named guided learning , where search and learning interact with each other
p90
aV2013 ) investigate Chinese character embeddings for joint word segmentation and POS tagging
p91
aVExploiting useful information from the web data can be the key to improving web domain tagging
p92
aV2011 ) propose to learn representations from the mixture of both source and target domain unlabelled data to improve cross-domain sentiment classification
p93
aVOur results suggest that while both strategies improve in-domain tagging accuracies, keeping the learned representation unchanged consistently results in better cross-domain accuracies
p94
aVThe value of each unit in this layer denotes the score of the corresponding POS tag
p95
aV2011 ) train their network by maximizing the training set likelihood, while our approach is to minimize the margin loss using guided learning
p96
aVIn addition to labelled data, a large amount of unlabelled data on the web domain is also provided
p97
aVFrom Figure 2 we can see that when knowledge from the pre-trained WRRBM is incorporated, both the training strategies ( u'\u005cu201c' word-fixed u'\u005cu201d' vs u'\u005cu201c' word-adjusted u'\u005cu201d' , u'\u005cu201c' ngram-fixed u'\u005cu201d' vs u'\u005cu201c' ngram-adjusted u'\u005cu201d' ) improve accuracies on the source domain, which is consistent with previous findings (Turian et al., 2010; Collobert et al., 2011
p98
aVAccuracies of the baseline tagger are shown in the upper part of Table 6
p99
aVThe parameters { u'\u005cud835' u'\u005cudc1b' , u'\u005cud835' u'\u005cudc1c' , u'\u005cud835' u'\u005cudc03' , u'\u005cud835' u'\u005cudc16' ( 1 ) , u'\u005cu2026' , u'\u005cud835' u'\u005cudc16' ( n ) } can be trained using a Metropolis-Hastings-based CD variant and the learned word representations also capture certain syntactic information; see Dahl et al
p100
aVCollobert et al
p101
aV2013) utilizes a linear scorer, our tagger adopts the neural network as its scorer
p102
aVFor each position j , there is a weight matrix u'\u005cud835' u'\u005cudc16' ( j ) u'\u005cu2208' u'\u005cu211d' H × D , which is used to model the interaction between the hidden layer and the word projection in position j
p103
aVIn this section, we give some background on RBMs and then show how they can be used to learn representations of the web text
p104
aVNote that the visible units of RBMs are binary
p105
aVLearning representations has been intensively studied in computer vision tasks [ 2 , 13 ]
p106
aVIn addition, Collobert et al
p107
aVExperimental results under the 4 combined settings on the development sets are illustrated in Figure 2, 3 and 4, where the x-axis denotes the size of the training data and y-axis denotes tagging accuracy
p108
aVIn addition, adjusting the learned representation or keeping them fixed does not result in too much difference in tagging accuracies
p109
aVTo our knowledge, we are the first to investigate guided learning for neural networks
p110
aVWe can see that using the target domain data achieves similar improvements compared with using the mixed data
p111
aV2013 ) induce bi-lingual word embeddings for word alignment
p112
aVWe trained the WRRBM on web-domain data of different sizes (number of sentences
p113
aVL projection matrix
p114
aVWe use this baseline to examine the performance of a tagger trained purely on the source domain
p115
aVWhile most previous work focus on in-domain sequential labelling or cross-domain classification tasks, we are the first to learn representations for web-domain structured prediction
p116
aVIn each iteration, the procedure shown in Algorithm 2 is applied to each sentence in the training set
p117
aVWe can see that the improvement of using word representations mainly comes from better accuracy of out-of-vocabulary (oov) words
p118
aVThe data set consists of labelled data for both the source (Wall Street Journal portion of the Penn Treebank) and target (web) domains
p119
aVIn the pre-training phase, we learn an encoder that converts the web text into an intermediate representation, which acts as useful features for prediction tasks
p120
aVAt each step, the algorithm adopts a scorer, the neural network in our case, to assign a score to each possible word-tag pair ( w , t ) , and then selects the highest score one ( w ^ , t ^ ) to tag (i.e.,, tag w ^ with t ^
p121
aVOur model captures such a dependency in a discriminative manner, by just adding tag-related features to the sparse-feature module
p122
aVIn such cases, it might be desirable to train WRRBM using data only on that domain
p123
aVWhile the tagger of Ma et al
p124
aV2011 ) use the learned representation to improve cross-domain classification tasks, we are the first to apply it to cross-domain structured prediction
p125
aVRegarding using neural networks for sequential labelling, our approach shares similarity with that of Collobert et al
p126
aVBlitzer et al
p127
aVIn each case, there can be two different training strategies depending on whether the learned representations are further adjusted or kept unchanged during the fine-turning phrase
p128
aVIn some circumstances, probability distribution over POS tags might be a more preferable form of output
p129
aVCompared with Blitzer et al
p130
aV2010 ) and Collobert et al
p131
aVWith data preprocessing, the average accuracy boosts to about 92.02 on the test set of the target domain
p132
aVLet u'\u005cud835' u'\u005cudc2f' ( j ) represents the j -th visible variable of the WRRBM, which is a vector of length
p133
aVIn particular, Collobert et al
p134
aVSimilar result was reported by Dahl et al
p135
aVAmong the many proposed encoders, we choose the restricted Boltzmann machine (RBM), which has been successfully used in many tasks [ 14 , 10 ]
p136
aVThe learned model preserves the property of preferring to tag easy words first
p137
aVOur method learns representations from only word n-grams with n ranging from 3 to 5, which can be easily applied to large scale-data
p138
aVIn addition, following Dahl et al
p139
aVPerformance of the top 2 systems of the SANCL 2012 task are also shown in Table 6
p140
aVFirst, it allows us to investigate knowledge from the WRRBM incrementally
p141
aVFor each data set, we investigate an extensive set of combinations of hyper-parameters the n-gram window ( l , r ) in { ( 1 , 1 ) , ( 2 , 1 ) , ( 1 , 2 ) , ( 2 , 2 ) } ; the hidden layer size in { 200 , 300 , 400 } ; the learning rate in { 0.1 , 0.01 , 0.001 }
p142
aVSuch auxiliary tasks can be specific to the supervised task
p143
aVFinally, more detailed accuracies under the 4 settings on the email domain are shown in Table 4
p144
aVBy contrast, using n-gram representations improves the performance on both oov and non-oov
p145
aVParameters of this layer include a bias vector u'\u005cud835' u'\u005cudc1b' w 2 u'\u005cu2208' u'\u005cu211d' H and a weight matrix u'\u005cud835' u'\u005cudc0c' w 2 u'\u005cu2208' u'\u005cu211d' H × n u'\u005cu2062' D
p146
aVThe algorithm repeats until all words are tagged
p147
aVIn some circumstances, we may know beforehand that the target domain data belongs to a certain sub-domain, such as the email domain
p148
aVThe algorithm learns not only a local classifier, but also the inference order
p149
aVIn this way, two separate back-propagation updates can be used to update the model u'\u005cu2019' s parameters (line 8 u'\u005cu223c' line 11
p150
aVMore specifically, given the i t u'\u005cu2062' h word w i of a sentence, we apply RBMs to model the joint distribution of the n-gram ( w i - l , u'\u005cu22ef' , w i + r ) , where l and r denote the left and right window, respectively
p151
aVOtherwise, parameters are updated using back-propagation
p152
aVWe conduct experiments on the official data set provided by the SANCL 2012 shared task [ 18 ]
p153
aVIn particular, their regularizer aims to minimize the Kullback-Leibler (KL) distance between the marginal distributions of the learned representations on the source and target domains
p154
aVYang et al
p155
aV2006 ) , the advantage of using RBMs is that it learns representations in a pure unsupervised manner, which is much simpler
p156
aVZheng et al
p157
aVFrom Figures 2, 3 and 4, we can see that adopting the ngram-level representation consistently achieves better performance compared with using word representations only ( u'\u005cu201c' word-fixed u'\u005cu201d' vs u'\u005cu201c' ngram-fixed u'\u005cu201d' , u'\u005cu201c' word-adjusted u'\u005cu201d' vs u'\u005cu201c' ngram-adjusted u'\u005cu201d'
p158
aVHowever, for the email domain, RBM-W yields much smaller improvement compared with RBM-E, and vice versa
p159
aVL be a projection matrix, then u'\u005cud835' u'\u005cudc03' u'\u005cud835' u'\u005cudc30' k projects w k into a D -dimensional real value vector (embedding
p160
aVSuch high dimensional input gives rise to high computational cost and it is not clear whether those approaches can be applied to large scale unlabelled data, with hundreds of millions of training examples
p161
aVThis yields the conditional distribution
p162
aV2011 ) and Turian et al
p163
aVwhich yields the conditional distributions
p164
aVOur experiments are conducted on the data set provided by the SANCL 2012 shared task, which aims at building a single robust syntactic analysis system across the web-domain
p165
aVFor the special case where w ^ and w ¯ do refer to the same word w , it can be easily verified that the two separate back-propagation updates equal to the standard back-propagation with a loss 1 + n u'\u005cu2062' n u'\u005cu2062' ( w , t ¯ ) - n u'\u005cu2062' n u'\u005cu2062' ( w , t ^ ) on the input u'\u005cu27e8' w u'\u005cu27e9'
p166
aV2012 ) and Turian et al
p167
aVIn addition, different from Le Roux et al
p168
aVThe affine form of E with respect to u'\u005cud835' u'\u005cudc2f' and u'\u005cud835' u'\u005cudc21' implies that the visible variables are conditionally independent with each other given the hidden layer units, and vice versa
p169
aVThe RBM is a type of graphical model that contains two layers of binary stochastic units u'\u005cud835' u'\u005cudc2f' u'\u005cu2208' { 0 , 1 } V and u'\u005cud835' u'\u005cudc21' u'\u005cu2208' { 0 , 1 } H , corresponding to a set of visible and hidden variables, respectively
p170
aVParticipants are not allowed to use web-domain labelled data for training
p171
aVFollowing some participants [ 12 ] , we conduct simple preprocessing steps to the input of the development and the test sets 2 2 The preprocessing steps make use of no POS knowledge, and does not bring any unfair advantages to the participants
p172
aVTheir work differs from ours in that their approaches learn representations from the feature vectors for sentiment classification, which might be of thousands of dimensions
p173
aVThe web domain data can be further classified into five sub-domains, including emails, weblogs, business reviews, news groups and Yahoo!Answers
p174
aVOur greedy tagger achieves 93.27 u'\u005cu2062' % tagging accuracy, which is significantly better than the baseline u'\u005cu2019' s 92.02 u'\u005cu2062' % accuracy ( p 0.05 by McNemar u'\u005cu2019' s test
p175
aVIn addition, while Titov ( 2011 ) and Glorot et al
p176
aVThe raw web domain data contains much noise, including spelling error, emotions and inconsistent capitalization
p177
aVTitov ( 2011 ) and Glorot et al
p178
aVParameters of RBMs u'\u005cu0398' = { u'\u005cud835' u'\u005cudc1b' , u'\u005cud835' u'\u005cudc1c' , u'\u005cud835' u'\u005cudc16' } can be trained efficiently using contrastive divergence learning (CD), see [ 11 ] for detailed descriptions of CD
p179
aVAs pointed out by Plank ( 2009 ) , for many NLP tasks, defining the auxiliary tasks is a non-trivial engineering problem
p180
aV[t] Easy-first POS tagging {algorithmic} [1] \u005cREQUIRE x a sentence of m words w 1 , u'\u005cu2026' , w m \u005cENSURE tag sequence of x \u005cSTATE u'\u005cud835' u'\u005cudc14' u'\u005cu2190' [ w 1 , u'\u005cu2026' , w m ] // untagged words \u005cWHILE u'\u005cud835' u'\u005cudc14' u'\u005cu2260' [ ] \u005cSTATE ( w ^ , t ^ ) u'\u005cu2190' arg u'\u005cu2062' max ( w , t ) u'\u005cu2208' u'\u005cud835' u'\u005cudc14' × u'\u005cud835' u'\u005cudc13' u'\u005cu2061' S u'\u005cu2062' ( w , t ) \u005cSTATE w ^ t u'\u005cu2190' t ^
p181
aVHere u'\u005cu03a3' denotes the sigmoid function
p182
aVStatistics about labelled and unlabelled data are summarized in Table 1 and Table 2, respectively
p183
aVWe apply the same preprocessing steps to all the unlabelled data
p184
aVThe output of this layer u'\u005cud835' u'\u005cudc28' w 1 is the concatenation of the projections of w i - l , u'\u005cu2026' , w i + r
p185
aVThe RBM defines the joint probability distribution over u'\u005cud835' u'\u005cudc2f' and u'\u005cud835' u'\u005cudc21' by an energy function
p186
aVTraining the score involves a forward process of complexity O u'\u005cu2062' ( n u'\u005cu2062' T 2 ) , where T denotes the number of tags
p187
aV2011 ) model the dependency between neighbouring tags in a generative manner, by employing a transition score A i u'\u005cu2062' j
p188
aVWe solve this problem by decomposing the margin loss in line 6 into two parts
p189
aVIn this work, we investigate both strategies and give empirical comparisons in the cross-domain setting
p190
aVThen u'\u005cud835' u'\u005cudc2f' ( j ) = u'\u005cud835' u'\u005cudc30' k means that the j -th word in the n-gram is w k
p191
aVThe visible biases are also shared across different positions ( b ( j ) = b u'\u005cu2062' u'\u005cu2200' j ) and the energy function is
p192
aVThis result is to some degree expected
p193
aVHowever, our network differs from theirs in the following aspects
p194
aVwhich is factorized by a visible bias u'\u005cud835' u'\u005cudc1b' u'\u005cu2208' u'\u005cu211d' V , a hidden bias u'\u005cud835' u'\u005cudc1c' u'\u005cu2208' u'\u005cu211d' H and a weight matrix u'\u005cud835' u'\u005cudc16' u'\u005cu2208' u'\u005cu211d' H × V
p195
aVwhere Z is the partition function
p196
aVOur approach consists of two phrases
p197
aV2012 ) , we do not use any external resources in data cleaning
p198
aVTo our knowledge, no investigations have been presented in the literature on this issue
p199
aVAgain Z is the partition function
p200
aVIn NLP, there is also much work along this line
p201
aVWe would like to thank Hugo Larochelle for his advices on re-implementing WRRBM
p202
aVConsecutive occurrences of one or more digits within a word are replaced with u'\u005cu201c' #DIG u'\u005cu201d'
p203
aV2010 ) , we also lowercased all the unlabelled data and removed those sentences that contain less than 90% a-z letters
p204
aVFrom the lexicon coverages, we can see that the sub-domains varies significantly
p205
aV2012 ) for more details
p206
aVUpper cased words that contain more than 4 letters are lowercased
p207
aVUpdate u'\u005cu2062' ( u'\u005cu27e8' w ^ u'\u005cu27e9' , e ^ ) \u005cSTATE n u'\u005cu2062' n
p208
aVu'\u005cud835' u'\u005cudc14' u'\u005cu2190' [ w 1 , u'\u005cu2026' , w m ] u'\u005cu2001' u'\u005cu2001' // untagged words \u005cSTATE u'\u005cud835' u'\u005cudc11' u'\u005cu2190' [ ( w 1 , t 1 ) , u'\u005cu2026' , ( w m , t m ) ] // reference
p209
aVThe joint distribution P u'\u005cu2062' ( u'\u005cud835' u'\u005cudc2f' , u'\u005cud835' u'\u005cudc21' ) is given by
p210
aVLet w k be the k -th entry of lexicon L , and u'\u005cud835' u'\u005cudc30' k be its one-hot representation (i.e.,, only the k -th component of u'\u005cud835' u'\u005cudc30' k is 1, and all the others are 0
p211
aVTitov ( 2011 ) also propose a regularizer to constrain the inter-domain variability
p212
aVUpdate u'\u005cu2062' ( u'\u005cu27e8' w ¯ u'\u005cu27e9' , e ¯ ) \u005cELSE \u005cSTATE u'\u005cud835' u'\u005cudc14' u'\u005cu2190' u'\u005cud835' u'\u005cudc14' / { w ^ } , u'\u005cu2003' u'\u005cud835' u'\u005cudc11' u'\u005cu2190' u'\u005cud835' u'\u005cudc11' / ( w ^ , t ^ ) \u005cENDIF \u005cENDWHILE \u005cRETURN n u'\u005cu2062' n
p213
aVBackPropErr u'\u005cu2062' ( u'\u005cu27e8' w ¯ u'\u005cu27e9' , 1 + n u'\u005cu2062' n u'\u005cu2062' ( w ¯ , t ¯ ) ) \u005cSTATE n u'\u005cu2062' n
p214
aVBackPropErr u'\u005cu2062' ( u'\u005cu27e8' w ^ u'\u005cu27e9' , - n u'\u005cu2062' n u'\u005cu2062' ( w ^ , t ^ ) ) \u005cSTATE e ¯ u'\u005cu2190' n u'\u005cu2062' n
p215
aV2013), which is used for all the experiments
p216
aVLeft brackets such as u'\u005cu201c' u'\u005cu201d' , u'\u005cu201c' { u'\u005cu201d' and u'\u005cu201c' [ u'\u005cu201d' are converted to u'\u005cu201c' -LRB- u'\u005cu201d'
p217
aVRepeated punctuations such as u'\u005cu201c' u'\u005cu201d' are collapsed into one
p218
aVu'\u005cud835' u'\u005cudc14' u'\u005cu2190' u'\u005cud835' u'\u005cudc14' / [ w ^ ] // remove w ^ from u'\u005cud835' u'\u005cudc14'
p219
aVWe also thank Nan Yang, Shujie Liu and Tong Xiao for the fruitful discussions, and three anonymous reviewers for their insightful suggestions
p220
aVOur code will be publicly available at https://github.com/majineu/TWeb
p221
aVThis research was supported by the National Science Foundation of China (61272376; 61300097), the research grant T2MOE1301 from Singapore Ministry of Education (MOE) and the start-up grant SRG ISTD2012038 from SUTD
p222
aVSimilarly, right brackets are converted to u'\u005cu201c' -RRB- u'\u005cu201d'
p223
aVTokens starting with u'\u005cu201c' www u'\u005cu201d' , u'\u005cu201c' http u'\u005cu201d' or ending with u'\u005cu201c' .org u'\u005cu201d' , u'\u005cu201c' .com u'\u005cu201d' are converted to a u'\u005cu201c' #URL u'\u005cu201d' symbol
p224
aVNeutral quotes are transformed to opening or closing quotes
p225
aV2012
p226
aVL
p227
aV2007
p228
aV2011 ) , respectively
p229
aV2011 )
p230
aV2011
p231
aV[ w 1 t , u'\u005cu2026' , w m t ]
p232
aV- n u'\u005cu2062' n u'\u005cu2062' ( w ^ , t ^ ) , which is associated with u'\u005cu27e8' w ^ u'\u005cu27e9'
p233
aVLet u'\u005cud835' u'\u005cudc03' u'\u005cu2208' u'\u005cu211d' D ×
p234
aV1 + n u'\u005cu2062' n u'\u005cu2062' ( w ¯ , t ¯ ) , which is associated with u'\u005cu27e8' w ¯ u'\u005cu27e9' ;
p235
a.