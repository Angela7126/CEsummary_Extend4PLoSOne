<html>
<head>
<title>P14-2052.xhtml_1.pickle</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Our method jointly utilizes relations between sentences and relations between words, and extracts a rooted document subtree from a document tree whose nodes are arbitrary subtrees of the sentence tree</a>
<a name="1">[1]</a> <a href="#1" id=1>After the document tree is obtained, we use a dependency parser to obtain the syntactic dependency trees of sentences</a>
<a name="2">[2]</a> <a href="#2" id=2>In particular, we extract a rooted document subtree from the document tree, and sentence subtrees from sentence trees in the document tree</a>
<a name="3">[3]</a> <a href="#3" id=3>The sentence tree is a tree that has words as nodes and head modifier relationships between words obtained by the dependency parser as edges</a>
<a name="4">[4]</a> <a href="#4" id=4>We converted the rhetorical relations between EDUs to the relations between sentences to build the nested tree structure</a>
<a name="5">[5]</a> <a href="#5" id=5>As a result, we obtain a tree that represents the parent-child relations of sentences, and we can use it as a document tree</a>
<a name="6">[6]</a> <a href="#6" id=6>A document in RST is segmented into EDUs and adjacent EDUs are linked with rhetorical relations to build an RST-Discourse Tree (RST-DT) that has a hierarchical structure of the relations</a>
<a name="7">[7]</a> <a href="#7" id=7>The document tree is a tree that has sentences as nodes and head modifier relationships between sentences obtained by RST as edges</a>
<a name="8">[8]</a> <a href="#8" id=8>Fortunately we can simply convert DEP-DTs to obtain dependency trees between sentences</a>
<a name="9">[9]</a> <a href="#9" id=9>Finally, we obtain a nested tree</a>
<a name="10">[10]</a> <a href="#10" id=10>We can build the nested tree by regarding each node of the document tree</a>
</body>
</html>