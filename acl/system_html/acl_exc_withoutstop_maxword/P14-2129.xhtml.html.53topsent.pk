(lp0
VWe use hedge segmentation as a finite-state pre-processing step for hedge context-free parsing
p1
aVGiven a set of labeled pairs ( S , H ) where S is a sentence of n words w 1 u'\u005cu2062' u'\u005cu2026' u'\u005cu2062' w n and H is its hedge parse tree, word w b belongs to B if there is a hedge constituent spanning w b u'\u005cu2062' u'\u005cu2026' u'\u005cu2062' w e for some e u'\u005cu2265' b and w b belongs to B ¯ otherwise
p2
aVFinally, Figure 3 shows the speed of inference, labeled precision and labeled recall of annotating hedge constituents on the test set as a function of the maximum span parameter L , versus the baseline parser
p3
aVIt is possible to parse with a standardly induced PCFG using this sort of hedge constrained parsing that only considers a subset of the chart cells, and speedups are achieved, however this is clearly non-optimal, since the model is ill-suited to combining hedges into flat structures at the root of the tree
p4
aVA unique property of hedge constituents compared to constituents in the original parse trees is that they are sequentially connected to the top-most node
p5
aVOur task is to learn which words can begin ( B ) a hedge constituent
p6
aVNote that segmentation time is negligible compared to the parsing time, hence is omitted in reported time
p7
aVIf we apply this transform to an entire treebank, we can use
p8
a.