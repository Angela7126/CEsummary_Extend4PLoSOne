<html>
<head>
<title>f0024.txt</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>The result of a production system pattern match is a substitution of constants for variables in the pattern part of the rule.</a>
<a name="1">[1]</a> <a href="#1" id=1>In my opinion, GPS was unsuccessful as a general problem solver, because problems don't take this form in general and because most of the knowledge about the common sense needed for problem solving and achieving goals is not simply representable in the form of rules for transforming expressions.</a>
<a name="2">[2]</a> <a href="#2" id=2>A production system (or a logic program) can only use this fact by substituting particular bacteria for the variables.</a>
<a name="3">[3]</a> <a href="#3" id=3>For example, consider the definition that a container is sterile if it is sealed against entry by bacteria, and all the bacteria in it are dead.</a>
<a name="4">[4]</a> <a href="#4" id=4>The common sense information possessed by humans would be written as logical sentences and included in the database.</a>
<a name="5">[5]</a> <a href="#5" id=5>In principle, Prolog goes slightly beyond this, because the expressions found as values of variables by Prolog programs can themselves involve free variables.</a>
<a name="6">[6]</a> <a href="#6" id=6>Thus it cannot reason that heating a sealed container will sterilize it given that a heated bacterium dies, because it cannot reason about the unenumerated set of bacteria in the container.</a>
<a name="7">[7]</a> <a href="#7" id=7>In fact MYCIN has no way of representing processes occuring in time, although other production systems can represent processes at about the level of the situation calculus to be described in the next section.</a>
<a name="8">[8]</a> <a href="#8" id=8>However, if we imagine that additional features of situations and additional actions may be added to the database, we face the problem that the axiomatization of an action is never completed.</a>
<a name="9">[9]</a> <a href="#9" id=9>We say that a container is sterile if it is sealed and all the bacteria in it are dead.</a>
<a name="10">[10]</a> <a href="#10" id=10>A small conceptual modification to a behavior is usually not represented by a small modification to the program, especially if machine language programs are used and any one small modification to the text of a program is considered as likely as any other.</a>
<a name="11">[11]</a> <a href="#11" id=11>It seemed to me in 1958 that small modifications in behavior are most often representable as small modifications in beliefs about the world, and this requires a system that represents beliefs explicitly.</a>
<a name="12">[12]</a> <a href="#12" id=12>However, a Prolog program incorporating this fragment directly can sterilize a container only by killing each bacterium individually and would require that some other part of the program successively generate the names of the bacteria.</a>
<a name="13">[13]</a> <a href="#13" id=13>This led to STRIPS (Fikes and Nilsson 1971) which reduced the use of logic to reasoning within a situation.</a>
<a name="14">[14]</a> <a href="#14" id=14>A careful construction of the axiom might succeed in including the exceptions of penguins and dead birds, but clearly we can think up as many additional exceptions like birds with their feet encased in concrete as we like.</a>
<a name="15">[15]</a> <a href="#15" id=15>Newell's current candidate for general problem representation is SOAR (Laird, Newell and Rosenbloom 1987), which, as I understand it, is concerned with transforming one state to another, where the states need not be represented by expressions.</a>
<a name="16">[16]</a> <a href="#16" id=16>Clearly the axiom must be qualified in some way since penguins, dead birds and birds whose feet are encased in concrete can't fly.</a>
<a name="17">[17]</a> <a href="#17" id=17>Prolog represents a local optimum in this continuum, because Horn clauses are medium expressive but can be interpreted directly by a logical problem solver.</a>
</body>
</html>