<html>
<head>
<title>f0021.txt</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>No matter how the rest of the map is colored, there is always a color available for such a country.1 We use this in to improve a Pereira-Porto map coloring program by "reducing the map" by removing such countries and doing our trial-and-error coloring on the reduced map, confident that once the reduced map is colored, the coloring can be extended to the omitted countries.</a>
<a name="1">[1]</a> <a href="#1" id=1>Our improved coloring algorithm then reduces the map by repeatedly dropping countries with four or fewer neighbors, colors the reduced map exhaustively, and then colors the dropped countries in the reverse order using Kempe transformations when necessary.</a>
<a name="2">[2]</a> <a href="#2" id=2>Pereira and Porto (1980) give a logic program for coloring planar maps with four colors and discuss how "selective backtracking" can reduce the search involved in coloring a map from that done by a straightforward PROLOG execution of the same program.</a>
<a name="3">[3]</a> <a href="#3" id=3>The validity of this reduction depends on the following Kempe proof that if we have colored a partial map and want to add a country with four neighbors, we can always revise the coloring of the partial map to permit coloring the four neighbor country.</a>
<a name="4">[4]</a> <a href="#4" id=4>Realizing the Kempe transformation algorithm as control of the Pereira-Porto logic presents a more difficult challenge to the designers of control languages for logic programming.</a>
</body>
</html>