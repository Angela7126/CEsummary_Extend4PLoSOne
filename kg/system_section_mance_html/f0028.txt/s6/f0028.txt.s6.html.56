<html>
<head>
<title>f0028.txt.s6</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>So, it is paradoxical that the data management community has worked for 40 years to achieve something called data independence -- a clear separation of programs from data.</a>
<a name="1">[1]</a> <a href="#1" id=1>The separation of data and programs is artificial -- one cannot see the data without using a program and most programs are data driven.</a>
<a name="2">[2]</a> <a href="#2" id=2>Data classes encapsulated with methods provide data independence and make it much easier to evolve the data without perturbing programs.</a>
<a name="3">[3]</a> <a href="#3" id=3>a record) on a single disk page, it might also choose to store large, possibly infrequently referenced attributes of a table corresponding to large text objects, JPEG images, or multidimensional arrays in separate storage containers on different disk pages and/or different storage volumes in order to maximize the overall performance of the system.</a>
<a name="4">[4]</a> <a href="#4" id=4>By allowing such techniques, physical data independence allows performance improvements by reorganizing data for parallelism -- at little or no extra effort on the part of scientists.</a>
<a name="5">[5]</a> <a href="#5" id=5>To preserve applications that depend on T, the database administrator can then define a view over T' and T" corresponding to the original definition of table T, allowing old programs to continue to operate correctly.</a>
<a name="6">[6]</a> <a href="#6" id=6>So, these ideas are still evolving.</a>
<a name="7">[7]</a> <a href="#7" id=7>Views are used to solve these problems by dynamically translating data to the appropriate formats (converting among character and number representations, converting among 6-digit and 9-digit postal codes, converting between long-and-short names, and hiding new information from old programs.</a>
<a name="8">[8]</a> <a href="#8" id=8>While a database system might choose to map each row to a contiguous storage container (e.g.</a>
<a name="9">[9]</a> <a href="#9" id=9>Views serve many purposes including increased security (by hiding attributes from applications and/or users without a legitimate need for access) and enhanced performance (by materializing views defined by complex SQL queries over very large input tables).</a>
</body>
</html>