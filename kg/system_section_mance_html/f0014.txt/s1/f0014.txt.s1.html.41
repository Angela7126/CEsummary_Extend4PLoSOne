<html>
<head>
<title>f0014.txt.s1</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>Since the computation of fm(n) may not terminate for some n, it is necessary to avoid getting stuck on such n's.</a>
<a name="1">[1]</a> <a href="#1" id=1>We call a problem well-defined if there is a test which can be applied to a proposed solution.</a>
<a name="2">[2]</a> <a href="#2" id=2>Hence the machine calculates the numbers fmk(n) in some order where fmk(n) is fm(n) if the computation of fm(n) ends after k steps and is otherwise undefined.</a>
<a name="3">[3]</a> <a href="#3" id=3>Since any test may be regarded as being performed by a Turing machine, this means that welldefined intellectual problems may be regarded as those of inverting functions and partial functions defined by Turing machines.</a>
<a name="4">[4]</a> <a href="#4" id=4>Our problem does not end once we have found this procedure for computing g(m,r) because this procedure is extremely inefficient.</a>
<a name="5">[5]</a> <a href="#5" id=5>In fact, it has been shown that the existence of g(m,r) is an undecidable question in that there does not exist a Turing machine which will eventually come to a stop and print a 1 if g(m,r) does not exist.</a>
<a name="6">[6]</a> <a href="#6" id=6>It will therefore find g(m,r) if it exists, but will never know enough to give up if g(m,r) does not exist.</a>
<a name="7">[7]</a> <a href="#7" id=7>Essentially, it substitutes integers in fm(n) until it comes to one such that fm(n) = r.</a>
</body>
</html>