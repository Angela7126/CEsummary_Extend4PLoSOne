<html>
<head>
<title>f0014.txt.s1</title>
</head>
<body bgcolor="white">
<a name="0">[0]</a> <a href="#0" id=0>In spite of this, it is easy to show that a Turing machine exists which will compute a g(m,r) if such exists.</a>
<a name="1">[1]</a> <a href="#1" id=1>In fact, it has been shown that the existence of g(m,r) is an undecidable question in that there does not exist a Turing machine which will eventually come to a stop and print a 1 if g(m,r) does not exist.</a>
<a name="2">[2]</a> <a href="#2" id=2>Since the computation of fm(n) may not terminate for some n, it is necessary to avoid getting stuck on such n's.</a>
<a name="3">[3]</a> <a href="#3" id=3>This paper deals with the problem of designing a Turing machine which, when confronted by the number pair (m,r), computes as efficiently as possible a function g(m,r) such that fm(g(m,r)) = r.</a>
<a name="4">[4]</a> <a href="#4" id=4>If the proposed solution is not correct, we may either require that the test indicate this in a finite number of steps or else allow it to go on indefinitely.</a>
<a name="5">[5]</a> <a href="#5" id=5>It is not defined for a given value of n if the computation does not come to an end.</a>
<a name="6">[6]</a> <a href="#6" id=6>In case the proposed solution is a solution, the test must confirm this in a finite number of steps.</a>
<a name="7">[7]</a> <a href="#7" id=7>Essentially, it substitutes integers in fm(n) until it comes to one such that fm(n) = r.</a>
<a name="8">[8]</a> <a href="#8" id=8>It will therefore find g(m,r) if it exists, but will never know enough to give up if g(m,r) does not exist.</a>
</body>
</html>